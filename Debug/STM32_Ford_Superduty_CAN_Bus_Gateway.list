
STM32_Ford_Superduty_CAN_Bus_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08004f38  08004f38  00005f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b78  08005b78  000072a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b80  08005b80  000072a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00006b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b84  08005b84  00006b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a0  20000000  08005b88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  200002a0  08005e28  000072a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  08005e28  00007a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000072a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb60  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002596  00000000  00000000  00013e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  000163c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000854  00000000  00000000  00016ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f3e  00000000  00000000  00017744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ac5  00000000  00000000  0003a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb87  00000000  00000000  0004b147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117cce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003210  00000000  00000000  00117d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011af24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002a0 	.word	0x200002a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f20 	.word	0x08004f20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002a4 	.word	0x200002a4
 800020c:	08004f20 	.word	0x08004f20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <get_request_id>:
    CAN_ID_BCM = 0x72E,   // Body Control Module CAN ID
    CAN_ID_SCCM = 0x72C,  // Steering Column Control Module CAN ID
} CAN_IDs;

// Function to calculate request ID based on reply CAN ID
static inline uint32_t get_request_id(CAN_IDs module_id) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
    return module_id - CAN_ID_REQUEST_REPLY_OFFSET;
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	3b08      	subs	r3, #8
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <build_can_request>:
#include "ui.h"
#include "utils.h"
#include "error.h"

uint64_t build_can_request(CANDeviceConfig *device, CANDevicePID *pid)
{
 80005bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005c0:	b094      	sub	sp, #80	@ 0x50
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80005c6:	6339      	str	r1, [r7, #48]	@ 0x30
	uint64_t uint64_payload = 0;
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	f04f 0300 	mov.w	r3, #0
 80005d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t request_size_in_bytes = 0x03; // 3 bytes because of payload below added up
 80005d4:	2303      	movs	r3, #3
 80005d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t command_byte = can_request_commands[CMD_READ].byte; // 0x22
 80005da:	4b4c      	ldr	r3, [pc, #304]	@ (800070c <build_can_request+0x150>)
 80005dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80005e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t pid_id = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	pid_id = __builtin_bswap16(*(uint16_t *)pid->pid_id);
 80005ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005ec:	3308      	adds	r3, #8
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	ba5b      	rev16	r3, r3
 80005f2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

	// MAX_DLC_BYTE_LENGTH = 8
	uint8_t starting_msb = ((MAX_DLC_BYTE_LENGTH-1)*8);
 80005f6:	2338      	movs	r3, #56	@ 0x38
 80005f8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	uint8_t uint8_shift = starting_msb - DATA_LENGTH_START;
 80005fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	uint64_t uint64_size_in_bytes = (uint64_t)request_size_in_bytes;
 8000604:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000608:	2200      	movs	r2, #0
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	61fa      	str	r2, [r7, #28]
 800060e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000612:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38

	uint64_payload |= ((uint64_t)uint64_size_in_bytes) << uint8_shift;
 8000616:	f897 4042 	ldrb.w	r4, [r7, #66]	@ 0x42
 800061a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800061e:	f1a4 0120 	sub.w	r1, r4, #32
 8000622:	f1c4 0020 	rsb	r0, r4, #32
 8000626:	fa03 f604 	lsl.w	r6, r3, r4
 800062a:	fa02 f101 	lsl.w	r1, r2, r1
 800062e:	430e      	orrs	r6, r1
 8000630:	fa22 f000 	lsr.w	r0, r2, r0
 8000634:	4306      	orrs	r6, r0
 8000636:	fa02 f504 	lsl.w	r5, r2, r4
 800063a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800063e:	ea42 0105 	orr.w	r1, r2, r5
 8000642:	6139      	str	r1, [r7, #16]
 8000644:	4333      	orrs	r3, r6
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800064c:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
	uint64_payload |= ((uint64_t)command_byte) << (starting_msb - (DATA_COMMAND_START * 8));
 8000650:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000654:	2200      	movs	r2, #0
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800065a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800065e:	f1a3 0208 	sub.w	r2, r3, #8
 8000662:	f1a2 0120 	sub.w	r1, r2, #32
 8000666:	f1c2 0320 	rsb	r3, r2, #32
 800066a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800066e:	4628      	mov	r0, r5
 8000670:	fa00 fb02 	lsl.w	fp, r0, r2
 8000674:	4620      	mov	r0, r4
 8000676:	fa00 f101 	lsl.w	r1, r0, r1
 800067a:	ea4b 0b01 	orr.w	fp, fp, r1
 800067e:	4621      	mov	r1, r4
 8000680:	fa21 f303 	lsr.w	r3, r1, r3
 8000684:	ea4b 0b03 	orr.w	fp, fp, r3
 8000688:	4623      	mov	r3, r4
 800068a:	fa03 fa02 	lsl.w	sl, r3, r2
 800068e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000692:	ea42 010a 	orr.w	r1, r2, sl
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	ea43 030b 	orr.w	r3, r3, fp
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80006a2:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
	uint64_payload |= ((uint64_t)pid_id) << (starting_msb - ((DATA_PID_START+1) * 8));
 80006a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80006aa:	2200      	movs	r2, #0
 80006ac:	623b      	str	r3, [r7, #32]
 80006ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80006b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80006b4:	3b18      	subs	r3, #24
 80006b6:	f1a3 0120 	sub.w	r1, r3, #32
 80006ba:	f1c3 0220 	rsb	r2, r3, #32
 80006be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80006c2:	4628      	mov	r0, r5
 80006c4:	fa00 f903 	lsl.w	r9, r0, r3
 80006c8:	4620      	mov	r0, r4
 80006ca:	fa00 f101 	lsl.w	r1, r0, r1
 80006ce:	ea49 0901 	orr.w	r9, r9, r1
 80006d2:	4621      	mov	r1, r4
 80006d4:	fa21 f202 	lsr.w	r2, r1, r2
 80006d8:	ea49 0902 	orr.w	r9, r9, r2
 80006dc:	4622      	mov	r2, r4
 80006de:	fa02 f803 	lsl.w	r8, r2, r3
 80006e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80006e6:	ea42 0108 	orr.w	r1, r2, r8
 80006ea:	6039      	str	r1, [r7, #0]
 80006ec:	ea43 0309 	orr.w	r3, r3, r9
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80006f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48

	return uint64_payload;
 80006fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 80006fe:	4610      	mov	r0, r2
 8000700:	4619      	mov	r1, r3
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800070a:	4770      	bx	lr
 800070c:	20000190 	.word	0x20000190

08000710 <send_can_request>:

// Function to send a CAN request for a specific device
void send_can_request(CANInstance can_instance, CANDeviceConfig *device, CANDevicePID *pid)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b0cc      	sub	sp, #304	@ 0x130
 8000714:	af00      	add	r7, sp, #0
 8000716:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800071a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000724:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800072e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000732:	4602      	mov	r2, r0
 8000734:	701a      	strb	r2, [r3, #0]
    // Calculate the request ID by subtracting the offset
    uint64_t request_id = get_request_id(device->can_id);
 8000736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800073a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	889b      	ldrh	r3, [r3, #4]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff2c 	bl	80005a0 <get_request_id>
 8000748:	4603      	mov	r3, r0
 800074a:	2200      	movs	r2, #0
 800074c:	461c      	mov	r4, r3
 800074e:	4615      	mov	r5, r2
 8000750:	e9c7 4548 	strd	r4, r5, [r7, #288]	@ 0x120

    // Prepare the CAN transmission header
    TxHeader[can_instance].StdId = request_id;
 8000754:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000758:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8000762:	4885      	ldr	r0, [pc, #532]	@ (8000978 <send_can_request+0x268>)
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	4403      	add	r3, r0
 800076e:	6019      	str	r1, [r3, #0]
    TxHeader[can_instance].ExtId = 0;
 8000770:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000774:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	497f      	ldr	r1, [pc, #508]	@ (8000978 <send_can_request+0x268>)
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	440b      	add	r3, r1
 8000786:	3304      	adds	r3, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
    TxHeader[can_instance].IDE = CAN_ID_STD;  // Use standard CAN ID
 800078c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000790:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4978      	ldr	r1, [pc, #480]	@ (8000978 <send_can_request+0x268>)
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	440b      	add	r3, r1
 80007a2:	3308      	adds	r3, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
    TxHeader[can_instance].RTR = CAN_RTR_DATA;
 80007a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	4971      	ldr	r1, [pc, #452]	@ (8000978 <send_can_request+0x268>)
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	440b      	add	r3, r1
 80007be:	330c      	adds	r3, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
    TxHeader[can_instance].DLC = MAX_DLC_BYTE_LENGTH;  // Default Data Length Code
 80007c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	496a      	ldr	r1, [pc, #424]	@ (8000978 <send_can_request+0x268>)
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	440b      	add	r3, r1
 80007da:	3310      	adds	r3, #16
 80007dc:	2208      	movs	r2, #8
 80007de:	601a      	str	r2, [r3, #0]
    TxHeader[can_instance].TransmitGlobalTime = DISABLE;
 80007e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	4963      	ldr	r1, [pc, #396]	@ (8000978 <send_can_request+0x268>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	3314      	adds	r3, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]

    uint64_t request_data = build_can_request(device, pid);
 80007fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000800:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8000804:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000808:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800080c:	6811      	ldr	r1, [r2, #0]
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	f7ff fed4 	bl	80005bc <build_can_request>
 8000814:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	// reverse the byte order first (little endian to big endian)
    uint64_t reversed_bytes_request_data = __builtin_bswap64(request_data);
 8000818:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800081c:	ba19      	rev	r1, r3
 800081e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000822:	ba18      	rev	r0, r3
 8000824:	4602      	mov	r2, r0
 8000826:	460b      	mov	r3, r1
 8000828:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    // Copy request data into TxData buffer
    memcpy(TxData[can_instance], &reversed_bytes_request_data, TxHeader[can_instance].DLC);
 800082c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000830:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4a50      	ldr	r2, [pc, #320]	@ (800097c <send_can_request+0x26c>)
 800083a:	1898      	adds	r0, r3, r2
 800083c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000840:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	494c      	ldr	r1, [pc, #304]	@ (8000978 <send_can_request+0x268>)
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	440b      	add	r3, r1
 8000852:	3310      	adds	r3, #16
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800085a:	4619      	mov	r1, r3
 800085c:	f003 ff14 	bl	8004688 <memcpy>

	// Send the CAN message
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader[can_instance], TxData[can_instance], &TxMailbox[can_instance]) != HAL_OK) {
 8000860:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000864:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	4a41      	ldr	r2, [pc, #260]	@ (8000978 <send_can_request+0x268>)
 8000874:	1899      	adds	r1, r3, r2
 8000876:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800087a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	4a3e      	ldr	r2, [pc, #248]	@ (800097c <send_can_request+0x26c>)
 8000884:	441a      	add	r2, r3
 8000886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800088a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	483b      	ldr	r0, [pc, #236]	@ (8000980 <send_can_request+0x270>)
 8000894:	4403      	add	r3, r0
 8000896:	483b      	ldr	r0, [pc, #236]	@ (8000984 <send_can_request+0x274>)
 8000898:	f001 fc5e 	bl	8002158 <HAL_CAN_AddTxMessage>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d012      	beq.n	80008c8 <send_can_request+0x1b8>
		char error_msg[255];
		sprintf(error_msg, "Err Tx on CAN%d", can_instance);
 80008a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80008a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4935      	ldr	r1, [pc, #212]	@ (8000988 <send_can_request+0x278>)
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fe78 	bl	80045a8 <siprintf>
		send_Console_Msg(error_msg);
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fd9f 	bl	8001400 <send_Console_Msg>
		Error_Handler();
 80008c2:	f000 fbf3 	bl	80010ac <Error_Handler>
			offset += snprintf(&sent_msg[offset], sizeof(sent_msg) - offset, "%02X", TxData[can_instance][j]);
		}

		send_Console_Msg(sent_msg);
	}
}
 80008c6:	e052      	b.n	800096e <send_can_request+0x25e>
		tx_count[can_instance]++;
 80008c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80008cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4a2e      	ldr	r2, [pc, #184]	@ (800098c <send_can_request+0x27c>)
 80008d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d8:	3201      	adds	r2, #1
 80008da:	492c      	ldr	r1, [pc, #176]	@ (800098c <send_can_request+0x27c>)
 80008dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		int offset = snprintf(sent_msg, sizeof(sent_msg), "Tx %X/", (unsigned int)request_id);
 80008e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008e4:	f107 0010 	add.w	r0, r7, #16
 80008e8:	4a29      	ldr	r2, [pc, #164]	@ (8000990 <send_can_request+0x280>)
 80008ea:	21ff      	movs	r1, #255	@ 0xff
 80008ec:	f003 fe28 	bl	8004540 <sniprintf>
 80008f0:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		for (int j = 0; j < TxHeader[can_instance].DLC; j++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80008fa:	e022      	b.n	8000942 <send_can_request+0x232>
			offset += snprintf(&sent_msg[offset], sizeof(sent_msg) - offset, "%02X", TxData[can_instance][j]);
 80008fc:	f107 0210 	add.w	r2, r7, #16
 8000900:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000904:	18d0      	adds	r0, r2, r3
 8000906:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800090a:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 800090e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000912:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4a18      	ldr	r2, [pc, #96]	@ (800097c <send_can_request+0x26c>)
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	441a      	add	r2, r3
 800091e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <send_can_request+0x284>)
 8000928:	f003 fe0a 	bl	8004540 <sniprintf>
 800092c:	4602      	mov	r2, r0
 800092e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000932:	4413      	add	r3, r2
 8000934:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		for (int j = 0; j < TxHeader[can_instance].DLC; j++) {
 8000938:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800093c:	3301      	adds	r3, #1
 800093e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000942:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000946:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	490a      	ldr	r1, [pc, #40]	@ (8000978 <send_can_request+0x268>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3310      	adds	r3, #16
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000960:	429a      	cmp	r2, r3
 8000962:	d8cb      	bhi.n	80008fc <send_can_request+0x1ec>
		send_Console_Msg(sent_msg);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fd49 	bl	8001400 <send_Console_Msg>
}
 800096e:	bf00      	nop
 8000970:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000974:	46bd      	mov	sp, r7
 8000976:	bdb0      	pop	{r4, r5, r7, pc}
 8000978:	20000338 	.word	0x20000338
 800097c:	200003b8 	.word	0x200003b8
 8000980:	200003a0 	.word	0x200003a0
 8000984:	200002bc 	.word	0x200002bc
 8000988:	08004f38 	.word	0x08004f38
 800098c:	200003c8 	.word	0x200003c8
 8000990:	08004f48 	.word	0x08004f48
 8000994:	08004f50 	.word	0x08004f50

08000998 <send_all_can_requests>:



// Function to loop through all device configurations and send a request for each
void send_all_can_requests(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
    for (uint8_t device_index = 0; device_index < CAN_DEVICE_COUNT; device_index++)
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e020      	b.n	80009e6 <send_all_can_requests+0x4e>
    {
        CANDeviceConfig *device = &can_devices[device_index];
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	4a13      	ldr	r2, [pc, #76]	@ (80009f8 <send_all_can_requests+0x60>)
 80009aa:	4413      	add	r3, r2
 80009ac:	607b      	str	r3, [r7, #4]

        // Loop through each PID in the current device
        for (size_t pid_index = 0; pid_index < device->pid_count; pid_index++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	e00f      	b.n	80009d4 <send_all_can_requests+0x3c>
        {
            CANDevicePID *pid = &device->pids[pid_index];
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	215c      	movs	r1, #92	@ 0x5c
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	603b      	str	r3, [r7, #0]
            send_can_request(CAN_TRUCK, device, pid);
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fea1 	bl	8000710 <send_can_request>
        for (size_t pid_index = 0; pid_index < device->pid_count; pid_index++)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7b1b      	ldrb	r3, [r3, #12]
 80009d8:	461a      	mov	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	4293      	cmp	r3, r2
 80009de:	d3e9      	bcc.n	80009b4 <send_all_can_requests+0x1c>
    for (uint8_t device_index = 0; device_index < CAN_DEVICE_COUNT; device_index++)
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d9db      	bls.n	80009a4 <send_all_can_requests+0xc>
        }
    }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000170 	.word	0x20000170

080009fc <get_CANDeviceConfig_by_canid>:


CANDeviceConfig *get_CANDeviceConfig_by_canid(uint32_t rx_id)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    for (uint8_t module_idx = 0; module_idx < CAN_DEVICE_COUNT; module_idx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	e00f      	b.n	8000a2a <get_CANDeviceConfig_by_canid+0x2e>
    {
        CANDeviceConfig *module_config = &can_devices[module_idx];
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a40 <get_CANDeviceConfig_by_canid+0x44>)
 8000a10:	4413      	add	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]

        // Check if the rx_id matches the module's can_id
        if (module_config->can_id == rx_id)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	889b      	ldrh	r3, [r3, #4]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d101      	bne.n	8000a24 <get_CANDeviceConfig_by_canid+0x28>
        	return module_config;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	e006      	b.n	8000a32 <get_CANDeviceConfig_by_canid+0x36>
    for (uint8_t module_idx = 0; module_idx < CAN_DEVICE_COUNT; module_idx++)
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	3301      	adds	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d9ec      	bls.n	8000a0a <get_CANDeviceConfig_by_canid+0xe>
    }
    return NULL;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000170 	.word	0x20000170

08000a44 <get_CANDevicePID_by_pid>:

CANDevicePID *get_CANDevicePID_by_pid(CANDeviceConfig *module, uint16_t pid)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	807b      	strh	r3, [r7, #2]
    for (uint8_t pid_idx = 0; pid_idx < module->pid_count; pid_idx++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	75fb      	strb	r3, [r7, #23]
 8000a54:	e014      	b.n	8000a80 <get_CANDevicePID_by_pid+0x3c>
    {
         CANDevicePID *device_pid = &module->pids[pid_idx];
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	215c      	movs	r1, #92	@ 0x5c
 8000a5e:	fb01 f303 	mul.w	r3, r1, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]

         uint16_t module_pid = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	81fb      	strh	r3, [r7, #14]
         memcpy(&module_pid, ((uint8_t *)&pid), PID_BYTE_LENGTH);
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	81fb      	strh	r3, [r7, #14]

         if (module_pid == pid)
 8000a6e:	89fa      	ldrh	r2, [r7, #14]
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d101      	bne.n	8000a7a <get_CANDevicePID_by_pid+0x36>
        	 return device_pid;
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	e008      	b.n	8000a8c <get_CANDevicePID_by_pid+0x48>
    for (uint8_t pid_idx = 0; pid_idx < module->pid_count; pid_idx++)
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	75fb      	strb	r3, [r7, #23]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7b1b      	ldrb	r3, [r3, #12]
 8000a84:	7dfa      	ldrb	r2, [r7, #23]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3e5      	bcc.n	8000a56 <get_CANDevicePID_by_pid+0x12>
    }
    return NULL;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	371c      	adds	r7, #28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <iterate_signals_for_changes>:

void iterate_signals_for_changes(CANDevicePID *device_pid, uint32_t payload)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	for (uint8_t signal_idx = 0; signal_idx < sizeof(device_pid->signals) / sizeof(device_pid->signals[0]); signal_idx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
 8000aa6:	e026      	b.n	8000af6 <iterate_signals_for_changes+0x5e>
	{
		CANSignal *signal = &device_pid->signals[signal_idx];
 8000aa8:	7dfa      	ldrb	r2, [r7, #23]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	3304      	adds	r3, #4
 8000aba:	613b      	str	r3, [r7, #16]

		// Check the signal change based on its change_type
		switch (signal->change_type)
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	7a1b      	ldrb	r3, [r3, #8]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d115      	bne.n	8000af0 <iterate_signals_for_changes+0x58>
		{
			case STATE_BIT:
				// Compare the signal's "on" state using change_data (bitwise)
				uint32_t signal_data_mask = bytes_to_uint32((uint8_t *)signal->change_data);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	3309      	adds	r3, #9
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fdbf 	bl	800164c <bytes_to_uint32>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
				 * payload          0110
				 *                  ----
				 *                  0010 RESULT  (this means it was on)
				 */
				// Store the result as a uint32_t (0 for false, 1 for true)
				signal->data = (uint32_t)((payload & signal_data_mask) == signal_data_mask);
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4013      	ands	r3, r2
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	611a      	str	r2, [r3, #16]

				break;
 8000aee:	bf00      	nop
	for (uint8_t signal_idx = 0; signal_idx < sizeof(device_pid->signals) / sizeof(device_pid->signals[0]); signal_idx++)
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	3301      	adds	r3, #1
 8000af4:	75fb      	strb	r3, [r7, #23]
 8000af6:	7dfb      	ldrb	r3, [r7, #23]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d9d5      	bls.n	8000aa8 <iterate_signals_for_changes+0x10>
			case STATE_MULTIBYTE:
				// TODO: IMPLEMENT STATE_MULTIBYTE CONDITION
			default:
		}
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <parse_rx_CAN_message>:

void parse_rx_CAN_message(uint32_t RAW_rx_id, uint8_t *RAW_rx_data_as_byte_array)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	// check to see if rx_id is the heartbeat id, if so, don't process it
	if (RAW_rx_id == CAN_ID_HEARTBEAT)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f240 529e 	movw	r2, #1438	@ 0x59e
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d044      	beq.n	8000ba6 <parse_rx_CAN_message+0x9e>
		return;

	// CANDevice placeholder pointer
	CANDeviceConfig *selected_can_device = NULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
	CANDevicePID *selected_pid = NULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]

	// put 8 bytes of rx data into 64 bit variable
	const uint32_t data = bytes_to_uint32(RAW_rx_data_as_byte_array);
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f000 fd91 	bl	800164c <bytes_to_uint32>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	4613      	mov	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
	// Use CANMasks to mask out each part of the data
    const uint8_t  rx_data_length = data & UINT8_LENGTH_MASK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	75fb      	strb	r3, [r7, #23]
    const uint8_t  rx_command     = data & UINT8_COMMAND_MASK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	75bb      	strb	r3, [r7, #22]
    const uint16_t rx_pid         = data & UINT16_PID_MASK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	82bb      	strh	r3, [r7, #20]
    uint32_t rx_payload     = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]

    // if not a RESP_READ 0x62 command in reply, then just exit this function
    if (rx_command != RESP_READ)
 8000b42:	7dbb      	ldrb	r3, [r7, #22]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d130      	bne.n	8000baa <parse_rx_CAN_message+0xa2>
    	return;

    // ensure data length is valid range
    if (!IN_RANGE(rx_data_length, 0, MAX_PAYLOAD_LENGTH))
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d904      	bls.n	8000b58 <parse_rx_CAN_message+0x50>
    {
    	send_Console_Msg("Er data len out of range");
 8000b4e:	4819      	ldr	r0, [pc, #100]	@ (8000bb4 <parse_rx_CAN_message+0xac>)
 8000b50:	f000 fc56 	bl	8001400 <send_Console_Msg>
    	Error_Handler();
 8000b54:	f000 faaa 	bl	80010ac <Error_Handler>
    }

    // copy the length of payload section of data into rx_payload
    memcpy(&rx_payload, ((uint8_t *)&data) + DATA_PAYLOAD_START, rx_data_length);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	7dfa      	ldrb	r2, [r7, #23]
 8000b60:	f107 000c 	add.w	r0, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	f003 fd8f 	bl	8004688 <memcpy>

    // BCM, SCCW, etc. These hold the list of PIDs
    if ((selected_can_device = get_CANDeviceConfig_by_canid(RAW_rx_id)) == NULL)
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff46 	bl	80009fc <get_CANDeviceConfig_by_canid>
 8000b70:	61f8      	str	r0, [r7, #28]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d103      	bne.n	8000b80 <parse_rx_CAN_message+0x78>
    {
    	User_Error_Handler(ERROR_CAN_MODULE_NOT_FOUND);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 f81d 	bl	8000bb8 <User_Error_Handler>
    	return; // just in case
 8000b7e:	e015      	b.n	8000bac <parse_rx_CAN_message+0xa4>
    }

    // Get the PID from the device, example Hazard Button PID struct from BCM
    if ((selected_pid = get_CANDevicePID_by_pid(selected_can_device, rx_pid)) == NULL)
 8000b80:	8abb      	ldrh	r3, [r7, #20]
 8000b82:	4619      	mov	r1, r3
 8000b84:	69f8      	ldr	r0, [r7, #28]
 8000b86:	f7ff ff5d 	bl	8000a44 <get_CANDevicePID_by_pid>
 8000b8a:	61b8      	str	r0, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <parse_rx_CAN_message+0x92>
    {
    	User_Error_Handler(ERROR_MODULE_PID_NOT_FOUND);
 8000b92:	2002      	movs	r0, #2
 8000b94:	f000 f810 	bl	8000bb8 <User_Error_Handler>
    	return; // just in case
 8000b98:	e008      	b.n	8000bac <parse_rx_CAN_message+0xa4>
    }

    // Check the signals of the PID against the rx_payload
    iterate_signals_for_changes(selected_pid, rx_payload);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	69b8      	ldr	r0, [r7, #24]
 8000ba0:	f7ff ff7a 	bl	8000a98 <iterate_signals_for_changes>
 8000ba4:	e002      	b.n	8000bac <parse_rx_CAN_message+0xa4>
		return;
 8000ba6:	bf00      	nop
 8000ba8:	e000      	b.n	8000bac <parse_rx_CAN_message+0xa4>
    	return;
 8000baa:	bf00      	nop
}
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08004f58 	.word	0x08004f58

08000bb8 <User_Error_Handler>:
#include <stdbool.h> // for boolean support in c
#include "error.h"
#include "ui.h"

void User_Error_Handler(uint8_t error_code)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0a4      	sub	sp, #144	@ 0x90
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	const char *error_prefix = "ER#";
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <User_Error_Handler+0xbc>)
 8000bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	char error_msg[MAX_ERROR_STRING_LENGTH];
	char error_msg_final[MAX_ERROR_STRING_LENGTH];
	bool call_main_error_handler = true;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	// clear error_msg buffer
	memset(error_msg, '\0', sizeof(error_msg));
 8000bce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bd2:	223c      	movs	r2, #60	@ 0x3c
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fd06 	bl	80045e8 <memset>
	memset(error_msg_final, '\0', sizeof(error_msg_final));
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	223c      	movs	r2, #60	@ 0x3c
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fcff 	bl	80045e8 <memset>

	switch (error_code)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d00d      	beq.n	8000c0c <User_Error_Handler+0x54>
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	dc17      	bgt.n	8000c24 <User_Error_Handler+0x6c>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d011      	beq.n	8000c1c <User_Error_Handler+0x64>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d113      	bne.n	8000c24 <User_Error_Handler+0x6c>
	{
		case ERROR_CAN_MODULE_NOT_FOUND:
	    	snprintf(error_msg, MAX_ERROR_STRING_LENGTH, "CAN mod not found");
 8000bfc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c00:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <User_Error_Handler+0xc0>)
 8000c02:	213c      	movs	r1, #60	@ 0x3c
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fc9b 	bl	8004540 <sniprintf>
			break;
 8000c0a:	e012      	b.n	8000c32 <User_Error_Handler+0x7a>

		case ERROR_MODULE_PID_NOT_FOUND:
	    	snprintf(error_msg, MAX_ERROR_STRING_LENGTH, "PID not found");
 8000c0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c10:	4a1a      	ldr	r2, [pc, #104]	@ (8000c7c <User_Error_Handler+0xc4>)
 8000c12:	213c      	movs	r1, #60	@ 0x3c
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fc93 	bl	8004540 <sniprintf>
			break;
 8000c1a:	e00a      	b.n	8000c32 <User_Error_Handler+0x7a>

		case ERROR_NO_ERROR:
			call_main_error_handler = false;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			break;
 8000c22:	e006      	b.n	8000c32 <User_Error_Handler+0x7a>

		default:
			snprintf(error_msg, MAX_ERROR_STRING_LENGTH, "Unknown Err#");
 8000c24:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c28:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <User_Error_Handler+0xc8>)
 8000c2a:	213c      	movs	r1, #60	@ 0x3c
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fc87 	bl	8004540 <sniprintf>
	}

	// print the error string if not empty
	if (strlen(error_msg) != 0)
 8000c32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d011      	beq.n	8000c60 <User_Error_Handler+0xa8>
	{
		snprintf(error_msg_final, MAX_ERROR_STRING_LENGTH, "%s#%u %s", error_prefix, (uint8_t)error_code, error_msg);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f107 0008 	add.w	r0, r7, #8
 8000c42:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <User_Error_Handler+0xcc>)
 8000c50:	213c      	movs	r1, #60	@ 0x3c
 8000c52:	f003 fc75 	bl	8004540 <sniprintf>
		send_Console_Msg(error_msg_final);
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fbd0 	bl	8001400 <send_Console_Msg>
	}

	// This will halt operation
	if (call_main_error_handler)
 8000c60:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <User_Error_Handler+0xb4>
		Error_Handler();
 8000c68:	f000 fa20 	bl	80010ac <Error_Handler>
}
 8000c6c:	bf00      	nop
 8000c6e:	3788      	adds	r7, #136	@ 0x88
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08005448 	.word	0x08005448
 8000c78:	0800544c 	.word	0x0800544c
 8000c7c:	08005460 	.word	0x08005460
 8000c80:	08005470 	.word	0x08005470
 8000c84:	08005480 	.word	0x08005480

08000c88 <HAL_CAN_RxFifo0MsgPendingCallback>:
/*
 * FUNCTIONS
 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0c4      	sub	sp, #272	@ 0x110
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c96:	6018      	str	r0, [r3, #0]
	//send_Console_Msg("Rx INT");
    // Ensure this is the correct CAN instance
    if (hcan->Instance != CAN1)
 8000c98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8000d58 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d151      	bne.n	8000d4e <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
    {
        return;
    }
    // Retrieve the message from FIFO0
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader[CAN_TRUCK], RxData[CAN_TRUCK]) != HAL_OK)
 8000caa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cae:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	6800      	ldr	r0, [r0, #0]
 8000cba:	f001 fb1d 	bl	80022f8 <HAL_CAN_GetRxMessage>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
    {
        send_Console_Msg("RX:ERR CAN_GetRxMessage");
 8000cc4:	4827      	ldr	r0, [pc, #156]	@ (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000cc6:	f000 fb9b 	bl	8001400 <send_Console_Msg>
    	// Log or handle error if message retrieval fails
        return;
 8000cca:	e041      	b.n	8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
    }
    // Increment the receive counter
    rx_count[CAN_TRUCK]++;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	4a25      	ldr	r2, [pc, #148]	@ (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cd4:	6013      	str	r3, [r2, #0]
    // Format the received message for display
    char received_msg[255];
    int offset = snprintf(received_msg, sizeof(received_msg), "Rx %X/", (unsigned int)RxHeader[CAN_TRUCK].StdId);
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f107 0008 	add.w	r0, r7, #8
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000ce0:	21ff      	movs	r1, #255	@ 0xff
 8000ce2:	f003 fc2d 	bl	8004540 <sniprintf>
 8000ce6:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    for (int i = 0; i < RxHeader[CAN_TRUCK].DLC; i++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000cf0:	e01b      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
    {
        offset += snprintf(&received_msg[offset], sizeof(received_msg) - offset, "%02X", RxData[CAN_TRUCK][i]);
 8000cf2:	f107 0208 	add.w	r2, r7, #8
 8000cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cfa:	18d0      	adds	r0, r2, r3
 8000cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d00:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 8000d04:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000d06:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4a18      	ldr	r2, [pc, #96]	@ (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000d10:	f003 fc16 	bl	8004540 <sniprintf>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d1a:	4413      	add	r3, r2
 8000d1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for (int i = 0; i < RxHeader[CAN_TRUCK].DLC; i++)
 8000d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000d24:	3301      	adds	r3, #1
 8000d26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d8dd      	bhi.n	8000cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
    }
    // Display the received message
    send_Console_Msg(received_msg);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fb60 	bl	8001400 <send_Console_Msg>
    // Process the message to update the state

    parse_rx_CAN_message(RxHeader[CAN_TRUCK].StdId, RxData[CAN_TRUCK]);
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4905      	ldr	r1, [pc, #20]	@ (8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fede 	bl	8000b08 <parse_rx_CAN_message>
 8000d4c:	e000      	b.n	8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
        return;
 8000d4e:	bf00      	nop
}
 8000d50:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40006400 	.word	0x40006400
 8000d5c:	200003a8 	.word	0x200003a8
 8000d60:	20000368 	.word	0x20000368
 8000d64:	0800548c 	.word	0x0800548c
 8000d68:	200003d0 	.word	0x200003d0
 8000d6c:	080054a4 	.word	0x080054a4
 8000d70:	080054ac 	.word	0x080054ac

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f000 ff37 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f84b 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f000 f943 	bl	800100c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d86:	f000 f8b9 	bl	8000efc <MX_CAN1_Init>
  MX_I2C1_Init();
 8000d8a:	f000 f911 	bl	8000fb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init(); // init OLED screen
 8000d8e:	f000 fce1 	bl	8001754 <ssd1306_Init>
  init_OLED_Data(); // zero all string data
 8000d92:	f000 faef 	bl	8001374 <init_OLED_Data>

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000d96:	481b      	ldr	r0, [pc, #108]	@ (8000e04 <main+0x90>)
 8000d98:	f001 f99a 	bl	80020d0 <HAL_CAN_Start>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00b      	beq.n	8000dba <main+0x46>
  {
	  send_Console_Msg("Err Init TRUCK CAN");
 8000da2:	4819      	ldr	r0, [pc, #100]	@ (8000e08 <main+0x94>)
 8000da4:	f000 fb2c 	bl	8001400 <send_Console_Msg>
	  ssd1306_SetCursor(0, 8);  // Move down by the font height
 8000da8:	2108      	movs	r1, #8
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 fe86 	bl	8001abc <ssd1306_SetCursor>
	  send_Console_Msg("Terminating.");
 8000db0:	4816      	ldr	r0, [pc, #88]	@ (8000e0c <main+0x98>)
 8000db2:	f000 fb25 	bl	8001400 <send_Console_Msg>
	  Error_Handler();
 8000db6:	f000 f979 	bl	80010ac <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <main+0x90>)
 8000dbe:	f001 fbbd 	bl	800253c <HAL_CAN_ActivateNotification>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00b      	beq.n	8000de0 <main+0x6c>
  {
	  send_Console_Msg("Err Init TRUCK Rx");
 8000dc8:	4811      	ldr	r0, [pc, #68]	@ (8000e10 <main+0x9c>)
 8000dca:	f000 fb19 	bl	8001400 <send_Console_Msg>
	  ssd1306_SetCursor(0, 8);  // Move down by the font height
 8000dce:	2108      	movs	r1, #8
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 fe73 	bl	8001abc <ssd1306_SetCursor>
	  send_Console_Msg("Terminating.");
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <main+0x98>)
 8000dd8:	f000 fb12 	bl	8001400 <send_Console_Msg>
	  Error_Handler();
 8000ddc:	f000 f966 	bl	80010ac <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      draw_screen_data_states(CAN_TRUCK);  // Update the screen with state information
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 fb81 	bl	80014e8 <draw_screen_data_states>

      // Check if 2 seconds have passed since the last CAN request
      uint32_t current_time = HAL_GetTick();  // Get the current system tick in milliseconds
 8000de6:	f000 ff67 	bl	8001cb8 <HAL_GetTick>
 8000dea:	6078      	str	r0, [r7, #4]
      if ((current_time - last_can_request_time) >= CAN_REQUEST_INTERVAL)
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <main+0xa0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b31      	cmp	r3, #49	@ 0x31
 8000df6:	d9f3      	bls.n	8000de0 <main+0x6c>
      {
    	  send_all_can_requests();
 8000df8:	f7ff fdce 	bl	8000998 <send_all_can_requests>
          last_can_request_time = current_time;  // Update the last request time
 8000dfc:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <main+0xa0>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
 8000e02:	e7ed      	b.n	8000de0 <main+0x6c>
 8000e04:	200002bc 	.word	0x200002bc
 8000e08:	080054b4 	.word	0x080054b4
 8000e0c:	080054c8 	.word	0x080054c8
 8000e10:	080054d8 	.word	0x080054d8
 8000e14:	2000052c 	.word	0x2000052c

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	@ 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2234      	movs	r2, #52	@ 0x34
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fbde 	bl	80045e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <SystemClock_Config+0xdc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef4 <SystemClock_Config+0xdc>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <SystemClock_Config+0xdc>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <SystemClock_Config+0xe0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a25      	ldr	r2, [pc, #148]	@ (8000ef8 <SystemClock_Config+0xe0>)
 8000e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <SystemClock_Config+0xe0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e8c:	23b4      	movs	r3, #180	@ 0xb4
 8000e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 f8af 	bl	8004004 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eac:	f000 f8fe 	bl	80010ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eb0:	f002 fd22 	bl	80038f8 <HAL_PWREx_EnableOverDrive>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000eba:	f000 f8f7 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2105      	movs	r1, #5
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fd5b 	bl	8003998 <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ee8:	f000 f8e0 	bl	80010ac <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3750      	adds	r7, #80	@ 0x50
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f04:	4a28      	ldr	r2, [pc, #160]	@ (8000fa8 <MX_CAN1_Init+0xac>)
 8000f06:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000f08:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f0a:	2212      	movs	r2, #18
 8000f0c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f14:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f20:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f24:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f28:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f4e:	4815      	ldr	r0, [pc, #84]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f50:	f000 fee2 	bl	8001d18 <HAL_CAN_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f5a:	f000 f8a7 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0;                       // Use filter bank 0
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;   // Use mask mode
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // Use 32-bit filter
 8000f66:	2301      	movs	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;                // Set ID high to 0 (don't filter on specific IDs)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;                 // No extended ID bits
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;            // Mask set to 0 (allows all IDs to pass)
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;             // No extended mask bits
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // Assign to FIFO 0
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;            // Enable the filter
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <MX_CAN1_Init+0xa8>)
 8000f88:	f000 ffc2 	bl	8001f10 <HAL_CAN_ConfigFilter>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <MX_CAN1_Init+0xa0>
      send_Console_Msg("Er: Applying filter");
 8000f92:	4806      	ldr	r0, [pc, #24]	@ (8000fac <MX_CAN1_Init+0xb0>)
 8000f94:	f000 fa34 	bl	8001400 <send_Console_Msg>
      Error_Handler();
 8000f98:	f000 f888 	bl	80010ac <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200002bc 	.word	0x200002bc
 8000fa8:	40006400 	.word	0x40006400
 8000fac:	080054ec 	.word	0x080054ec

08000fb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fb6:	4a13      	ldr	r2, [pc, #76]	@ (8001004 <MX_I2C1_Init+0x54>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fbc:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <MX_I2C1_Init+0x58>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fee:	f001 ffd5 	bl	8002f9c <HAL_I2C_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff8:	f000 f858 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200002e4 	.word	0x200002e4
 8001004:	40005400 	.word	0x40005400
 8001008:	000186a0 	.word	0x000186a0

0800100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_GPIO_Init+0x98>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a1e      	ldr	r2, [pc, #120]	@ (80010a4 <MX_GPIO_Init+0x98>)
 800102c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_GPIO_Init+0x98>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_GPIO_Init+0x98>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <MX_GPIO_Init+0x98>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_GPIO_Init+0x98>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_GPIO_Init+0x98>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <MX_GPIO_Init+0x98>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_GPIO_Init+0x98>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2120      	movs	r1, #32
 800107a:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <MX_GPIO_Init+0x9c>)
 800107c:	f001 ff5a 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001080:	2320      	movs	r3, #32
 8001082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_GPIO_Init+0x9c>)
 8001098:	f001 fdb8 	bl	8002c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Adjust pin as needed
 80010b4:	2120      	movs	r1, #32
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <Error_Handler+0x1c>)
 80010b8:	f001 ff55 	bl	8002f66 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);  // Blink with a 500ms delay
 80010bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c0:	f000 fe06 	bl	8001cd0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Adjust pin as needed
 80010c4:	bf00      	nop
 80010c6:	e7f5      	b.n	80010b4 <Error_Handler+0x8>
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	@ (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <HAL_CAN_MspInit+0xa4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d13c      	bne.n	80011b8 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_CAN_MspInit+0xa8>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <HAL_CAN_MspInit+0xa8>)
 8001148:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800114c:	6413      	str	r3, [r2, #64]	@ 0x40
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <HAL_CAN_MspInit+0xa8>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_CAN_MspInit+0xa8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <HAL_CAN_MspInit+0xa8>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <HAL_CAN_MspInit+0xa8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001176:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001188:	2309      	movs	r3, #9
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <HAL_CAN_MspInit+0xac>)
 8001194:	f001 fd3a 	bl	8002c0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2013      	movs	r0, #19
 800119e:	f001 fcfe 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011a2:	2013      	movs	r0, #19
 80011a4:	f001 fd17 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2014      	movs	r0, #20
 80011ae:	f001 fcf6 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011b2:	2014      	movs	r0, #20
 80011b4:	f001 fd0f 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40006400 	.word	0x40006400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000

080011cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <HAL_I2C_MspInit+0x84>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12c      	bne.n	8001248 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_I2C_MspInit+0x88>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <HAL_I2C_MspInit+0x88>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_I2C_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800120a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121c:	2304      	movs	r3, #4
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	480c      	ldr	r0, [pc, #48]	@ (8001258 <HAL_I2C_MspInit+0x8c>)
 8001228:	f001 fcf0 	bl	8002c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_I2C_MspInit+0x88>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <HAL_I2C_MspInit+0x88>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	6413      	str	r3, [r2, #64]	@ 0x40
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_I2C_MspInit+0x88>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40005400 	.word	0x40005400
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b2:	f000 fced 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <CAN1_TX_IRQHandler+0x10>)
 80012c2:	f001 f961 	bl	8002588 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002bc 	.word	0x200002bc

080012d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <CAN1_RX0_IRQHandler+0x10>)
 80012d6:	f001 f957 	bl	8002588 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002bc 	.word	0x200002bc

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f003 f984 	bl	8004620 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20020000 	.word	0x20020000
 8001344:	00000400 	.word	0x00000400
 8001348:	20000530 	.word	0x20000530
 800134c:	20000a88 	.word	0x20000a88

08001350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <init_OLED_Data>:
#include "ui.h"
#include "ssd1306_fonts.h"
#include "utils.h"

void init_OLED_Data()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	screen_line = 0;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <init_OLED_Data+0x24>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
	memset(screen_data, 0, sizeof(screen_data));
 800137e:	22a8      	movs	r2, #168	@ 0xa8
 8001380:	2100      	movs	r1, #0
 8001382:	4806      	ldr	r0, [pc, #24]	@ (800139c <init_OLED_Data+0x28>)
 8001384:	f003 f930 	bl	80045e8 <memset>
	memset(screen_data_states, 0, sizeof(screen_data_states));
 8001388:	22a8      	movs	r2, #168	@ 0xa8
 800138a:	2100      	movs	r1, #0
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <init_OLED_Data+0x2c>)
 800138e:	f003 f92b 	bl	80045e8 <memset>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000528 	.word	0x20000528
 800139c:	200003d8 	.word	0x200003d8
 80013a0:	20000480 	.word	0x20000480

080013a4 <scroll_messages>:

void scroll_messages() {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
    // Shift all message lines up by one
    for (int i = 0; i < MESSAGE_LINES - 1; i++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	e017      	b.n	80013e0 <scroll_messages+0x3c>
        strcpy(screen_data[STATE_LINES + i], screen_data[STATE_LINES + i + 1]);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	00da      	lsls	r2, r3, #3
 80013bc:	1ad2      	subs	r2, r2, r3
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <scroll_messages+0x54>)
 80013c0:	18d0      	adds	r0, r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	1d5a      	adds	r2, r3, #5
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	00da      	lsls	r2, r3, #3
 80013ce:	1ad2      	subs	r2, r2, r3
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <scroll_messages+0x54>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f003 f94f 	bl	8004678 <strcpy>
    for (int i = 0; i < MESSAGE_LINES - 1; i++) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	dde4      	ble.n	80013b0 <scroll_messages+0xc>
    }
    // Clear the last line
    memset(screen_data[SCREEN_MAX_CHAR_LINES - 1], 0, sizeof(screen_data[SCREEN_MAX_CHAR_LINES - 1]));
 80013e6:	2215      	movs	r2, #21
 80013e8:	2100      	movs	r1, #0
 80013ea:	4804      	ldr	r0, [pc, #16]	@ (80013fc <scroll_messages+0x58>)
 80013ec:	f003 f8fc 	bl	80045e8 <memset>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200003d8 	.word	0x200003d8
 80013fc:	2000046b 	.word	0x2000046b

08001400 <send_Console_Msg>:


void send_Console_Msg(char *msg) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    // Scroll if all message lines are filled
    if (screen_line >= MESSAGE_LINES) {
 8001408:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <send_Console_Msg+0x70>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d904      	bls.n	800141a <send_Console_Msg+0x1a>
        scroll_messages();
 8001410:	f7ff ffc8 	bl	80013a4 <scroll_messages>
        screen_line = MESSAGE_LINES - 1; // Keep screen_line within MESSAGE_LINES
 8001414:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <send_Console_Msg+0x70>)
 8001416:	2203      	movs	r2, #3
 8001418:	701a      	strb	r2, [r3, #0]
    }

    // Copy the message to the appropriate line in screen_data
    strncpy(screen_data[STATE_LINES + screen_line], msg, sizeof(screen_data[0]) - 1);
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <send_Console_Msg+0x70>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	1d1a      	adds	r2, r3, #4
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	00da      	lsls	r2, r3, #3
 8001428:	1ad2      	subs	r2, r2, r3
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <send_Console_Msg+0x74>)
 800142c:	4413      	add	r3, r2
 800142e:	2214      	movs	r2, #20
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 f8e0 	bl	80045f8 <strncpy>
    screen_data[STATE_LINES + screen_line][sizeof(screen_data[0]) - 1] = '\0'; // Ensure null-termination
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <send_Console_Msg+0x70>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	1d1a      	adds	r2, r3, #4
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <send_Console_Msg+0x74>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	00da      	lsls	r2, r3, #3
 8001448:	1ad2      	subs	r2, r2, r3
 800144a:	188b      	adds	r3, r1, r2
 800144c:	3314      	adds	r3, #20
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

    // Update the screen with both states and messages
    draw_screen_data_states(CAN_TRUCK);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f848 	bl	80014e8 <draw_screen_data_states>
    display_messages();
 8001458:	f000 f80e 	bl	8001478 <display_messages>

    // Move to the next line for future messages
    screen_line++;
 800145c:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <send_Console_Msg+0x70>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <send_Console_Msg+0x70>)
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000528 	.word	0x20000528
 8001474:	200003d8 	.word	0x200003d8

08001478 <display_messages>:

void display_messages() {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
    // Clear the entire bottom section where messages are displayed
    ssd1306_FillRectangle(0, STATE_LINES * SCREEN_FONT_HEIGHT, SSD1306_WIDTH, SSD1306_HEIGHT, Black);
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2340      	movs	r3, #64	@ 0x40
 8001484:	2280      	movs	r2, #128	@ 0x80
 8001486:	2120      	movs	r1, #32
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fb2f 	bl	8001aec <ssd1306_FillRectangle>

    // Start from the line after the state info and print messages
    for (uint8_t i = 0; i < MESSAGE_LINES; i++) {
 800148e:	2300      	movs	r3, #0
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	e01b      	b.n	80014cc <display_messages+0x54>
        uint8_t y_pos = (STATE_LINES + i) * SCREEN_FONT_HEIGHT;
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	3304      	adds	r3, #4
 8001498:	b2db      	uxtb	r3, r3
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	71bb      	strb	r3, [r7, #6]
        ssd1306_SetCursor(0, y_pos);
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	4619      	mov	r1, r3
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 fb0a 	bl	8001abc <ssd1306_SetCursor>
        ssd1306_WriteString(screen_data[STATE_LINES + i], Font_6x8, White);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	1d1a      	adds	r2, r3, #4
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00da      	lsls	r2, r3, #3
 80014b4:	1ad2      	subs	r2, r2, r3
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <display_messages+0x68>)
 80014b8:	18d0      	adds	r0, r2, r3
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <display_messages+0x6c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	f000 fad5 	bl	8001a70 <ssd1306_WriteString>
    for (uint8_t i = 0; i < MESSAGE_LINES; i++) {
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3301      	adds	r3, #1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d9e0      	bls.n	8001494 <display_messages+0x1c>
    }

    ssd1306_UpdateScreen();  // Update the screen to reflect changes
 80014d2:	f000 f9c1 	bl	8001858 <ssd1306_UpdateScreen>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200003d8 	.word	0x200003d8
 80014e4:	08005b38 	.word	0x08005b38

080014e8 <draw_screen_data_states>:

void draw_screen_data_states(CANInstance can_instance) {
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b08d      	sub	sp, #52	@ 0x34
 80014ec:	af06      	add	r7, sp, #24
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
    // Clear the screen area for the state display
    ssd1306_FillRectangle(0, 0, SSD1306_WIDTH, STATE_LINES * SCREEN_FONT_HEIGHT, Black);
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2320      	movs	r3, #32
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 faf5 	bl	8001aec <ssd1306_FillRectangle>

    // Display BCM states (Brake Pedal, Reverse Light, Hazard Button)
    snprintf(screen_data_states[0], sizeof(screen_data_states[0]),
 8001502:	4b46      	ldr	r3, [pc, #280]	@ (800161c <draw_screen_data_states+0x134>)
 8001504:	685e      	ldr	r6, [r3, #4]
 8001506:	4b45      	ldr	r3, [pc, #276]	@ (800161c <draw_screen_data_states+0x134>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f8b0 	bl	8001670 <tobinary>
 8001510:	60b8      	str	r0, [r7, #8]
 8001512:	4b42      	ldr	r3, [pc, #264]	@ (800161c <draw_screen_data_states+0x134>)
 8001514:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <draw_screen_data_states+0x134>)
 8001518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f8a8 	bl	8001670 <tobinary>
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <draw_screen_data_states+0x134>)
 8001524:	f8d3 50bc 	ldr.w	r5, [r3, #188]	@ 0xbc
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <draw_screen_data_states+0x134>)
 800152a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f89e 	bl	8001670 <tobinary>
 8001534:	4603      	mov	r3, r0
 8001536:	9304      	str	r3, [sp, #16]
 8001538:	9503      	str	r5, [sp, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	9401      	str	r4, [sp, #4]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4633      	mov	r3, r6
 8001546:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <draw_screen_data_states+0x138>)
 8001548:	2115      	movs	r1, #21
 800154a:	4836      	ldr	r0, [pc, #216]	@ (8001624 <draw_screen_data_states+0x13c>)
 800154c:	f002 fff8 	bl	8004540 <sniprintf>
             bcm_pids[BCM_BRAKE_PEDAL].short_name, tobinary(bcm_pids[BCM_BRAKE_PEDAL].signals[0].data),
             bcm_pids[BCM_REVERSE_LIGHT].short_name, tobinary(bcm_pids[BCM_REVERSE_LIGHT].signals[0].data),
             bcm_pids[BCM_HAZARD_BUTTON].short_name, tobinary(bcm_pids[BCM_HAZARD_BUTTON].signals[0].data));

    // Display SCCM left-side signals (Left Turn Signal, Left Lane Change)
    snprintf(screen_data_states[1], sizeof(screen_data_states[1]),
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <draw_screen_data_states+0x140>)
 8001552:	691d      	ldr	r5, [r3, #16]
 8001554:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <draw_screen_data_states+0x140>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f889 	bl	8001670 <tobinary>
 800155e:	4606      	mov	r6, r0
 8001560:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <draw_screen_data_states+0x140>)
 8001562:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <draw_screen_data_states+0x140>)
 8001566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f881 	bl	8001670 <tobinary>
 800156e:	4603      	mov	r3, r0
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	9401      	str	r4, [sp, #4]
 8001574:	9600      	str	r6, [sp, #0]
 8001576:	462b      	mov	r3, r5
 8001578:	4a2c      	ldr	r2, [pc, #176]	@ (800162c <draw_screen_data_states+0x144>)
 800157a:	2115      	movs	r1, #21
 800157c:	482c      	ldr	r0, [pc, #176]	@ (8001630 <draw_screen_data_states+0x148>)
 800157e:	f002 ffdf 	bl	8004540 <sniprintf>
             "%s:%d %s:%d",
             sccm_pids[0].signals[SCCM_LEFT_TURN].short_name, tobinary(sccm_pids[0].signals[SCCM_LEFT_TURN].data),
             sccm_pids[0].signals[SCCM_LEFT_CHANGE].short_name, tobinary(sccm_pids[0].signals[SCCM_LEFT_CHANGE].data));

    // Display SCCM right-side signals (Right Turn Signal, Right Lane Change)
    snprintf(screen_data_states[2], sizeof(screen_data_states[2]),
 8001582:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <draw_screen_data_states+0x140>)
 8001584:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8001586:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <draw_screen_data_states+0x140>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f870 	bl	8001670 <tobinary>
 8001590:	4606      	mov	r6, r0
 8001592:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <draw_screen_data_states+0x140>)
 8001594:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <draw_screen_data_states+0x140>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f868 	bl	8001670 <tobinary>
 80015a0:	4603      	mov	r3, r0
 80015a2:	9302      	str	r3, [sp, #8]
 80015a4:	9401      	str	r4, [sp, #4]
 80015a6:	9600      	str	r6, [sp, #0]
 80015a8:	462b      	mov	r3, r5
 80015aa:	4a20      	ldr	r2, [pc, #128]	@ (800162c <draw_screen_data_states+0x144>)
 80015ac:	2115      	movs	r1, #21
 80015ae:	4821      	ldr	r0, [pc, #132]	@ (8001634 <draw_screen_data_states+0x14c>)
 80015b0:	f002 ffc6 	bl	8004540 <sniprintf>
             "%s:%d %s:%d",
             sccm_pids[0].signals[SCCM_RIGHT_TURN].short_name, tobinary(sccm_pids[0].signals[SCCM_RIGHT_TURN].data),
             sccm_pids[0].signals[SCCM_RIGHT_CHANGE].short_name, tobinary(sccm_pids[0].signals[SCCM_RIGHT_CHANGE].data));

    // Display transmission and reception counts
    snprintf(screen_data_states[3], sizeof(screen_data_states[3]), "Tx:%lu Rx:%lu",
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
             (unsigned long)tx_count[can_instance], (unsigned long)rx_count[can_instance]);
 80015b6:	4a20      	ldr	r2, [pc, #128]	@ (8001638 <draw_screen_data_states+0x150>)
 80015b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    snprintf(screen_data_states[3], sizeof(screen_data_states[3]), "Tx:%lu Rx:%lu",
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
             (unsigned long)tx_count[can_instance], (unsigned long)rx_count[can_instance]);
 80015be:	491f      	ldr	r1, [pc, #124]	@ (800163c <draw_screen_data_states+0x154>)
 80015c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    snprintf(screen_data_states[3], sizeof(screen_data_states[3]), "Tx:%lu Rx:%lu",
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4613      	mov	r3, r2
 80015c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001640 <draw_screen_data_states+0x158>)
 80015ca:	2115      	movs	r1, #21
 80015cc:	481d      	ldr	r0, [pc, #116]	@ (8001644 <draw_screen_data_states+0x15c>)
 80015ce:	f002 ffb7 	bl	8004540 <sniprintf>

    // Write each line to the screen
    for (uint8_t i = 0; i < STATE_LINES; i++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
 80015d6:	e017      	b.n	8001608 <draw_screen_data_states+0x120>
        ssd1306_SetCursor(0, i * SCREEN_FONT_HEIGHT);
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 fa6b 	bl	8001abc <ssd1306_SetCursor>
        ssd1306_WriteString(screen_data_states[i], Font_6x8, White);
 80015e6:	7dfa      	ldrb	r2, [r7, #23]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	00da      	lsls	r2, r3, #3
 80015f0:	1ad2      	subs	r2, r2, r3
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <draw_screen_data_states+0x13c>)
 80015f4:	18d0      	adds	r0, r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <draw_screen_data_states+0x160>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	9200      	str	r2, [sp, #0]
 80015fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fe:	f000 fa37 	bl	8001a70 <ssd1306_WriteString>
    for (uint8_t i = 0; i < STATE_LINES; i++) {
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	3301      	adds	r3, #1
 8001606:	75fb      	strb	r3, [r7, #23]
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d9e4      	bls.n	80015d8 <draw_screen_data_states+0xf0>
    }

    // Update the screen to display changes
    ssd1306_UpdateScreen();
 800160e:	f000 f923 	bl	8001858 <ssd1306_UpdateScreen>
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161a:	bf00      	nop
 800161c:	20000000 	.word	0x20000000
 8001620:	08005500 	.word	0x08005500
 8001624:	20000480 	.word	0x20000480
 8001628:	20000114 	.word	0x20000114
 800162c:	08005514 	.word	0x08005514
 8001630:	20000495 	.word	0x20000495
 8001634:	200004aa 	.word	0x200004aa
 8001638:	200003c8 	.word	0x200003c8
 800163c:	200003d0 	.word	0x200003d0
 8001640:	08005520 	.word	0x08005520
 8001644:	200004bf 	.word	0x200004bf
 8001648:	08005b38 	.word	0x08005b38

0800164c <bytes_to_uint32>:

#include <stdint.h>
#include <stdio.h>

uint64_t bytes_to_uint32(uint8_t *bytes)
{
 800164c:	b4b0      	push	{r4, r5, r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    return __builtin_bswap32(*(uint32_t *)bytes);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	ba1b      	rev	r3, r3
 800165a:	2200      	movs	r2, #0
 800165c:	461c      	mov	r4, r3
 800165e:	4615      	mov	r5, r2
 8001660:	4622      	mov	r2, r4
 8001662:	462b      	mov	r3, r5
}
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bcb0      	pop	{r4, r5, r7}
 800166e:	4770      	bx	lr

08001670 <tobinary>:
uint16_t bytes_to_uint16(uint8_t high_byte, uint8_t low_byte) {
    return ((uint16_t)high_byte << 8) | (uint16_t)low_byte;
}

int tobinary(uint32_t i)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if (i > 0)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <tobinary+0x12>
		return 1;
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <tobinary+0x14>
	return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001694:	f7ff fe5c 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	@ (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016be:	f002 ffb5 	bl	800462c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fb57 	bl	8000d74 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 80016d4:	08005b88 	.word	0x08005b88
  ldr r2, =_sbss
 80016d8:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80016dc:	20000a88 	.word	0x20000a88

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>

080016e2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2301      	movs	r3, #1
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	2200      	movs	r2, #0
 800170c:	2178      	movs	r1, #120	@ 0x78
 800170e:	4803      	ldr	r0, [pc, #12]	@ (800171c <ssd1306_WriteCommand+0x2c>)
 8001710:	f001 fd88 	bl	8003224 <HAL_I2C_Mem_Write>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002e4 	.word	0x200002e4

08001720 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af04      	add	r7, sp, #16
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	f04f 32ff 	mov.w	r2, #4294967295
 8001732:	9202      	str	r2, [sp, #8]
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	2240      	movs	r2, #64	@ 0x40
 800173e:	2178      	movs	r1, #120	@ 0x78
 8001740:	4803      	ldr	r0, [pc, #12]	@ (8001750 <ssd1306_WriteData+0x30>)
 8001742:	f001 fd6f 	bl	8003224 <HAL_I2C_Mem_Write>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002e4 	.word	0x200002e4

08001754 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001758:	f7ff ffc3 	bl	80016e2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800175c:	2064      	movs	r0, #100	@ 0x64
 800175e:	f000 fab7 	bl	8001cd0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001762:	2000      	movs	r0, #0
 8001764:	f000 fa24 	bl	8001bb0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001768:	2020      	movs	r0, #32
 800176a:	f7ff ffc1 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff ffbe 	bl	80016f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001774:	20b0      	movs	r0, #176	@ 0xb0
 8001776:	f7ff ffbb 	bl	80016f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800177a:	20c8      	movs	r0, #200	@ 0xc8
 800177c:	f7ff ffb8 	bl	80016f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ffb5 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001786:	2010      	movs	r0, #16
 8001788:	f7ff ffb2 	bl	80016f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800178c:	2040      	movs	r0, #64	@ 0x40
 800178e:	f7ff ffaf 	bl	80016f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001792:	20ff      	movs	r0, #255	@ 0xff
 8001794:	f000 f9f8 	bl	8001b88 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001798:	20a1      	movs	r0, #161	@ 0xa1
 800179a:	f7ff ffa9 	bl	80016f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800179e:	20a6      	movs	r0, #166	@ 0xa6
 80017a0:	f7ff ffa6 	bl	80016f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017a4:	20a8      	movs	r0, #168	@ 0xa8
 80017a6:	f7ff ffa3 	bl	80016f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80017aa:	203f      	movs	r0, #63	@ 0x3f
 80017ac:	f7ff ffa0 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017b0:	20a4      	movs	r0, #164	@ 0xa4
 80017b2:	f7ff ff9d 	bl	80016f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017b6:	20d3      	movs	r0, #211	@ 0xd3
 80017b8:	f7ff ff9a 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ff97 	bl	80016f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017c2:	20d5      	movs	r0, #213	@ 0xd5
 80017c4:	f7ff ff94 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017c8:	20f0      	movs	r0, #240	@ 0xf0
 80017ca:	f7ff ff91 	bl	80016f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017ce:	20d9      	movs	r0, #217	@ 0xd9
 80017d0:	f7ff ff8e 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017d4:	2022      	movs	r0, #34	@ 0x22
 80017d6:	f7ff ff8b 	bl	80016f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017da:	20da      	movs	r0, #218	@ 0xda
 80017dc:	f7ff ff88 	bl	80016f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80017e0:	2012      	movs	r0, #18
 80017e2:	f7ff ff85 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017e6:	20db      	movs	r0, #219	@ 0xdb
 80017e8:	f7ff ff82 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017ec:	2020      	movs	r0, #32
 80017ee:	f7ff ff7f 	bl	80016f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017f2:	208d      	movs	r0, #141	@ 0x8d
 80017f4:	f7ff ff7c 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017f8:	2014      	movs	r0, #20
 80017fa:	f7ff ff79 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 f9d6 	bl	8001bb0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f80f 	bl	8001828 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800180a:	f000 f825 	bl	8001858 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800180e:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <ssd1306_Init+0xd0>)
 8001810:	2200      	movs	r2, #0
 8001812:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <ssd1306_Init+0xd0>)
 8001816:	2200      	movs	r2, #0
 8001818:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800181a:	4b02      	ldr	r3, [pc, #8]	@ (8001824 <ssd1306_Init+0xd0>)
 800181c:	2201      	movs	r2, #1
 800181e:	711a      	strb	r2, [r3, #4]
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000934 	.word	0x20000934

08001828 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <ssd1306_Fill+0x14>
 8001838:	2300      	movs	r3, #0
 800183a:	e000      	b.n	800183e <ssd1306_Fill+0x16>
 800183c:	23ff      	movs	r3, #255	@ 0xff
 800183e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001842:	4619      	mov	r1, r3
 8001844:	4803      	ldr	r0, [pc, #12]	@ (8001854 <ssd1306_Fill+0x2c>)
 8001846:	f002 fecf 	bl	80045e8 <memset>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000534 	.word	0x20000534

08001858 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	e016      	b.n	8001892 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	3b50      	subs	r3, #80	@ 0x50
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff40 	bl	80016f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff ff3d 	bl	80016f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001876:	2010      	movs	r0, #16
 8001878:	f7ff ff3a 	bl	80016f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	01db      	lsls	r3, r3, #7
 8001880:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <ssd1306_UpdateScreen+0x4c>)
 8001882:	4413      	add	r3, r2
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff4a 	bl	8001720 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3301      	adds	r3, #1
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b07      	cmp	r3, #7
 8001896:	d9e5      	bls.n	8001864 <ssd1306_UpdateScreen+0xc>
    }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000534 	.word	0x20000534

080018a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	460b      	mov	r3, r1
 80018b4:	71bb      	strb	r3, [r7, #6]
 80018b6:	4613      	mov	r3, r2
 80018b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db3d      	blt.n	800193e <ssd1306_DrawPixel+0x96>
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80018c6:	d83a      	bhi.n	800193e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80018c8:	797b      	ldrb	r3, [r7, #5]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d11a      	bne.n	8001904 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	08db      	lsrs	r3, r3, #3
 80018d4:	b2d8      	uxtb	r0, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	4413      	add	r3, r2
 80018dc:	4a1b      	ldr	r2, [pc, #108]	@ (800194c <ssd1306_DrawPixel+0xa4>)
 80018de:	5cd3      	ldrb	r3, [r2, r3]
 80018e0:	b25a      	sxtb	r2, r3
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b259      	sxtb	r1, r3
 80018f4:	79fa      	ldrb	r2, [r7, #7]
 80018f6:	4603      	mov	r3, r0
 80018f8:	01db      	lsls	r3, r3, #7
 80018fa:	4413      	add	r3, r2
 80018fc:	b2c9      	uxtb	r1, r1
 80018fe:	4a13      	ldr	r2, [pc, #76]	@ (800194c <ssd1306_DrawPixel+0xa4>)
 8001900:	54d1      	strb	r1, [r2, r3]
 8001902:	e01d      	b.n	8001940 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	b2d8      	uxtb	r0, r3
 800190c:	4603      	mov	r3, r0
 800190e:	01db      	lsls	r3, r3, #7
 8001910:	4413      	add	r3, r2
 8001912:	4a0e      	ldr	r2, [pc, #56]	@ (800194c <ssd1306_DrawPixel+0xa4>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	b25a      	sxtb	r2, r3
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	b25b      	sxtb	r3, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	b25b      	sxtb	r3, r3
 800192a:	4013      	ands	r3, r2
 800192c:	b259      	sxtb	r1, r3
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	4603      	mov	r3, r0
 8001932:	01db      	lsls	r3, r3, #7
 8001934:	4413      	add	r3, r2
 8001936:	b2c9      	uxtb	r1, r1
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <ssd1306_DrawPixel+0xa4>)
 800193a:	54d1      	strb	r1, [r2, r3]
 800193c:	e000      	b.n	8001940 <ssd1306_DrawPixel+0x98>
        return;
 800193e:	bf00      	nop
    }
}
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000534 	.word	0x20000534

08001950 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b089      	sub	sp, #36	@ 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	4604      	mov	r4, r0
 8001958:	4638      	mov	r0, r7
 800195a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800195e:	4623      	mov	r3, r4
 8001960:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b1f      	cmp	r3, #31
 8001966:	d902      	bls.n	800196e <ssd1306_WriteChar+0x1e>
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2b7e      	cmp	r3, #126	@ 0x7e
 800196c:	d901      	bls.n	8001972 <ssd1306_WriteChar+0x22>
        return 0;
 800196e:	2300      	movs	r3, #0
 8001970:	e077      	b.n	8001a62 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001972:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	783b      	ldrb	r3, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	2b80      	cmp	r3, #128	@ 0x80
 800197e:	dc06      	bgt.n	800198e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001980:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 8001982:	885b      	ldrh	r3, [r3, #2]
 8001984:	461a      	mov	r2, r3
 8001986:	787b      	ldrb	r3, [r7, #1]
 8001988:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800198a:	2b40      	cmp	r3, #64	@ 0x40
 800198c:	dd01      	ble.n	8001992 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800198e:	2300      	movs	r3, #0
 8001990:	e067      	b.n	8001a62 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e04e      	b.n	8001a36 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	3b20      	subs	r3, #32
 800199e:	7879      	ldrb	r1, [r7, #1]
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4619      	mov	r1, r3
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	440b      	add	r3, r1
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e036      	b.n	8001a26 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b2d8      	uxtb	r0, r3
 80019d6:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 80019d8:	885b      	ldrh	r3, [r3, #2]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <ssd1306_DrawPixel>
 80019ee:	e017      	b.n	8001a20 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	b2d8      	uxtb	r0, r3
 80019fe:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 8001a00:	885b      	ldrh	r3, [r3, #2]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2d9      	uxtb	r1, r3
 8001a0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f7ff ff44 	bl	80018a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	3301      	adds	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	783b      	ldrb	r3, [r7, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d3c3      	bcc.n	80019b8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	787b      	ldrb	r3, [r7, #1]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d3ab      	bcc.n	8001998 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	2a00      	cmp	r2, #0
 8001a48:	d005      	beq.n	8001a56 <ssd1306_WriteChar+0x106>
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	3a20      	subs	r2, #32
 8001a50:	440a      	add	r2, r1
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	e000      	b.n	8001a58 <ssd1306_WriteChar+0x108>
 8001a56:	783a      	ldrb	r2, [r7, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <ssd1306_WriteChar+0x11c>)
 8001a5e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000934 	.word	0x20000934

08001a70 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	4638      	mov	r0, r7
 8001a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001a7e:	e013      	b.n	8001aa8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7818      	ldrb	r0, [r3, #0]
 8001a84:	7e3b      	ldrb	r3, [r7, #24]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	463b      	mov	r3, r7
 8001a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8c:	f7ff ff60 	bl	8001950 <ssd1306_WriteChar>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d002      	beq.n	8001aa2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	e008      	b.n	8001ab4 <ssd1306_WriteString+0x44>
        }
        str++;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e7      	bne.n	8001a80 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <ssd1306_SetCursor+0x2c>)
 8001ad2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <ssd1306_SetCursor+0x2c>)
 8001ada:	805a      	strh	r2, [r3, #2]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	20000934 	.word	0x20000934

08001aec <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4604      	mov	r4, r0
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4623      	mov	r3, r4
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	4603      	mov	r3, r0
 8001b00:	71bb      	strb	r3, [r7, #6]
 8001b02:	460b      	mov	r3, r1
 8001b04:	717b      	strb	r3, [r7, #5]
 8001b06:	4613      	mov	r3, r2
 8001b08:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	797b      	ldrb	r3, [r7, #5]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	bf28      	it	cs
 8001b12:	4613      	movcs	r3, r2
 8001b14:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001b16:	797a      	ldrb	r2, [r7, #5]
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	bf38      	it	cc
 8001b1e:	4613      	movcc	r3, r2
 8001b20:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001b22:	79ba      	ldrb	r2, [r7, #6]
 8001b24:	793b      	ldrb	r3, [r7, #4]
 8001b26:	4293      	cmp	r3, r2
 8001b28:	bf28      	it	cs
 8001b2a:	4613      	movcs	r3, r2
 8001b2c:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001b2e:	793a      	ldrb	r2, [r7, #4]
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	4293      	cmp	r3, r2
 8001b34:	bf38      	it	cc
 8001b36:	4613      	movcc	r3, r2
 8001b38:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e017      	b.n	8001b70 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	73bb      	strb	r3, [r7, #14]
 8001b44:	e009      	b.n	8001b5a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001b46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b4a:	7bf9      	ldrb	r1, [r7, #15]
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff feaa 	bl	80018a8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	3301      	adds	r3, #1
 8001b58:	73bb      	strb	r3, [r7, #14]
 8001b5a:	7bba      	ldrb	r2, [r7, #14]
 8001b5c:	7b3b      	ldrb	r3, [r7, #12]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d803      	bhi.n	8001b6a <ssd1306_FillRectangle+0x7e>
 8001b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	daed      	bge.n	8001b46 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	7abb      	ldrb	r3, [r7, #10]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d803      	bhi.n	8001b80 <ssd1306_FillRectangle+0x94>
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b7c:	d9e0      	bls.n	8001b40 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
}
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b92:	2381      	movs	r3, #129	@ 0x81
 8001b94:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fda9 	bl	80016f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fda5 	bl	80016f0 <ssd1306_WriteCommand>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001bc0:	23af      	movs	r3, #175	@ 0xaf
 8001bc2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <ssd1306_SetDisplayOn+0x38>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	715a      	strb	r2, [r3, #5]
 8001bca:	e004      	b.n	8001bd6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001bcc:	23ae      	movs	r3, #174	@ 0xae
 8001bce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <ssd1306_SetDisplayOn+0x38>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fd89 	bl	80016f0 <ssd1306_WriteCommand>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000934 	.word	0x20000934

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <HAL_Init+0x40>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <HAL_Init+0x40>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <HAL_Init+0x40>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 ffb7 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fa54 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 ffcf 	bl	8002bf2 <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 ff97 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000244 	.word	0x20000244
 8001c88:	2000024c 	.word	0x2000024c
 8001c8c:	20000248 	.word	0x20000248

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2000024c 	.word	0x2000024c
 8001cb4:	2000093c 	.word	0x2000093c

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000093c 	.word	0x2000093c

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000024c 	.word	0x2000024c

08001d18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0ed      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f9f0 	bl	800111c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff ffb4 	bl	8001cb8 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d54:	f7ff ffb0 	bl	8001cb8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d90b      	bls.n	8001d7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0c5      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0e5      	beq.n	8001d54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0202 	bic.w	r2, r2, #2
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff ff8e 	bl	8001cb8 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff ff8a 	bl	8001cb8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09f      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e5      	bne.n	8001da0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7e5b      	ldrb	r3, [r3, #25]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e9b      	ldrb	r3, [r3, #26]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0220 	bic.w	r2, r2, #32
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7edb      	ldrb	r3, [r3, #27]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0210 	bic.w	r2, r2, #16
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0210 	orr.w	r2, r2, #16
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7f1b      	ldrb	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7f5b      	ldrb	r3, [r3, #29]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0204 	orr.w	r2, r2, #4
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	ea42 0103 	orr.w	r1, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d003      	beq.n	8001f36 <HAL_CAN_ConfigFilter+0x26>
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f040 80be 	bne.w	80020b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f36:	4b65      	ldr	r3, [pc, #404]	@ (80020cc <HAL_CAN_ConfigFilter+0x1bc>)
 8001f38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f50:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	431a      	orrs	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2201      	movs	r2, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d123      	bne.n	8001fe0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3248      	adds	r2, #72	@ 0x48
 8001fc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	3348      	adds	r3, #72	@ 0x48
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d122      	bne.n	800202e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002008:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3248      	adds	r2, #72	@ 0x48
 800200e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002022:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	3348      	adds	r3, #72	@ 0x48
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002048:	e007      	b.n	800205a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002074:	e007      	b.n	8002086 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a4:	f023 0201 	bic.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e006      	b.n	80020c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40006400 	.word	0x40006400

080020d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d12e      	bne.n	8002142 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020fc:	f7ff fddc 	bl	8001cb8 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002102:	e012      	b.n	800212a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002104:	f7ff fdd8 	bl	8001cb8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d90b      	bls.n	800212a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e012      	b.n	8002150 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e006      	b.n	8002150 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d003      	beq.n	8002184 <HAL_CAN_AddTxMessage+0x2c>
 800217c:	7ffb      	ldrb	r3, [r7, #31]
 800217e:	2b02      	cmp	r3, #2
 8002180:	f040 80ad 	bne.w	80022de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8095 	beq.w	80022ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	0e1b      	lsrs	r3, r3, #24
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021ae:	2201      	movs	r2, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	6809      	ldr	r1, [r1, #0]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3318      	adds	r3, #24
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	440b      	add	r3, r1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e00f      	b.n	80021fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3318      	adds	r3, #24
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	440b      	add	r3, r1
 80021fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3318      	adds	r3, #24
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	7d1b      	ldrb	r3, [r3, #20]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d111      	bne.n	800223c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3318      	adds	r3, #24
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3318      	adds	r3, #24
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	440b      	add	r3, r1
 8002238:	3304      	adds	r3, #4
 800223a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3307      	adds	r3, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	061a      	lsls	r2, r3, #24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3306      	adds	r3, #6
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3305      	adds	r3, #5
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	4313      	orrs	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	3204      	adds	r2, #4
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	4610      	mov	r0, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	6811      	ldr	r1, [r2, #0]
 8002264:	ea43 0200 	orr.w	r2, r3, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	440b      	add	r3, r1
 800226e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002272:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3303      	adds	r3, #3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	061a      	lsls	r2, r3, #24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3302      	adds	r3, #2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3301      	adds	r3, #1
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	4313      	orrs	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	4610      	mov	r0, r2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	6811      	ldr	r1, [r2, #0]
 800229a:	ea43 0200 	orr.w	r2, r3, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	440b      	add	r3, r1
 80022a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80022a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3318      	adds	r3, #24
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	6811      	ldr	r1, [r2, #0]
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3318      	adds	r3, #24
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	440b      	add	r3, r1
 80022c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e00e      	b.n	80022ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e006      	b.n	80022ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3724      	adds	r7, #36	@ 0x24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d003      	beq.n	800231c <HAL_CAN_GetRxMessage+0x24>
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b02      	cmp	r3, #2
 8002318:	f040 8103 	bne.w	8002522 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d116      	bne.n	800235e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0f7      	b.n	8002530 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e8      	b.n	8002530 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	331b      	adds	r3, #27
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4413      	add	r3, r2
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0204 	and.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10c      	bne.n	8002396 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	331b      	adds	r3, #27
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4413      	add	r3, r2
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0d5b      	lsrs	r3, r3, #21
 800238c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e00b      	b.n	80023ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	331b      	adds	r3, #27
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4413      	add	r3, r2
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	331b      	adds	r3, #27
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0202 	and.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	331b      	adds	r3, #27
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2208      	movs	r2, #8
 80023e0:	611a      	str	r2, [r3, #16]
 80023e2:	e00b      	b.n	80023fc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	331b      	adds	r3, #27
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	331b      	adds	r3, #27
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b2da      	uxtb	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	331b      	adds	r3, #27
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4413      	add	r3, r2
 8002436:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0a1a      	lsrs	r2, r3, #8
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	4413      	add	r3, r2
 8002466:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0c1a      	lsrs	r2, r3, #16
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3302      	adds	r3, #2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e1a      	lsrs	r2, r3, #24
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	3303      	adds	r3, #3
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3304      	adds	r3, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0a1a      	lsrs	r2, r3, #8
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	3305      	adds	r3, #5
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0c1a      	lsrs	r2, r3, #16
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3306      	adds	r3, #6
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e1a      	lsrs	r2, r3, #24
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3307      	adds	r3, #7
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	e007      	b.n	800251e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e006      	b.n	8002530 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d002      	beq.n	800255a <HAL_CAN_ActivateNotification+0x1e>
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d109      	bne.n	800256e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6959      	ldr	r1, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e006      	b.n	800257c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
  }
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07c      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d023      	beq.n	8002620 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f983 	bl	80028f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80025f0:	e016      	b.n	8002620 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
 8002604:	e00c      	b.n	8002620 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
 8002618:	e002      	b.n	8002620 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f989 	bl	8002932 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d024      	beq.n	8002674 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002632:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f963 	bl	800290a <HAL_CAN_TxMailbox1CompleteCallback>
 8002644:	e016      	b.n	8002674 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	e00c      	b.n	8002674 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
 800266c:	e002      	b.n	8002674 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f969 	bl	8002946 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d024      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002686:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f943 	bl	800291e <HAL_CAN_TxMailbox2CompleteCallback>
 8002698:	e016      	b.n	80026c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ac:	e00c      	b.n	80026c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c0:	e002      	b.n	80026c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f949 	bl	800295a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2210      	movs	r2, #16
 80026ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2208      	movs	r2, #8
 8002706:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f930 	bl	800296e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe faae 	bl	8000c88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f912 	bl	8002996 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8f9 	bl	8002982 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f8fc 	bl	80029aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2208      	movs	r2, #8
 80027cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8f5 	bl	80029be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d07b      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d072      	beq.n	80028ce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002842:	2b00      	cmp	r3, #0
 8002844:	d043      	beq.n	80028ce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800284c:	2b00      	cmp	r3, #0
 800284e:	d03e      	beq.n	80028ce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002856:	2b60      	cmp	r3, #96	@ 0x60
 8002858:	d02b      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x32a>
 800285a:	2b60      	cmp	r3, #96	@ 0x60
 800285c:	d82e      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 800285e:	2b50      	cmp	r3, #80	@ 0x50
 8002860:	d022      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x320>
 8002862:	2b50      	cmp	r3, #80	@ 0x50
 8002864:	d82a      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 8002866:	2b40      	cmp	r3, #64	@ 0x40
 8002868:	d019      	beq.n	800289e <HAL_CAN_IRQHandler+0x316>
 800286a:	2b40      	cmp	r3, #64	@ 0x40
 800286c:	d826      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 800286e:	2b30      	cmp	r3, #48	@ 0x30
 8002870:	d010      	beq.n	8002894 <HAL_CAN_IRQHandler+0x30c>
 8002872:	2b30      	cmp	r3, #48	@ 0x30
 8002874:	d822      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 8002876:	2b10      	cmp	r3, #16
 8002878:	d002      	beq.n	8002880 <HAL_CAN_IRQHandler+0x2f8>
 800287a:	2b20      	cmp	r3, #32
 800287c:	d005      	beq.n	800288a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800287e:	e01d      	b.n	80028bc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	f043 0308 	orr.w	r3, r3, #8
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002888:	e019      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002892:	e014      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	f043 0320 	orr.w	r3, r3, #32
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800289c:	e00f      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028a6:	e00a      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028b0:	e005      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028ba:	e000      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            break;
 80028bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2204      	movs	r2, #4
 80028d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f872 	bl	80029d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	@ 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	@ (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	@ (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	@ (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	@ 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	@ 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	@ 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e165      	b.n	8002ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 8154 	bne.w	8002eee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0201 	and.w	r2, r3, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d017      	beq.n	8002cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80ae 	beq.w	8002eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b5d      	ldr	r3, [pc, #372]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	4a5c      	ldr	r2, [pc, #368]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dae:	4a58      	ldr	r2, [pc, #352]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002f14 <HAL_GPIO_Init+0x308>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d025      	beq.n	8002e26 <HAL_GPIO_Init+0x21a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4e      	ldr	r2, [pc, #312]	@ (8002f18 <HAL_GPIO_Init+0x30c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01f      	beq.n	8002e22 <HAL_GPIO_Init+0x216>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4d      	ldr	r2, [pc, #308]	@ (8002f1c <HAL_GPIO_Init+0x310>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x212>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4c      	ldr	r2, [pc, #304]	@ (8002f20 <HAL_GPIO_Init+0x314>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x20e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4b      	ldr	r2, [pc, #300]	@ (8002f24 <HAL_GPIO_Init+0x318>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x20a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8002f28 <HAL_GPIO_Init+0x31c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x206>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a49      	ldr	r2, [pc, #292]	@ (8002f2c <HAL_GPIO_Init+0x320>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x202>
 8002e0a:	2306      	movs	r3, #6
 8002e0c:	e00c      	b.n	8002e28 <HAL_GPIO_Init+0x21c>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	e00a      	b.n	8002e28 <HAL_GPIO_Init+0x21c>
 8002e12:	2305      	movs	r3, #5
 8002e14:	e008      	b.n	8002e28 <HAL_GPIO_Init+0x21c>
 8002e16:	2304      	movs	r3, #4
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x21c>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x21c>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x21c>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x21c>
 8002e26:	2300      	movs	r3, #0
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e38:	4935      	ldr	r1, [pc, #212]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6a:	4a31      	ldr	r2, [pc, #196]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e70:	4b2f      	ldr	r3, [pc, #188]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e94:	4a26      	ldr	r2, [pc, #152]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e9a:	4b25      	ldr	r3, [pc, #148]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee8:	4a11      	ldr	r2, [pc, #68]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	f67f ae96 	bls.w	8002c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3724      	adds	r7, #36	@ 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40013800 	.word	0x40013800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40021400 	.word	0x40021400
 8002f2c:	40021800 	.word	0x40021800
 8002f30:	40013c00 	.word	0x40013c00

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f50:	e003      	b.n	8002f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f78:	887a      	ldrh	r2, [r7, #2]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	041a      	lsls	r2, r3, #16
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43d9      	mvns	r1, r3
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	400b      	ands	r3, r1
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	619a      	str	r2, [r3, #24]
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e12b      	b.n	8003206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fe f902 	bl	80011cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	@ 0x24
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003000:	f000 fdbc 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8003004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a81      	ldr	r2, [pc, #516]	@ (8003210 <HAL_I2C_Init+0x274>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d807      	bhi.n	8003020 <HAL_I2C_Init+0x84>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a80      	ldr	r2, [pc, #512]	@ (8003214 <HAL_I2C_Init+0x278>)
 8003014:	4293      	cmp	r3, r2
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e006      	b.n	800302e <HAL_I2C_Init+0x92>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a7d      	ldr	r2, [pc, #500]	@ (8003218 <HAL_I2C_Init+0x27c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	bf94      	ite	ls
 8003028:	2301      	movls	r3, #1
 800302a:	2300      	movhi	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0e7      	b.n	8003206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a78      	ldr	r2, [pc, #480]	@ (800321c <HAL_I2C_Init+0x280>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0c9b      	lsrs	r3, r3, #18
 8003040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a6a      	ldr	r2, [pc, #424]	@ (8003210 <HAL_I2C_Init+0x274>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d802      	bhi.n	8003070 <HAL_I2C_Init+0xd4>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3301      	adds	r3, #1
 800306e:	e009      	b.n	8003084 <HAL_I2C_Init+0xe8>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	4a69      	ldr	r2, [pc, #420]	@ (8003220 <HAL_I2C_Init+0x284>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	3301      	adds	r3, #1
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	495c      	ldr	r1, [pc, #368]	@ (8003210 <HAL_I2C_Init+0x274>)
 80030a0:	428b      	cmp	r3, r1
 80030a2:	d819      	bhi.n	80030d8 <HAL_I2C_Init+0x13c>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e59      	subs	r1, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b8:	400b      	ands	r3, r1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_I2C_Init+0x138>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1e59      	subs	r1, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d2:	e051      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 80030d4:	2304      	movs	r3, #4
 80030d6:	e04f      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <HAL_I2C_Init+0x168>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e012      	b.n	800312a <HAL_I2C_Init+0x18e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x196>
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10e      	bne.n	8003158 <HAL_I2C_Init+0x1bc>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e58      	subs	r0, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	440b      	add	r3, r1
 8003148:	fbb0 f3f3 	udiv	r3, r0, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003156:	e00f      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	6809      	ldr	r1, [r1, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6911      	ldr	r1, [r2, #16]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68d2      	ldr	r2, [r2, #12]
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	000186a0 	.word	0x000186a0
 8003214:	001e847f 	.word	0x001e847f
 8003218:	003d08ff 	.word	0x003d08ff
 800321c:	431bde83 	.word	0x431bde83
 8003220:	10624dd3 	.word	0x10624dd3

08003224 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	460b      	mov	r3, r1
 8003238:	813b      	strh	r3, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323e:	f7fe fd3b 	bl	8001cb8 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	f040 80d9 	bne.w	8003404 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2319      	movs	r3, #25
 8003258:	2201      	movs	r2, #1
 800325a:	496d      	ldr	r1, [pc, #436]	@ (8003410 <HAL_I2C_Mem_Write+0x1ec>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f971 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e0cc      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_I2C_Mem_Write+0x56>
 8003276:	2302      	movs	r3, #2
 8003278:	e0c5      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d007      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2221      	movs	r2, #33	@ 0x21
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	@ 0x40
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a4d      	ldr	r2, [pc, #308]	@ (8003414 <HAL_I2C_Mem_Write+0x1f0>)
 80032e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e2:	88f8      	ldrh	r0, [r7, #6]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f890 	bl	8003418 <I2C_RequestMemoryWrite>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d052      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e081      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fa36 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06b      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_I2C_Mem_Write+0x180>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1aa      	bne.n	8003302 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fa29 	bl	8003808 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d107      	bne.n	80033d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e016      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000

08003418 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]
 800342a:	460b      	mov	r3, r1
 800342c:	813b      	strh	r3, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003440:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2200      	movs	r2, #0
 800344a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f878 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003468:	d103      	bne.n	8003472 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003470:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e05f      	b.n	8003536 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003484:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	492d      	ldr	r1, [pc, #180]	@ (8003540 <I2C_RequestMemoryWrite+0x128>)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f8d3 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e04c      	b.n	8003536 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b4:	6a39      	ldr	r1, [r7, #32]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f95e 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d107      	bne.n	80034da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e02b      	b.n	8003536 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e4:	893b      	ldrh	r3, [r7, #8]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	611a      	str	r2, [r3, #16]
 80034ee:	e021      	b.n	8003534 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034f0:	893b      	ldrh	r3, [r7, #8]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f938 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d107      	bne.n	8003526 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003524:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e005      	b.n	8003536 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800352a:	893b      	ldrh	r3, [r7, #8]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	00010002 	.word	0x00010002

08003544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003554:	e048      	b.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d044      	beq.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe fbab 	bl	8001cb8 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d139      	bne.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10d      	bne.n	800359a <I2C_WaitOnFlagUntilTimeout+0x56>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	43da      	mvns	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	e00c      	b.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d116      	bne.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e023      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10d      	bne.n	800360e <I2C_WaitOnFlagUntilTimeout+0xca>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	43da      	mvns	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	e00c      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d093      	beq.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003646:	e071      	b.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003656:	d123      	bne.n	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e067      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d041      	beq.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a8:	f7fe fb06 	bl	8001cb8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d302      	bcc.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d136      	bne.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10c      	bne.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e00b      	b.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	43da      	mvns	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4013      	ands	r3, r2
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e021      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10c      	bne.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e00b      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f af6d 	bne.w	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003784:	e034      	b.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f886 	bl	8003898 <I2C_IsAcknowledgeFailed>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e034      	b.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d028      	beq.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe fa8b 	bl	8001cb8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11d      	bne.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037be:	2b80      	cmp	r3, #128	@ 0x80
 80037c0:	d016      	beq.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fa:	2b80      	cmp	r3, #128	@ 0x80
 80037fc:	d1c3      	bne.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003814:	e034      	b.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f83e 	bl	8003898 <I2C_IsAcknowledgeFailed>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e034      	b.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d028      	beq.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fe fa43 	bl	8001cb8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d11d      	bne.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d016      	beq.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e007      	b.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d1c3      	bne.n	8003816 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ae:	d11b      	bne.n	80038e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f043 0204 	orr.w	r2, r3, #4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_PWREx_EnableOverDrive+0x90>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <HAL_PWREx_EnableOverDrive+0x90>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
 8003912:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_PWREx_EnableOverDrive+0x90>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800391e:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <HAL_PWREx_EnableOverDrive+0x94>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7fe f9c8 	bl	8001cb8 <HAL_GetTick>
 8003928:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800392a:	e009      	b.n	8003940 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800392c:	f7fe f9c4 	bl	8001cb8 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800393a:	d901      	bls.n	8003940 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e01f      	b.n	8003980 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <HAL_PWREx_EnableOverDrive+0x98>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394c:	d1ee      	bne.n	800392c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800394e:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003954:	f7fe f9b0 	bl	8001cb8 <HAL_GetTick>
 8003958:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800395a:	e009      	b.n	8003970 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800395c:	f7fe f9ac 	bl	8001cb8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800396a:	d901      	bls.n	8003970 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e007      	b.n	8003980 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003970:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <HAL_PWREx_EnableOverDrive+0x98>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800397c:	d1ee      	bne.n	800395c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	420e0040 	.word	0x420e0040
 8003990:	40007000 	.word	0x40007000
 8003994:	420e0044 	.word	0x420e0044

08003998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0cc      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b68      	ldr	r3, [pc, #416]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d90c      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b65      	ldr	r3, [pc, #404]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b63      	ldr	r3, [pc, #396]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0b8      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ec:	4b59      	ldr	r3, [pc, #356]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a58      	ldr	r2, [pc, #352]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a04:	4b53      	ldr	r3, [pc, #332]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a52      	ldr	r2, [pc, #328]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b50      	ldr	r3, [pc, #320]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	494d      	ldr	r1, [pc, #308]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d044      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b47      	ldr	r3, [pc, #284]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d119      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	4b3f      	ldr	r3, [pc, #252]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e06f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e067      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b37      	ldr	r3, [pc, #220]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4934      	ldr	r1, [pc, #208]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a88:	f7fe f916 	bl	8001cb8 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fe f912 	bl	8001cb8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e04f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d20c      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e032      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aec:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4916      	ldr	r1, [pc, #88]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0a:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	490e      	ldr	r1, [pc, #56]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1e:	f000 f841 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	490a      	ldr	r1, [pc, #40]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	5ccb      	ldrb	r3, [r1, r3]
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe f876 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023c00 	.word	0x40023c00
 8003b54:	40023800 	.word	0x40023800
 8003b58:	08005530 	.word	0x08005530
 8003b5c:	20000244 	.word	0x20000244
 8003b60:	20000248 	.word	0x20000248

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000244 	.word	0x20000244

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a9b      	lsrs	r3, r3, #10
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	@ (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08005540 	.word	0x08005540

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba8:	b0ae      	sub	sp, #184	@ 0xb8
 8003baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bca:	4bcb      	ldr	r3, [pc, #812]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	f200 8206 	bhi.w	8003fe4 <HAL_RCC_GetSysClockFreq+0x440>
 8003bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003fe5 	.word	0x08003fe5
 8003be8:	08003fe5 	.word	0x08003fe5
 8003bec:	08003fe5 	.word	0x08003fe5
 8003bf0:	08003c1d 	.word	0x08003c1d
 8003bf4:	08003fe5 	.word	0x08003fe5
 8003bf8:	08003fe5 	.word	0x08003fe5
 8003bfc:	08003fe5 	.word	0x08003fe5
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003fe5 	.word	0x08003fe5
 8003c08:	08003fe5 	.word	0x08003fe5
 8003c0c:	08003fe5 	.word	0x08003fe5
 8003c10:	08003e15 	.word	0x08003e15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4bb9      	ldr	r3, [pc, #740]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x358>)
 8003c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c1a:	e1e7      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c1c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c22:	e1e3      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c24:	4bb4      	ldr	r3, [pc, #720]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c30:	4bb1      	ldr	r3, [pc, #708]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d071      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3c:	4bae      	ldr	r3, [pc, #696]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c48:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	f04f 0000 	mov.w	r0, #0
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	0159      	lsls	r1, r3, #5
 8003c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c74:	0150      	lsls	r0, r2, #5
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	1a51      	subs	r1, r2, r1
 8003c7e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c80:	4629      	mov	r1, r5
 8003c82:	eb63 0301 	sbc.w	r3, r3, r1
 8003c86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c94:	4649      	mov	r1, r9
 8003c96:	018b      	lsls	r3, r1, #6
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	018a      	lsls	r2, r1, #6
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	1a51      	subs	r1, r2, r1
 8003ca6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ca8:	4649      	mov	r1, r9
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	00cb      	lsls	r3, r1, #3
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	00ca      	lsls	r2, r1, #3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	460a      	mov	r2, r1
 8003cda:	eb42 0303 	adc.w	r3, r2, r3
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cec:	4629      	mov	r1, r5
 8003cee:	024b      	lsls	r3, r1, #9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	024a      	lsls	r2, r1, #9
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003d10:	f7fc face 	bl	80002b0 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4613      	mov	r3, r2
 8003d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d1e:	e067      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d20:	4b75      	ldr	r3, [pc, #468]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d2c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d54:	0150      	lsls	r0, r2, #5
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	1a51      	subs	r1, r2, r1
 8003d5e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d60:	4629      	mov	r1, r5
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d74:	4649      	mov	r1, r9
 8003d76:	018b      	lsls	r3, r1, #6
 8003d78:	4641      	mov	r1, r8
 8003d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7e:	4641      	mov	r1, r8
 8003d80:	018a      	lsls	r2, r1, #6
 8003d82:	4641      	mov	r1, r8
 8003d84:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d88:	4649      	mov	r1, r9
 8003d8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da2:	4692      	mov	sl, r2
 8003da4:	469b      	mov	fp, r3
 8003da6:	4623      	mov	r3, r4
 8003da8:	eb1a 0303 	adds.w	r3, sl, r3
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	462b      	mov	r3, r5
 8003db0:	eb4b 0303 	adc.w	r3, fp, r3
 8003db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	028b      	lsls	r3, r1, #10
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dcc:	4621      	mov	r1, r4
 8003dce:	028a      	lsls	r2, r1, #10
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd8:	2200      	movs	r2, #0
 8003dda:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ddc:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003de2:	f7fc fa65 	bl	80002b0 <__aeabi_uldivmod>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4613      	mov	r3, r2
 8003dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003df0:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e12:	e0eb      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e14:	4b38      	ldr	r3, [pc, #224]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e20:	4b35      	ldr	r3, [pc, #212]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d06b      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2c:	4b32      	ldr	r3, [pc, #200]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	2200      	movs	r2, #0
 8003e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e40:	2300      	movs	r3, #0
 8003e42:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e48:	4622      	mov	r2, r4
 8003e4a:	462b      	mov	r3, r5
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	0159      	lsls	r1, r3, #5
 8003e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5a:	0150      	lsls	r0, r2, #5
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4621      	mov	r1, r4
 8003e62:	1a51      	subs	r1, r2, r1
 8003e64:	61b9      	str	r1, [r7, #24]
 8003e66:	4629      	mov	r1, r5
 8003e68:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e7a:	4659      	mov	r1, fp
 8003e7c:	018b      	lsls	r3, r1, #6
 8003e7e:	4651      	mov	r1, sl
 8003e80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e84:	4651      	mov	r1, sl
 8003e86:	018a      	lsls	r2, r1, #6
 8003e88:	4651      	mov	r1, sl
 8003e8a:	ebb2 0801 	subs.w	r8, r2, r1
 8003e8e:	4659      	mov	r1, fp
 8003e90:	eb63 0901 	sbc.w	r9, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea8:	4690      	mov	r8, r2
 8003eaa:	4699      	mov	r9, r3
 8003eac:	4623      	mov	r3, r4
 8003eae:	eb18 0303 	adds.w	r3, r8, r3
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	eb49 0303 	adc.w	r3, r9, r3
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ec8:	4629      	mov	r1, r5
 8003eca:	024b      	lsls	r3, r1, #9
 8003ecc:	4621      	mov	r1, r4
 8003ece:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	024a      	lsls	r2, r1, #9
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ede:	2200      	movs	r2, #0
 8003ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ee2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ee4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ee8:	f7fc f9e2 	bl	80002b0 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef6:	e065      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x420>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f04:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x458>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	4611      	mov	r1, r2
 8003f10:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f16:	2300      	movs	r3, #0
 8003f18:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f1a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f30:	0150      	lsls	r0, r2, #5
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4641      	mov	r1, r8
 8003f38:	1a51      	subs	r1, r2, r1
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f50:	4659      	mov	r1, fp
 8003f52:	018b      	lsls	r3, r1, #6
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	018a      	lsls	r2, r1, #6
 8003f5e:	4651      	mov	r1, sl
 8003f60:	1a54      	subs	r4, r2, r1
 8003f62:	4659      	mov	r1, fp
 8003f64:	eb63 0501 	sbc.w	r5, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	00eb      	lsls	r3, r5, #3
 8003f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	464b      	mov	r3, r9
 8003f84:	eb45 0303 	adc.w	r3, r5, r3
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f96:	4629      	mov	r1, r5
 8003f98:	028b      	lsls	r3, r1, #10
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	028a      	lsls	r2, r1, #10
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fac:	2200      	movs	r2, #0
 8003fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fb6:	f7fc f97b 	bl	80002b0 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x458>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0f1b      	lsrs	r3, r3, #28
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fe2:	e003      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	37b8      	adds	r7, #184	@ 0xb8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800
 8004000:	00f42400 	.word	0x00f42400

08004004 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e28d      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8083 	beq.w	800412a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004024:	4b94      	ldr	r3, [pc, #592]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b04      	cmp	r3, #4
 800402e:	d019      	beq.n	8004064 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004030:	4b91      	ldr	r3, [pc, #580]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
        || \
 8004038:	2b08      	cmp	r3, #8
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800403c:	4b8e      	ldr	r3, [pc, #568]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004048:	d00c      	beq.n	8004064 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b8b      	ldr	r3, [pc, #556]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d112      	bne.n	800407c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b88      	ldr	r3, [pc, #544]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004062:	d10b      	bne.n	800407c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	4b84      	ldr	r3, [pc, #528]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05b      	beq.n	8004128 <HAL_RCC_OscConfig+0x124>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d157      	bne.n	8004128 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e25a      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x90>
 8004086:	4b7c      	ldr	r3, [pc, #496]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7b      	ldr	r2, [pc, #492]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01d      	b.n	80040d0 <HAL_RCC_OscConfig+0xcc>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0xb4>
 800409e:	4b76      	ldr	r3, [pc, #472]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a75      	ldr	r2, [pc, #468]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b73      	ldr	r3, [pc, #460]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a72      	ldr	r2, [pc, #456]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0xcc>
 80040b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fdee 	bl	8001cb8 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd fdea 	bl	8001cb8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	@ 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e21f      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b61      	ldr	r3, [pc, #388]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0xdc>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd fdda 	bl	8001cb8 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004108:	f7fd fdd6 	bl	8001cb8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	@ 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e20b      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	4b57      	ldr	r3, [pc, #348]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x104>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d06f      	beq.n	8004216 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004136:	4b50      	ldr	r3, [pc, #320]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b00      	cmp	r3, #0
 8004140:	d017      	beq.n	8004172 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004142:	4b4d      	ldr	r3, [pc, #308]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
        || \
 800414a:	2b08      	cmp	r3, #8
 800414c:	d105      	bne.n	800415a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800414e:	4b4a      	ldr	r3, [pc, #296]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b47      	ldr	r3, [pc, #284]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d11c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b44      	ldr	r3, [pc, #272]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	4b41      	ldr	r3, [pc, #260]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x186>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1d3      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	4b3b      	ldr	r3, [pc, #236]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4937      	ldr	r1, [pc, #220]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	e03a      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a8:	4b34      	ldr	r3, [pc, #208]	@ (800427c <HAL_RCC_OscConfig+0x278>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fd fd83 	bl	8001cb8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fd fd7f 	bl	8001cb8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e1b4      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b28      	ldr	r3, [pc, #160]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4925      	ldr	r1, [pc, #148]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b24      	ldr	r3, [pc, #144]	@ (800427c <HAL_RCC_OscConfig+0x278>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd fd62 	bl	8001cb8 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fd fd5e 	bl	8001cb8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e193      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d036      	beq.n	8004290 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <HAL_RCC_OscConfig+0x27c>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fd fd42 	bl	8001cb8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004238:	f7fd fd3e 	bl	8001cb8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e173      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <HAL_RCC_OscConfig+0x274>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x234>
 8004256:	e01b      	b.n	8004290 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004258:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <HAL_RCC_OscConfig+0x27c>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fd fd2b 	bl	8001cb8 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	e00e      	b.n	8004284 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004266:	f7fd fd27 	bl	8001cb8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d907      	bls.n	8004284 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e15c      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b8a      	ldr	r3, [pc, #552]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ea      	bne.n	8004266 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8097 	beq.w	80043cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b83      	ldr	r3, [pc, #524]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	4b7f      	ldr	r3, [pc, #508]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	4a7e      	ldr	r2, [pc, #504]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042be:	4b7c      	ldr	r3, [pc, #496]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b79      	ldr	r3, [pc, #484]	@ (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b76      	ldr	r3, [pc, #472]	@ (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	@ (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fd fce7 	bl	8001cb8 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ee:	f7fd fce3 	bl	8001cb8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e118      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	4b6c      	ldr	r3, [pc, #432]	@ (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x31e>
 8004314:	4b66      	ldr	r3, [pc, #408]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	4a65      	ldr	r2, [pc, #404]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004320:	e01c      	b.n	800435c <HAL_RCC_OscConfig+0x358>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x340>
 800432a:	4b61      	ldr	r3, [pc, #388]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	4a60      	ldr	r2, [pc, #384]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	@ 0x70
 8004336:	4b5e      	ldr	r3, [pc, #376]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	4a5d      	ldr	r2, [pc, #372]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6713      	str	r3, [r2, #112]	@ 0x70
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0x358>
 8004344:	4b5a      	ldr	r3, [pc, #360]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004348:	4a59      	ldr	r2, [pc, #356]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004350:	4b57      	ldr	r3, [pc, #348]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004354:	4a56      	ldr	r2, [pc, #344]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fca8 	bl	8001cb8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fd fca4 	bl	8001cb8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0d7      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	4b4b      	ldr	r3, [pc, #300]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ee      	beq.n	800436c <HAL_RCC_OscConfig+0x368>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fd fc92 	bl	8001cb8 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fd fc8e 	bl	8001cb8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0c1      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	4b40      	ldr	r3, [pc, #256]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ee      	bne.n	8004398 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	4a3a      	ldr	r2, [pc, #232]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80ad 	beq.w	8004530 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d6:	4b36      	ldr	r3, [pc, #216]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d060      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d145      	bne.n	8004476 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b33      	ldr	r3, [pc, #204]	@ (80044b8 <HAL_RCC_OscConfig+0x4b4>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fc62 	bl	8001cb8 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd fc5e 	bl	8001cb8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e093      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b29      	ldr	r3, [pc, #164]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	491b      	ldr	r1, [pc, #108]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_RCC_OscConfig+0x4b4>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fd fc33 	bl	8001cb8 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004456:	f7fd fc2f 	bl	8001cb8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e064      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x452>
 8004474:	e05c      	b.n	8004530 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <HAL_RCC_OscConfig+0x4b4>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd fc1c 	bl	8001cb8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fd fc18 	bl	8001cb8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e04d      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x480>
 80044a2:	e045      	b.n	8004530 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e040      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000
 80044b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044bc:	4b1f      	ldr	r3, [pc, #124]	@ (800453c <HAL_RCC_OscConfig+0x538>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d030      	beq.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d129      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d122      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d119      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	3b01      	subs	r3, #1
 8004506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d10f      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800

08004540 <sniprintf>:
 8004540:	b40c      	push	{r2, r3}
 8004542:	b530      	push	{r4, r5, lr}
 8004544:	4b17      	ldr	r3, [pc, #92]	@ (80045a4 <sniprintf+0x64>)
 8004546:	1e0c      	subs	r4, r1, #0
 8004548:	681d      	ldr	r5, [r3, #0]
 800454a:	b09d      	sub	sp, #116	@ 0x74
 800454c:	da08      	bge.n	8004560 <sniprintf+0x20>
 800454e:	238b      	movs	r3, #139	@ 0x8b
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	f04f 30ff 	mov.w	r0, #4294967295
 8004556:	b01d      	add	sp, #116	@ 0x74
 8004558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800455c:	b002      	add	sp, #8
 800455e:	4770      	bx	lr
 8004560:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004564:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004568:	bf14      	ite	ne
 800456a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800456e:	4623      	moveq	r3, r4
 8004570:	9304      	str	r3, [sp, #16]
 8004572:	9307      	str	r3, [sp, #28]
 8004574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004578:	9002      	str	r0, [sp, #8]
 800457a:	9006      	str	r0, [sp, #24]
 800457c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004580:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004582:	ab21      	add	r3, sp, #132	@ 0x84
 8004584:	a902      	add	r1, sp, #8
 8004586:	4628      	mov	r0, r5
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	f000 f9df 	bl	800494c <_svfiprintf_r>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	bfbc      	itt	lt
 8004592:	238b      	movlt	r3, #139	@ 0x8b
 8004594:	602b      	strlt	r3, [r5, #0]
 8004596:	2c00      	cmp	r4, #0
 8004598:	d0dd      	beq.n	8004556 <sniprintf+0x16>
 800459a:	9b02      	ldr	r3, [sp, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	e7d9      	b.n	8004556 <sniprintf+0x16>
 80045a2:	bf00      	nop
 80045a4:	20000250 	.word	0x20000250

080045a8 <siprintf>:
 80045a8:	b40e      	push	{r1, r2, r3}
 80045aa:	b500      	push	{lr}
 80045ac:	b09c      	sub	sp, #112	@ 0x70
 80045ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80045b0:	9002      	str	r0, [sp, #8]
 80045b2:	9006      	str	r0, [sp, #24]
 80045b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045b8:	4809      	ldr	r0, [pc, #36]	@ (80045e0 <siprintf+0x38>)
 80045ba:	9107      	str	r1, [sp, #28]
 80045bc:	9104      	str	r1, [sp, #16]
 80045be:	4909      	ldr	r1, [pc, #36]	@ (80045e4 <siprintf+0x3c>)
 80045c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c4:	9105      	str	r1, [sp, #20]
 80045c6:	6800      	ldr	r0, [r0, #0]
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	a902      	add	r1, sp, #8
 80045cc:	f000 f9be 	bl	800494c <_svfiprintf_r>
 80045d0:	9b02      	ldr	r3, [sp, #8]
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	b01c      	add	sp, #112	@ 0x70
 80045d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045dc:	b003      	add	sp, #12
 80045de:	4770      	bx	lr
 80045e0:	20000250 	.word	0x20000250
 80045e4:	ffff0208 	.word	0xffff0208

080045e8 <memset>:
 80045e8:	4402      	add	r2, r0
 80045ea:	4603      	mov	r3, r0
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d100      	bne.n	80045f2 <memset+0xa>
 80045f0:	4770      	bx	lr
 80045f2:	f803 1b01 	strb.w	r1, [r3], #1
 80045f6:	e7f9      	b.n	80045ec <memset+0x4>

080045f8 <strncpy>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	3901      	subs	r1, #1
 80045fc:	4603      	mov	r3, r0
 80045fe:	b132      	cbz	r2, 800460e <strncpy+0x16>
 8004600:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004604:	f803 4b01 	strb.w	r4, [r3], #1
 8004608:	3a01      	subs	r2, #1
 800460a:	2c00      	cmp	r4, #0
 800460c:	d1f7      	bne.n	80045fe <strncpy+0x6>
 800460e:	441a      	add	r2, r3
 8004610:	2100      	movs	r1, #0
 8004612:	4293      	cmp	r3, r2
 8004614:	d100      	bne.n	8004618 <strncpy+0x20>
 8004616:	bd10      	pop	{r4, pc}
 8004618:	f803 1b01 	strb.w	r1, [r3], #1
 800461c:	e7f9      	b.n	8004612 <strncpy+0x1a>
	...

08004620 <__errno>:
 8004620:	4b01      	ldr	r3, [pc, #4]	@ (8004628 <__errno+0x8>)
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000250 	.word	0x20000250

0800462c <__libc_init_array>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4d0d      	ldr	r5, [pc, #52]	@ (8004664 <__libc_init_array+0x38>)
 8004630:	4c0d      	ldr	r4, [pc, #52]	@ (8004668 <__libc_init_array+0x3c>)
 8004632:	1b64      	subs	r4, r4, r5
 8004634:	10a4      	asrs	r4, r4, #2
 8004636:	2600      	movs	r6, #0
 8004638:	42a6      	cmp	r6, r4
 800463a:	d109      	bne.n	8004650 <__libc_init_array+0x24>
 800463c:	4d0b      	ldr	r5, [pc, #44]	@ (800466c <__libc_init_array+0x40>)
 800463e:	4c0c      	ldr	r4, [pc, #48]	@ (8004670 <__libc_init_array+0x44>)
 8004640:	f000 fc6e 	bl	8004f20 <_init>
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	2600      	movs	r6, #0
 800464a:	42a6      	cmp	r6, r4
 800464c:	d105      	bne.n	800465a <__libc_init_array+0x2e>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	f855 3b04 	ldr.w	r3, [r5], #4
 8004654:	4798      	blx	r3
 8004656:	3601      	adds	r6, #1
 8004658:	e7ee      	b.n	8004638 <__libc_init_array+0xc>
 800465a:	f855 3b04 	ldr.w	r3, [r5], #4
 800465e:	4798      	blx	r3
 8004660:	3601      	adds	r6, #1
 8004662:	e7f2      	b.n	800464a <__libc_init_array+0x1e>
 8004664:	08005b80 	.word	0x08005b80
 8004668:	08005b80 	.word	0x08005b80
 800466c:	08005b80 	.word	0x08005b80
 8004670:	08005b84 	.word	0x08005b84

08004674 <__retarget_lock_acquire_recursive>:
 8004674:	4770      	bx	lr

08004676 <__retarget_lock_release_recursive>:
 8004676:	4770      	bx	lr

08004678 <strcpy>:
 8004678:	4603      	mov	r3, r0
 800467a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800467e:	f803 2b01 	strb.w	r2, [r3], #1
 8004682:	2a00      	cmp	r2, #0
 8004684:	d1f9      	bne.n	800467a <strcpy+0x2>
 8004686:	4770      	bx	lr

08004688 <memcpy>:
 8004688:	440a      	add	r2, r1
 800468a:	4291      	cmp	r1, r2
 800468c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004690:	d100      	bne.n	8004694 <memcpy+0xc>
 8004692:	4770      	bx	lr
 8004694:	b510      	push	{r4, lr}
 8004696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800469a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800469e:	4291      	cmp	r1, r2
 80046a0:	d1f9      	bne.n	8004696 <memcpy+0xe>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <_free_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4605      	mov	r5, r0
 80046a8:	2900      	cmp	r1, #0
 80046aa:	d041      	beq.n	8004730 <_free_r+0x8c>
 80046ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b0:	1f0c      	subs	r4, r1, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bfb8      	it	lt
 80046b6:	18e4      	addlt	r4, r4, r3
 80046b8:	f000 f8e0 	bl	800487c <__malloc_lock>
 80046bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004734 <_free_r+0x90>)
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	b933      	cbnz	r3, 80046d0 <_free_r+0x2c>
 80046c2:	6063      	str	r3, [r4, #4]
 80046c4:	6014      	str	r4, [r2, #0]
 80046c6:	4628      	mov	r0, r5
 80046c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046cc:	f000 b8dc 	b.w	8004888 <__malloc_unlock>
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	d908      	bls.n	80046e6 <_free_r+0x42>
 80046d4:	6820      	ldr	r0, [r4, #0]
 80046d6:	1821      	adds	r1, r4, r0
 80046d8:	428b      	cmp	r3, r1
 80046da:	bf01      	itttt	eq
 80046dc:	6819      	ldreq	r1, [r3, #0]
 80046de:	685b      	ldreq	r3, [r3, #4]
 80046e0:	1809      	addeq	r1, r1, r0
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	e7ed      	b.n	80046c2 <_free_r+0x1e>
 80046e6:	461a      	mov	r2, r3
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	b10b      	cbz	r3, 80046f0 <_free_r+0x4c>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d9fa      	bls.n	80046e6 <_free_r+0x42>
 80046f0:	6811      	ldr	r1, [r2, #0]
 80046f2:	1850      	adds	r0, r2, r1
 80046f4:	42a0      	cmp	r0, r4
 80046f6:	d10b      	bne.n	8004710 <_free_r+0x6c>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	4401      	add	r1, r0
 80046fc:	1850      	adds	r0, r2, r1
 80046fe:	4283      	cmp	r3, r0
 8004700:	6011      	str	r1, [r2, #0]
 8004702:	d1e0      	bne.n	80046c6 <_free_r+0x22>
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	6053      	str	r3, [r2, #4]
 800470a:	4408      	add	r0, r1
 800470c:	6010      	str	r0, [r2, #0]
 800470e:	e7da      	b.n	80046c6 <_free_r+0x22>
 8004710:	d902      	bls.n	8004718 <_free_r+0x74>
 8004712:	230c      	movs	r3, #12
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	e7d6      	b.n	80046c6 <_free_r+0x22>
 8004718:	6820      	ldr	r0, [r4, #0]
 800471a:	1821      	adds	r1, r4, r0
 800471c:	428b      	cmp	r3, r1
 800471e:	bf04      	itt	eq
 8004720:	6819      	ldreq	r1, [r3, #0]
 8004722:	685b      	ldreq	r3, [r3, #4]
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	bf04      	itt	eq
 8004728:	1809      	addeq	r1, r1, r0
 800472a:	6021      	streq	r1, [r4, #0]
 800472c:	6054      	str	r4, [r2, #4]
 800472e:	e7ca      	b.n	80046c6 <_free_r+0x22>
 8004730:	bd38      	pop	{r3, r4, r5, pc}
 8004732:	bf00      	nop
 8004734:	20000a84 	.word	0x20000a84

08004738 <sbrk_aligned>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	4e0f      	ldr	r6, [pc, #60]	@ (8004778 <sbrk_aligned+0x40>)
 800473c:	460c      	mov	r4, r1
 800473e:	6831      	ldr	r1, [r6, #0]
 8004740:	4605      	mov	r5, r0
 8004742:	b911      	cbnz	r1, 800474a <sbrk_aligned+0x12>
 8004744:	f000 fba6 	bl	8004e94 <_sbrk_r>
 8004748:	6030      	str	r0, [r6, #0]
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 fba1 	bl	8004e94 <_sbrk_r>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d103      	bne.n	800475e <sbrk_aligned+0x26>
 8004756:	f04f 34ff 	mov.w	r4, #4294967295
 800475a:	4620      	mov	r0, r4
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	1cc4      	adds	r4, r0, #3
 8004760:	f024 0403 	bic.w	r4, r4, #3
 8004764:	42a0      	cmp	r0, r4
 8004766:	d0f8      	beq.n	800475a <sbrk_aligned+0x22>
 8004768:	1a21      	subs	r1, r4, r0
 800476a:	4628      	mov	r0, r5
 800476c:	f000 fb92 	bl	8004e94 <_sbrk_r>
 8004770:	3001      	adds	r0, #1
 8004772:	d1f2      	bne.n	800475a <sbrk_aligned+0x22>
 8004774:	e7ef      	b.n	8004756 <sbrk_aligned+0x1e>
 8004776:	bf00      	nop
 8004778:	20000a80 	.word	0x20000a80

0800477c <_malloc_r>:
 800477c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004780:	1ccd      	adds	r5, r1, #3
 8004782:	f025 0503 	bic.w	r5, r5, #3
 8004786:	3508      	adds	r5, #8
 8004788:	2d0c      	cmp	r5, #12
 800478a:	bf38      	it	cc
 800478c:	250c      	movcc	r5, #12
 800478e:	2d00      	cmp	r5, #0
 8004790:	4606      	mov	r6, r0
 8004792:	db01      	blt.n	8004798 <_malloc_r+0x1c>
 8004794:	42a9      	cmp	r1, r5
 8004796:	d904      	bls.n	80047a2 <_malloc_r+0x26>
 8004798:	230c      	movs	r3, #12
 800479a:	6033      	str	r3, [r6, #0]
 800479c:	2000      	movs	r0, #0
 800479e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004878 <_malloc_r+0xfc>
 80047a6:	f000 f869 	bl	800487c <__malloc_lock>
 80047aa:	f8d8 3000 	ldr.w	r3, [r8]
 80047ae:	461c      	mov	r4, r3
 80047b0:	bb44      	cbnz	r4, 8004804 <_malloc_r+0x88>
 80047b2:	4629      	mov	r1, r5
 80047b4:	4630      	mov	r0, r6
 80047b6:	f7ff ffbf 	bl	8004738 <sbrk_aligned>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	4604      	mov	r4, r0
 80047be:	d158      	bne.n	8004872 <_malloc_r+0xf6>
 80047c0:	f8d8 4000 	ldr.w	r4, [r8]
 80047c4:	4627      	mov	r7, r4
 80047c6:	2f00      	cmp	r7, #0
 80047c8:	d143      	bne.n	8004852 <_malloc_r+0xd6>
 80047ca:	2c00      	cmp	r4, #0
 80047cc:	d04b      	beq.n	8004866 <_malloc_r+0xea>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	4639      	mov	r1, r7
 80047d2:	4630      	mov	r0, r6
 80047d4:	eb04 0903 	add.w	r9, r4, r3
 80047d8:	f000 fb5c 	bl	8004e94 <_sbrk_r>
 80047dc:	4581      	cmp	r9, r0
 80047de:	d142      	bne.n	8004866 <_malloc_r+0xea>
 80047e0:	6821      	ldr	r1, [r4, #0]
 80047e2:	1a6d      	subs	r5, r5, r1
 80047e4:	4629      	mov	r1, r5
 80047e6:	4630      	mov	r0, r6
 80047e8:	f7ff ffa6 	bl	8004738 <sbrk_aligned>
 80047ec:	3001      	adds	r0, #1
 80047ee:	d03a      	beq.n	8004866 <_malloc_r+0xea>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	442b      	add	r3, r5
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	f8d8 3000 	ldr.w	r3, [r8]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	bb62      	cbnz	r2, 8004858 <_malloc_r+0xdc>
 80047fe:	f8c8 7000 	str.w	r7, [r8]
 8004802:	e00f      	b.n	8004824 <_malloc_r+0xa8>
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	1b52      	subs	r2, r2, r5
 8004808:	d420      	bmi.n	800484c <_malloc_r+0xd0>
 800480a:	2a0b      	cmp	r2, #11
 800480c:	d917      	bls.n	800483e <_malloc_r+0xc2>
 800480e:	1961      	adds	r1, r4, r5
 8004810:	42a3      	cmp	r3, r4
 8004812:	6025      	str	r5, [r4, #0]
 8004814:	bf18      	it	ne
 8004816:	6059      	strne	r1, [r3, #4]
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	bf08      	it	eq
 800481c:	f8c8 1000 	streq.w	r1, [r8]
 8004820:	5162      	str	r2, [r4, r5]
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	4630      	mov	r0, r6
 8004826:	f000 f82f 	bl	8004888 <__malloc_unlock>
 800482a:	f104 000b 	add.w	r0, r4, #11
 800482e:	1d23      	adds	r3, r4, #4
 8004830:	f020 0007 	bic.w	r0, r0, #7
 8004834:	1ac2      	subs	r2, r0, r3
 8004836:	bf1c      	itt	ne
 8004838:	1a1b      	subne	r3, r3, r0
 800483a:	50a3      	strne	r3, [r4, r2]
 800483c:	e7af      	b.n	800479e <_malloc_r+0x22>
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	42a3      	cmp	r3, r4
 8004842:	bf0c      	ite	eq
 8004844:	f8c8 2000 	streq.w	r2, [r8]
 8004848:	605a      	strne	r2, [r3, #4]
 800484a:	e7eb      	b.n	8004824 <_malloc_r+0xa8>
 800484c:	4623      	mov	r3, r4
 800484e:	6864      	ldr	r4, [r4, #4]
 8004850:	e7ae      	b.n	80047b0 <_malloc_r+0x34>
 8004852:	463c      	mov	r4, r7
 8004854:	687f      	ldr	r7, [r7, #4]
 8004856:	e7b6      	b.n	80047c6 <_malloc_r+0x4a>
 8004858:	461a      	mov	r2, r3
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	42a3      	cmp	r3, r4
 800485e:	d1fb      	bne.n	8004858 <_malloc_r+0xdc>
 8004860:	2300      	movs	r3, #0
 8004862:	6053      	str	r3, [r2, #4]
 8004864:	e7de      	b.n	8004824 <_malloc_r+0xa8>
 8004866:	230c      	movs	r3, #12
 8004868:	6033      	str	r3, [r6, #0]
 800486a:	4630      	mov	r0, r6
 800486c:	f000 f80c 	bl	8004888 <__malloc_unlock>
 8004870:	e794      	b.n	800479c <_malloc_r+0x20>
 8004872:	6005      	str	r5, [r0, #0]
 8004874:	e7d6      	b.n	8004824 <_malloc_r+0xa8>
 8004876:	bf00      	nop
 8004878:	20000a84 	.word	0x20000a84

0800487c <__malloc_lock>:
 800487c:	4801      	ldr	r0, [pc, #4]	@ (8004884 <__malloc_lock+0x8>)
 800487e:	f7ff bef9 	b.w	8004674 <__retarget_lock_acquire_recursive>
 8004882:	bf00      	nop
 8004884:	20000a7c 	.word	0x20000a7c

08004888 <__malloc_unlock>:
 8004888:	4801      	ldr	r0, [pc, #4]	@ (8004890 <__malloc_unlock+0x8>)
 800488a:	f7ff bef4 	b.w	8004676 <__retarget_lock_release_recursive>
 800488e:	bf00      	nop
 8004890:	20000a7c 	.word	0x20000a7c

08004894 <__ssputs_r>:
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	688e      	ldr	r6, [r1, #8]
 800489a:	461f      	mov	r7, r3
 800489c:	42be      	cmp	r6, r7
 800489e:	680b      	ldr	r3, [r1, #0]
 80048a0:	4682      	mov	sl, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	4690      	mov	r8, r2
 80048a6:	d82d      	bhi.n	8004904 <__ssputs_r+0x70>
 80048a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048b0:	d026      	beq.n	8004900 <__ssputs_r+0x6c>
 80048b2:	6965      	ldr	r5, [r4, #20]
 80048b4:	6909      	ldr	r1, [r1, #16]
 80048b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048ba:	eba3 0901 	sub.w	r9, r3, r1
 80048be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048c2:	1c7b      	adds	r3, r7, #1
 80048c4:	444b      	add	r3, r9
 80048c6:	106d      	asrs	r5, r5, #1
 80048c8:	429d      	cmp	r5, r3
 80048ca:	bf38      	it	cc
 80048cc:	461d      	movcc	r5, r3
 80048ce:	0553      	lsls	r3, r2, #21
 80048d0:	d527      	bpl.n	8004922 <__ssputs_r+0x8e>
 80048d2:	4629      	mov	r1, r5
 80048d4:	f7ff ff52 	bl	800477c <_malloc_r>
 80048d8:	4606      	mov	r6, r0
 80048da:	b360      	cbz	r0, 8004936 <__ssputs_r+0xa2>
 80048dc:	6921      	ldr	r1, [r4, #16]
 80048de:	464a      	mov	r2, r9
 80048e0:	f7ff fed2 	bl	8004688 <memcpy>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	6126      	str	r6, [r4, #16]
 80048f2:	6165      	str	r5, [r4, #20]
 80048f4:	444e      	add	r6, r9
 80048f6:	eba5 0509 	sub.w	r5, r5, r9
 80048fa:	6026      	str	r6, [r4, #0]
 80048fc:	60a5      	str	r5, [r4, #8]
 80048fe:	463e      	mov	r6, r7
 8004900:	42be      	cmp	r6, r7
 8004902:	d900      	bls.n	8004906 <__ssputs_r+0x72>
 8004904:	463e      	mov	r6, r7
 8004906:	6820      	ldr	r0, [r4, #0]
 8004908:	4632      	mov	r2, r6
 800490a:	4641      	mov	r1, r8
 800490c:	f000 faa8 	bl	8004e60 <memmove>
 8004910:	68a3      	ldr	r3, [r4, #8]
 8004912:	1b9b      	subs	r3, r3, r6
 8004914:	60a3      	str	r3, [r4, #8]
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	4433      	add	r3, r6
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	2000      	movs	r0, #0
 800491e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004922:	462a      	mov	r2, r5
 8004924:	f000 fac6 	bl	8004eb4 <_realloc_r>
 8004928:	4606      	mov	r6, r0
 800492a:	2800      	cmp	r0, #0
 800492c:	d1e0      	bne.n	80048f0 <__ssputs_r+0x5c>
 800492e:	6921      	ldr	r1, [r4, #16]
 8004930:	4650      	mov	r0, sl
 8004932:	f7ff feb7 	bl	80046a4 <_free_r>
 8004936:	230c      	movs	r3, #12
 8004938:	f8ca 3000 	str.w	r3, [sl]
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e7e9      	b.n	800491e <__ssputs_r+0x8a>
	...

0800494c <_svfiprintf_r>:
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	4698      	mov	r8, r3
 8004952:	898b      	ldrh	r3, [r1, #12]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	b09d      	sub	sp, #116	@ 0x74
 8004958:	4607      	mov	r7, r0
 800495a:	460d      	mov	r5, r1
 800495c:	4614      	mov	r4, r2
 800495e:	d510      	bpl.n	8004982 <_svfiprintf_r+0x36>
 8004960:	690b      	ldr	r3, [r1, #16]
 8004962:	b973      	cbnz	r3, 8004982 <_svfiprintf_r+0x36>
 8004964:	2140      	movs	r1, #64	@ 0x40
 8004966:	f7ff ff09 	bl	800477c <_malloc_r>
 800496a:	6028      	str	r0, [r5, #0]
 800496c:	6128      	str	r0, [r5, #16]
 800496e:	b930      	cbnz	r0, 800497e <_svfiprintf_r+0x32>
 8004970:	230c      	movs	r3, #12
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	b01d      	add	sp, #116	@ 0x74
 800497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497e:	2340      	movs	r3, #64	@ 0x40
 8004980:	616b      	str	r3, [r5, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	9309      	str	r3, [sp, #36]	@ 0x24
 8004986:	2320      	movs	r3, #32
 8004988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800498c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004990:	2330      	movs	r3, #48	@ 0x30
 8004992:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b30 <_svfiprintf_r+0x1e4>
 8004996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800499a:	f04f 0901 	mov.w	r9, #1
 800499e:	4623      	mov	r3, r4
 80049a0:	469a      	mov	sl, r3
 80049a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049a6:	b10a      	cbz	r2, 80049ac <_svfiprintf_r+0x60>
 80049a8:	2a25      	cmp	r2, #37	@ 0x25
 80049aa:	d1f9      	bne.n	80049a0 <_svfiprintf_r+0x54>
 80049ac:	ebba 0b04 	subs.w	fp, sl, r4
 80049b0:	d00b      	beq.n	80049ca <_svfiprintf_r+0x7e>
 80049b2:	465b      	mov	r3, fp
 80049b4:	4622      	mov	r2, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7ff ff6b 	bl	8004894 <__ssputs_r>
 80049be:	3001      	adds	r0, #1
 80049c0:	f000 80a7 	beq.w	8004b12 <_svfiprintf_r+0x1c6>
 80049c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049c6:	445a      	add	r2, fp
 80049c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80049ca:	f89a 3000 	ldrb.w	r3, [sl]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 809f 	beq.w	8004b12 <_svfiprintf_r+0x1c6>
 80049d4:	2300      	movs	r3, #0
 80049d6:	f04f 32ff 	mov.w	r2, #4294967295
 80049da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049de:	f10a 0a01 	add.w	sl, sl, #1
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	9307      	str	r3, [sp, #28]
 80049e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80049ec:	4654      	mov	r4, sl
 80049ee:	2205      	movs	r2, #5
 80049f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f4:	484e      	ldr	r0, [pc, #312]	@ (8004b30 <_svfiprintf_r+0x1e4>)
 80049f6:	f7fb fc0b 	bl	8000210 <memchr>
 80049fa:	9a04      	ldr	r2, [sp, #16]
 80049fc:	b9d8      	cbnz	r0, 8004a36 <_svfiprintf_r+0xea>
 80049fe:	06d0      	lsls	r0, r2, #27
 8004a00:	bf44      	itt	mi
 8004a02:	2320      	movmi	r3, #32
 8004a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a08:	0711      	lsls	r1, r2, #28
 8004a0a:	bf44      	itt	mi
 8004a0c:	232b      	movmi	r3, #43	@ 0x2b
 8004a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a12:	f89a 3000 	ldrb.w	r3, [sl]
 8004a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a18:	d015      	beq.n	8004a46 <_svfiprintf_r+0xfa>
 8004a1a:	9a07      	ldr	r2, [sp, #28]
 8004a1c:	4654      	mov	r4, sl
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f04f 0c0a 	mov.w	ip, #10
 8004a24:	4621      	mov	r1, r4
 8004a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a2a:	3b30      	subs	r3, #48	@ 0x30
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d94b      	bls.n	8004ac8 <_svfiprintf_r+0x17c>
 8004a30:	b1b0      	cbz	r0, 8004a60 <_svfiprintf_r+0x114>
 8004a32:	9207      	str	r2, [sp, #28]
 8004a34:	e014      	b.n	8004a60 <_svfiprintf_r+0x114>
 8004a36:	eba0 0308 	sub.w	r3, r0, r8
 8004a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	46a2      	mov	sl, r4
 8004a44:	e7d2      	b.n	80049ec <_svfiprintf_r+0xa0>
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	1d19      	adds	r1, r3, #4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	9103      	str	r1, [sp, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bfbb      	ittet	lt
 8004a52:	425b      	neglt	r3, r3
 8004a54:	f042 0202 	orrlt.w	r2, r2, #2
 8004a58:	9307      	strge	r3, [sp, #28]
 8004a5a:	9307      	strlt	r3, [sp, #28]
 8004a5c:	bfb8      	it	lt
 8004a5e:	9204      	strlt	r2, [sp, #16]
 8004a60:	7823      	ldrb	r3, [r4, #0]
 8004a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a64:	d10a      	bne.n	8004a7c <_svfiprintf_r+0x130>
 8004a66:	7863      	ldrb	r3, [r4, #1]
 8004a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a6a:	d132      	bne.n	8004ad2 <_svfiprintf_r+0x186>
 8004a6c:	9b03      	ldr	r3, [sp, #12]
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	9203      	str	r2, [sp, #12]
 8004a74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a78:	3402      	adds	r4, #2
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b40 <_svfiprintf_r+0x1f4>
 8004a80:	7821      	ldrb	r1, [r4, #0]
 8004a82:	2203      	movs	r2, #3
 8004a84:	4650      	mov	r0, sl
 8004a86:	f7fb fbc3 	bl	8000210 <memchr>
 8004a8a:	b138      	cbz	r0, 8004a9c <_svfiprintf_r+0x150>
 8004a8c:	9b04      	ldr	r3, [sp, #16]
 8004a8e:	eba0 000a 	sub.w	r0, r0, sl
 8004a92:	2240      	movs	r2, #64	@ 0x40
 8004a94:	4082      	lsls	r2, r0
 8004a96:	4313      	orrs	r3, r2
 8004a98:	3401      	adds	r4, #1
 8004a9a:	9304      	str	r3, [sp, #16]
 8004a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa0:	4824      	ldr	r0, [pc, #144]	@ (8004b34 <_svfiprintf_r+0x1e8>)
 8004aa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004aa6:	2206      	movs	r2, #6
 8004aa8:	f7fb fbb2 	bl	8000210 <memchr>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d036      	beq.n	8004b1e <_svfiprintf_r+0x1d2>
 8004ab0:	4b21      	ldr	r3, [pc, #132]	@ (8004b38 <_svfiprintf_r+0x1ec>)
 8004ab2:	bb1b      	cbnz	r3, 8004afc <_svfiprintf_r+0x1b0>
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	3307      	adds	r3, #7
 8004ab8:	f023 0307 	bic.w	r3, r3, #7
 8004abc:	3308      	adds	r3, #8
 8004abe:	9303      	str	r3, [sp, #12]
 8004ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac2:	4433      	add	r3, r6
 8004ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ac6:	e76a      	b.n	800499e <_svfiprintf_r+0x52>
 8004ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004acc:	460c      	mov	r4, r1
 8004ace:	2001      	movs	r0, #1
 8004ad0:	e7a8      	b.n	8004a24 <_svfiprintf_r+0xd8>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	3401      	adds	r4, #1
 8004ad6:	9305      	str	r3, [sp, #20]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f04f 0c0a 	mov.w	ip, #10
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ae4:	3a30      	subs	r2, #48	@ 0x30
 8004ae6:	2a09      	cmp	r2, #9
 8004ae8:	d903      	bls.n	8004af2 <_svfiprintf_r+0x1a6>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0c6      	beq.n	8004a7c <_svfiprintf_r+0x130>
 8004aee:	9105      	str	r1, [sp, #20]
 8004af0:	e7c4      	b.n	8004a7c <_svfiprintf_r+0x130>
 8004af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004af6:	4604      	mov	r4, r0
 8004af8:	2301      	movs	r3, #1
 8004afa:	e7f0      	b.n	8004ade <_svfiprintf_r+0x192>
 8004afc:	ab03      	add	r3, sp, #12
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	462a      	mov	r2, r5
 8004b02:	4b0e      	ldr	r3, [pc, #56]	@ (8004b3c <_svfiprintf_r+0x1f0>)
 8004b04:	a904      	add	r1, sp, #16
 8004b06:	4638      	mov	r0, r7
 8004b08:	f3af 8000 	nop.w
 8004b0c:	1c42      	adds	r2, r0, #1
 8004b0e:	4606      	mov	r6, r0
 8004b10:	d1d6      	bne.n	8004ac0 <_svfiprintf_r+0x174>
 8004b12:	89ab      	ldrh	r3, [r5, #12]
 8004b14:	065b      	lsls	r3, r3, #25
 8004b16:	f53f af2d 	bmi.w	8004974 <_svfiprintf_r+0x28>
 8004b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b1c:	e72c      	b.n	8004978 <_svfiprintf_r+0x2c>
 8004b1e:	ab03      	add	r3, sp, #12
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	462a      	mov	r2, r5
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <_svfiprintf_r+0x1f0>)
 8004b26:	a904      	add	r1, sp, #16
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f000 f879 	bl	8004c20 <_printf_i>
 8004b2e:	e7ed      	b.n	8004b0c <_svfiprintf_r+0x1c0>
 8004b30:	08005b44 	.word	0x08005b44
 8004b34:	08005b4e 	.word	0x08005b4e
 8004b38:	00000000 	.word	0x00000000
 8004b3c:	08004895 	.word	0x08004895
 8004b40:	08005b4a 	.word	0x08005b4a

08004b44 <_printf_common>:
 8004b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b48:	4616      	mov	r6, r2
 8004b4a:	4698      	mov	r8, r3
 8004b4c:	688a      	ldr	r2, [r1, #8]
 8004b4e:	690b      	ldr	r3, [r1, #16]
 8004b50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	bfb8      	it	lt
 8004b58:	4613      	movlt	r3, r2
 8004b5a:	6033      	str	r3, [r6, #0]
 8004b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b60:	4607      	mov	r7, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	b10a      	cbz	r2, 8004b6a <_printf_common+0x26>
 8004b66:	3301      	adds	r3, #1
 8004b68:	6033      	str	r3, [r6, #0]
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	0699      	lsls	r1, r3, #26
 8004b6e:	bf42      	ittt	mi
 8004b70:	6833      	ldrmi	r3, [r6, #0]
 8004b72:	3302      	addmi	r3, #2
 8004b74:	6033      	strmi	r3, [r6, #0]
 8004b76:	6825      	ldr	r5, [r4, #0]
 8004b78:	f015 0506 	ands.w	r5, r5, #6
 8004b7c:	d106      	bne.n	8004b8c <_printf_common+0x48>
 8004b7e:	f104 0a19 	add.w	sl, r4, #25
 8004b82:	68e3      	ldr	r3, [r4, #12]
 8004b84:	6832      	ldr	r2, [r6, #0]
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	42ab      	cmp	r3, r5
 8004b8a:	dc26      	bgt.n	8004bda <_printf_common+0x96>
 8004b8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	3b00      	subs	r3, #0
 8004b94:	bf18      	it	ne
 8004b96:	2301      	movne	r3, #1
 8004b98:	0692      	lsls	r2, r2, #26
 8004b9a:	d42b      	bmi.n	8004bf4 <_printf_common+0xb0>
 8004b9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	47c8      	blx	r9
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d01e      	beq.n	8004be8 <_printf_common+0xa4>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	6922      	ldr	r2, [r4, #16]
 8004bae:	f003 0306 	and.w	r3, r3, #6
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	bf02      	ittt	eq
 8004bb6:	68e5      	ldreq	r5, [r4, #12]
 8004bb8:	6833      	ldreq	r3, [r6, #0]
 8004bba:	1aed      	subeq	r5, r5, r3
 8004bbc:	68a3      	ldr	r3, [r4, #8]
 8004bbe:	bf0c      	ite	eq
 8004bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc4:	2500      	movne	r5, #0
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	bfc4      	itt	gt
 8004bca:	1a9b      	subgt	r3, r3, r2
 8004bcc:	18ed      	addgt	r5, r5, r3
 8004bce:	2600      	movs	r6, #0
 8004bd0:	341a      	adds	r4, #26
 8004bd2:	42b5      	cmp	r5, r6
 8004bd4:	d11a      	bne.n	8004c0c <_printf_common+0xc8>
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	e008      	b.n	8004bec <_printf_common+0xa8>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4652      	mov	r2, sl
 8004bde:	4641      	mov	r1, r8
 8004be0:	4638      	mov	r0, r7
 8004be2:	47c8      	blx	r9
 8004be4:	3001      	adds	r0, #1
 8004be6:	d103      	bne.n	8004bf0 <_printf_common+0xac>
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	e7c6      	b.n	8004b82 <_printf_common+0x3e>
 8004bf4:	18e1      	adds	r1, r4, r3
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	2030      	movs	r0, #48	@ 0x30
 8004bfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bfe:	4422      	add	r2, r4
 8004c00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c08:	3302      	adds	r3, #2
 8004c0a:	e7c7      	b.n	8004b9c <_printf_common+0x58>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4622      	mov	r2, r4
 8004c10:	4641      	mov	r1, r8
 8004c12:	4638      	mov	r0, r7
 8004c14:	47c8      	blx	r9
 8004c16:	3001      	adds	r0, #1
 8004c18:	d0e6      	beq.n	8004be8 <_printf_common+0xa4>
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7d9      	b.n	8004bd2 <_printf_common+0x8e>
	...

08004c20 <_printf_i>:
 8004c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	7e0f      	ldrb	r7, [r1, #24]
 8004c26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c28:	2f78      	cmp	r7, #120	@ 0x78
 8004c2a:	4691      	mov	r9, r2
 8004c2c:	4680      	mov	r8, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	469a      	mov	sl, r3
 8004c32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c36:	d807      	bhi.n	8004c48 <_printf_i+0x28>
 8004c38:	2f62      	cmp	r7, #98	@ 0x62
 8004c3a:	d80a      	bhi.n	8004c52 <_printf_i+0x32>
 8004c3c:	2f00      	cmp	r7, #0
 8004c3e:	f000 80d2 	beq.w	8004de6 <_printf_i+0x1c6>
 8004c42:	2f58      	cmp	r7, #88	@ 0x58
 8004c44:	f000 80b9 	beq.w	8004dba <_printf_i+0x19a>
 8004c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c50:	e03a      	b.n	8004cc8 <_printf_i+0xa8>
 8004c52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c56:	2b15      	cmp	r3, #21
 8004c58:	d8f6      	bhi.n	8004c48 <_printf_i+0x28>
 8004c5a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c60 <_printf_i+0x40>)
 8004c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004ccd 	.word	0x08004ccd
 8004c68:	08004c49 	.word	0x08004c49
 8004c6c:	08004c49 	.word	0x08004c49
 8004c70:	08004c49 	.word	0x08004c49
 8004c74:	08004c49 	.word	0x08004c49
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c49 	.word	0x08004c49
 8004c80:	08004c49 	.word	0x08004c49
 8004c84:	08004c49 	.word	0x08004c49
 8004c88:	08004c49 	.word	0x08004c49
 8004c8c:	08004dcd 	.word	0x08004dcd
 8004c90:	08004cf7 	.word	0x08004cf7
 8004c94:	08004d87 	.word	0x08004d87
 8004c98:	08004c49 	.word	0x08004c49
 8004c9c:	08004c49 	.word	0x08004c49
 8004ca0:	08004def 	.word	0x08004def
 8004ca4:	08004c49 	.word	0x08004c49
 8004ca8:	08004cf7 	.word	0x08004cf7
 8004cac:	08004c49 	.word	0x08004c49
 8004cb0:	08004c49 	.word	0x08004c49
 8004cb4:	08004d8f 	.word	0x08004d8f
 8004cb8:	6833      	ldr	r3, [r6, #0]
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6032      	str	r2, [r6, #0]
 8004cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e09d      	b.n	8004e08 <_printf_i+0x1e8>
 8004ccc:	6833      	ldr	r3, [r6, #0]
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	1d19      	adds	r1, r3, #4
 8004cd2:	6031      	str	r1, [r6, #0]
 8004cd4:	0606      	lsls	r6, r0, #24
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0xbc>
 8004cd8:	681d      	ldr	r5, [r3, #0]
 8004cda:	e003      	b.n	8004ce4 <_printf_i+0xc4>
 8004cdc:	0645      	lsls	r5, r0, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0xb8>
 8004ce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ce4:	2d00      	cmp	r5, #0
 8004ce6:	da03      	bge.n	8004cf0 <_printf_i+0xd0>
 8004ce8:	232d      	movs	r3, #45	@ 0x2d
 8004cea:	426d      	negs	r5, r5
 8004cec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cf0:	4859      	ldr	r0, [pc, #356]	@ (8004e58 <_printf_i+0x238>)
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	e011      	b.n	8004d1a <_printf_i+0xfa>
 8004cf6:	6821      	ldr	r1, [r4, #0]
 8004cf8:	6833      	ldr	r3, [r6, #0]
 8004cfa:	0608      	lsls	r0, r1, #24
 8004cfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d00:	d402      	bmi.n	8004d08 <_printf_i+0xe8>
 8004d02:	0649      	lsls	r1, r1, #25
 8004d04:	bf48      	it	mi
 8004d06:	b2ad      	uxthmi	r5, r5
 8004d08:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d0a:	4853      	ldr	r0, [pc, #332]	@ (8004e58 <_printf_i+0x238>)
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	bf14      	ite	ne
 8004d10:	230a      	movne	r3, #10
 8004d12:	2308      	moveq	r3, #8
 8004d14:	2100      	movs	r1, #0
 8004d16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d1a:	6866      	ldr	r6, [r4, #4]
 8004d1c:	60a6      	str	r6, [r4, #8]
 8004d1e:	2e00      	cmp	r6, #0
 8004d20:	bfa2      	ittt	ge
 8004d22:	6821      	ldrge	r1, [r4, #0]
 8004d24:	f021 0104 	bicge.w	r1, r1, #4
 8004d28:	6021      	strge	r1, [r4, #0]
 8004d2a:	b90d      	cbnz	r5, 8004d30 <_printf_i+0x110>
 8004d2c:	2e00      	cmp	r6, #0
 8004d2e:	d04b      	beq.n	8004dc8 <_printf_i+0x1a8>
 8004d30:	4616      	mov	r6, r2
 8004d32:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d36:	fb03 5711 	mls	r7, r3, r1, r5
 8004d3a:	5dc7      	ldrb	r7, [r0, r7]
 8004d3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d40:	462f      	mov	r7, r5
 8004d42:	42bb      	cmp	r3, r7
 8004d44:	460d      	mov	r5, r1
 8004d46:	d9f4      	bls.n	8004d32 <_printf_i+0x112>
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d10b      	bne.n	8004d64 <_printf_i+0x144>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	07df      	lsls	r7, r3, #31
 8004d50:	d508      	bpl.n	8004d64 <_printf_i+0x144>
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	6861      	ldr	r1, [r4, #4]
 8004d56:	4299      	cmp	r1, r3
 8004d58:	bfde      	ittt	le
 8004d5a:	2330      	movle	r3, #48	@ 0x30
 8004d5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d64:	1b92      	subs	r2, r2, r6
 8004d66:	6122      	str	r2, [r4, #16]
 8004d68:	f8cd a000 	str.w	sl, [sp]
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	aa03      	add	r2, sp, #12
 8004d70:	4621      	mov	r1, r4
 8004d72:	4640      	mov	r0, r8
 8004d74:	f7ff fee6 	bl	8004b44 <_printf_common>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d14a      	bne.n	8004e12 <_printf_i+0x1f2>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	b004      	add	sp, #16
 8004d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	f043 0320 	orr.w	r3, r3, #32
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	4833      	ldr	r0, [pc, #204]	@ (8004e5c <_printf_i+0x23c>)
 8004d90:	2778      	movs	r7, #120	@ 0x78
 8004d92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	6831      	ldr	r1, [r6, #0]
 8004d9a:	061f      	lsls	r7, r3, #24
 8004d9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004da0:	d402      	bmi.n	8004da8 <_printf_i+0x188>
 8004da2:	065f      	lsls	r7, r3, #25
 8004da4:	bf48      	it	mi
 8004da6:	b2ad      	uxthmi	r5, r5
 8004da8:	6031      	str	r1, [r6, #0]
 8004daa:	07d9      	lsls	r1, r3, #31
 8004dac:	bf44      	itt	mi
 8004dae:	f043 0320 	orrmi.w	r3, r3, #32
 8004db2:	6023      	strmi	r3, [r4, #0]
 8004db4:	b11d      	cbz	r5, 8004dbe <_printf_i+0x19e>
 8004db6:	2310      	movs	r3, #16
 8004db8:	e7ac      	b.n	8004d14 <_printf_i+0xf4>
 8004dba:	4827      	ldr	r0, [pc, #156]	@ (8004e58 <_printf_i+0x238>)
 8004dbc:	e7e9      	b.n	8004d92 <_printf_i+0x172>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	f023 0320 	bic.w	r3, r3, #32
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	e7f6      	b.n	8004db6 <_printf_i+0x196>
 8004dc8:	4616      	mov	r6, r2
 8004dca:	e7bd      	b.n	8004d48 <_printf_i+0x128>
 8004dcc:	6833      	ldr	r3, [r6, #0]
 8004dce:	6825      	ldr	r5, [r4, #0]
 8004dd0:	6961      	ldr	r1, [r4, #20]
 8004dd2:	1d18      	adds	r0, r3, #4
 8004dd4:	6030      	str	r0, [r6, #0]
 8004dd6:	062e      	lsls	r6, r5, #24
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	d501      	bpl.n	8004de0 <_printf_i+0x1c0>
 8004ddc:	6019      	str	r1, [r3, #0]
 8004dde:	e002      	b.n	8004de6 <_printf_i+0x1c6>
 8004de0:	0668      	lsls	r0, r5, #25
 8004de2:	d5fb      	bpl.n	8004ddc <_printf_i+0x1bc>
 8004de4:	8019      	strh	r1, [r3, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	4616      	mov	r6, r2
 8004dec:	e7bc      	b.n	8004d68 <_printf_i+0x148>
 8004dee:	6833      	ldr	r3, [r6, #0]
 8004df0:	1d1a      	adds	r2, r3, #4
 8004df2:	6032      	str	r2, [r6, #0]
 8004df4:	681e      	ldr	r6, [r3, #0]
 8004df6:	6862      	ldr	r2, [r4, #4]
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7fb fa08 	bl	8000210 <memchr>
 8004e00:	b108      	cbz	r0, 8004e06 <_printf_i+0x1e6>
 8004e02:	1b80      	subs	r0, r0, r6
 8004e04:	6060      	str	r0, [r4, #4]
 8004e06:	6863      	ldr	r3, [r4, #4]
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e10:	e7aa      	b.n	8004d68 <_printf_i+0x148>
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	4632      	mov	r2, r6
 8004e16:	4649      	mov	r1, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	47d0      	blx	sl
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d0ad      	beq.n	8004d7c <_printf_i+0x15c>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	079b      	lsls	r3, r3, #30
 8004e24:	d413      	bmi.n	8004e4e <_printf_i+0x22e>
 8004e26:	68e0      	ldr	r0, [r4, #12]
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	4298      	cmp	r0, r3
 8004e2c:	bfb8      	it	lt
 8004e2e:	4618      	movlt	r0, r3
 8004e30:	e7a6      	b.n	8004d80 <_printf_i+0x160>
 8004e32:	2301      	movs	r3, #1
 8004e34:	4632      	mov	r2, r6
 8004e36:	4649      	mov	r1, r9
 8004e38:	4640      	mov	r0, r8
 8004e3a:	47d0      	blx	sl
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d09d      	beq.n	8004d7c <_printf_i+0x15c>
 8004e40:	3501      	adds	r5, #1
 8004e42:	68e3      	ldr	r3, [r4, #12]
 8004e44:	9903      	ldr	r1, [sp, #12]
 8004e46:	1a5b      	subs	r3, r3, r1
 8004e48:	42ab      	cmp	r3, r5
 8004e4a:	dcf2      	bgt.n	8004e32 <_printf_i+0x212>
 8004e4c:	e7eb      	b.n	8004e26 <_printf_i+0x206>
 8004e4e:	2500      	movs	r5, #0
 8004e50:	f104 0619 	add.w	r6, r4, #25
 8004e54:	e7f5      	b.n	8004e42 <_printf_i+0x222>
 8004e56:	bf00      	nop
 8004e58:	08005b55 	.word	0x08005b55
 8004e5c:	08005b66 	.word	0x08005b66

08004e60 <memmove>:
 8004e60:	4288      	cmp	r0, r1
 8004e62:	b510      	push	{r4, lr}
 8004e64:	eb01 0402 	add.w	r4, r1, r2
 8004e68:	d902      	bls.n	8004e70 <memmove+0x10>
 8004e6a:	4284      	cmp	r4, r0
 8004e6c:	4623      	mov	r3, r4
 8004e6e:	d807      	bhi.n	8004e80 <memmove+0x20>
 8004e70:	1e43      	subs	r3, r0, #1
 8004e72:	42a1      	cmp	r1, r4
 8004e74:	d008      	beq.n	8004e88 <memmove+0x28>
 8004e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e7e:	e7f8      	b.n	8004e72 <memmove+0x12>
 8004e80:	4402      	add	r2, r0
 8004e82:	4601      	mov	r1, r0
 8004e84:	428a      	cmp	r2, r1
 8004e86:	d100      	bne.n	8004e8a <memmove+0x2a>
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e92:	e7f7      	b.n	8004e84 <memmove+0x24>

08004e94 <_sbrk_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d06      	ldr	r5, [pc, #24]	@ (8004eb0 <_sbrk_r+0x1c>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	f7fc fa20 	bl	80012e4 <_sbrk>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_sbrk_r+0x1a>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_sbrk_r+0x1a>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000a78 	.word	0x20000a78

08004eb4 <_realloc_r>:
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	4680      	mov	r8, r0
 8004eba:	4615      	mov	r5, r2
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	b921      	cbnz	r1, 8004eca <_realloc_r+0x16>
 8004ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	f7ff bc59 	b.w	800477c <_malloc_r>
 8004eca:	b92a      	cbnz	r2, 8004ed8 <_realloc_r+0x24>
 8004ecc:	f7ff fbea 	bl	80046a4 <_free_r>
 8004ed0:	2400      	movs	r4, #0
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed8:	f000 f81a 	bl	8004f10 <_malloc_usable_size_r>
 8004edc:	4285      	cmp	r5, r0
 8004ede:	4606      	mov	r6, r0
 8004ee0:	d802      	bhi.n	8004ee8 <_realloc_r+0x34>
 8004ee2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ee6:	d8f4      	bhi.n	8004ed2 <_realloc_r+0x1e>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4640      	mov	r0, r8
 8004eec:	f7ff fc46 	bl	800477c <_malloc_r>
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d0ec      	beq.n	8004ed0 <_realloc_r+0x1c>
 8004ef6:	42b5      	cmp	r5, r6
 8004ef8:	462a      	mov	r2, r5
 8004efa:	4621      	mov	r1, r4
 8004efc:	bf28      	it	cs
 8004efe:	4632      	movcs	r2, r6
 8004f00:	f7ff fbc2 	bl	8004688 <memcpy>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4640      	mov	r0, r8
 8004f08:	f7ff fbcc 	bl	80046a4 <_free_r>
 8004f0c:	463c      	mov	r4, r7
 8004f0e:	e7e0      	b.n	8004ed2 <_realloc_r+0x1e>

08004f10 <_malloc_usable_size_r>:
 8004f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f14:	1f18      	subs	r0, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfbc      	itt	lt
 8004f1a:	580b      	ldrlt	r3, [r1, r0]
 8004f1c:	18c0      	addlt	r0, r0, r3
 8004f1e:	4770      	bx	lr

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
