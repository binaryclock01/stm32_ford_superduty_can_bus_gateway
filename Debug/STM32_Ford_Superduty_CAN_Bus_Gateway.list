
STM32_Ford_Superduty_CAN_Bus_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b14  08005b14  000072a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005b14  08005b14  00006b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b1c  08005b1c  000072a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b1c  08005b1c  00006b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b20  08005b20  00006b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a0  20000000  08005b24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  200002a0  08005dc4  000072a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  08005dc4  00007a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000072a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca96  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002596  00000000  00000000  00013d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00016300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000855  00000000  00000000  00016e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f3e  00000000  00000000  0001767d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ab0  00000000  00000000  0003a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca93  00000000  00000000  0004b06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a8  00000000  00000000  00117b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011acec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002a0 	.word	0x200002a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ebc 	.word	0x08004ebc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002a4 	.word	0x200002a4
 800020c:	08004ebc 	.word	0x08004ebc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <get_request_id>:
    CAN_ID_BCM = 0x72E,   // Body Control Module CAN ID
    CAN_ID_SCCM = 0x72C,  // Steering Column Control Module CAN ID
} CAN_IDs;

// Function to calculate request ID based on reply CAN ID
static inline uint32_t get_request_id(CAN_IDs module_id) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
    return module_id - CAN_ID_REQUEST_REPLY_OFFSET;
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	3b08      	subs	r3, #8
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <build_can_request>:
 *
 * @param device Pointer to the CANDeviceConfig representing the device.
 * @param pid Pointer to the CANDevicePID representing the PID to request.
 * @return uint64_t The constructed 64-bit CAN request payload.
 */
uint64_t build_can_request(CANDeviceConfig *device, CANDevicePID *pid) {
 80005bc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80005c0:	b093      	sub	sp, #76	@ 0x4c
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80005c6:	6339      	str	r1, [r7, #48]	@ 0x30
    uint64_t uint64_payload = 0;
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	f04f 0300 	mov.w	r3, #0
 80005d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    uint8_t request_size_in_bytes = 0x03;  // Payload size: Length + Command + PID
 80005d4:	2303      	movs	r3, #3
 80005d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t command_byte = can_request_commands[CMD_READ].byte;  // Read command (0x22)
 80005da:	4b47      	ldr	r3, [pc, #284]	@ (80006f8 <build_can_request+0x13c>)
 80005dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80005e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    uint16_t pid_id = __builtin_bswap16(*(uint16_t *)pid->pid_id);  // Convert PID to big-endian
 80005e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e6:	3308      	adds	r3, #8
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	ba5b      	rev16	r3, r3
 80005ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    uint8_t starting_msb = ((MAX_DLC_BYTE_LENGTH - 1) * 8);  // MSB position for 8-byte payload
 80005ee:	2338      	movs	r3, #56	@ 0x38
 80005f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Construct payload
    uint64_payload |= ((uint64_t)request_size_in_bytes) << (starting_msb - DATA_LENGTH_START * 8);
 80005f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005f8:	2200      	movs	r2, #0
 80005fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80005fe:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8000602:	f1a1 0320 	sub.w	r3, r1, #32
 8000606:	f1c1 0220 	rsb	r2, r1, #32
 800060a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800060c:	fa00 fb01 	lsl.w	fp, r0, r1
 8000610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000612:	fa00 f303 	lsl.w	r3, r0, r3
 8000616:	ea4b 0b03 	orr.w	fp, fp, r3
 800061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800061c:	fa23 f202 	lsr.w	r2, r3, r2
 8000620:	ea4b 0b02 	orr.w	fp, fp, r2
 8000624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000626:	fa03 fa01 	lsl.w	sl, r3, r1
 800062a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800062e:	ea42 010a 	orr.w	r1, r2, sl
 8000632:	6139      	str	r1, [r7, #16]
 8000634:	ea43 030b 	orr.w	r3, r3, fp
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800063e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    uint64_payload |= ((uint64_t)command_byte) << (starting_msb - DATA_COMMAND_START * 8);
 8000642:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000646:	2200      	movs	r2, #0
 8000648:	623b      	str	r3, [r7, #32]
 800064a:	627a      	str	r2, [r7, #36]	@ 0x24
 800064c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000650:	f1a3 0208 	sub.w	r2, r3, #8
 8000654:	f1a2 0120 	sub.w	r1, r2, #32
 8000658:	f1c2 0320 	rsb	r3, r2, #32
 800065c:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8000660:	4658      	mov	r0, fp
 8000662:	fa00 f902 	lsl.w	r9, r0, r2
 8000666:	4650      	mov	r0, sl
 8000668:	fa00 f101 	lsl.w	r1, r0, r1
 800066c:	ea49 0901 	orr.w	r9, r9, r1
 8000670:	4651      	mov	r1, sl
 8000672:	fa21 f303 	lsr.w	r3, r1, r3
 8000676:	ea49 0903 	orr.w	r9, r9, r3
 800067a:	4653      	mov	r3, sl
 800067c:	fa03 f802 	lsl.w	r8, r3, r2
 8000680:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000684:	ea42 0108 	orr.w	r1, r2, r8
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	ea43 0309 	orr.w	r3, r3, r9
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000694:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    uint64_payload |= ((uint64_t)pid_id) << (starting_msb - (DATA_PID_START + 1) * 8);
 8000698:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800069a:	2200      	movs	r2, #0
 800069c:	61bb      	str	r3, [r7, #24]
 800069e:	61fa      	str	r2, [r7, #28]
 80006a0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80006a4:	3b18      	subs	r3, #24
 80006a6:	f1a3 0120 	sub.w	r1, r3, #32
 80006aa:	f1c3 0220 	rsb	r2, r3, #32
 80006ae:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80006b2:	4648      	mov	r0, r9
 80006b4:	fa00 f503 	lsl.w	r5, r0, r3
 80006b8:	4640      	mov	r0, r8
 80006ba:	fa00 f101 	lsl.w	r1, r0, r1
 80006be:	430d      	orrs	r5, r1
 80006c0:	4641      	mov	r1, r8
 80006c2:	fa21 f202 	lsr.w	r2, r1, r2
 80006c6:	4315      	orrs	r5, r2
 80006c8:	4642      	mov	r2, r8
 80006ca:	409a      	lsls	r2, r3
 80006cc:	4614      	mov	r4, r2
 80006ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80006d2:	ea42 0104 	orr.w	r1, r2, r4
 80006d6:	6039      	str	r1, [r7, #0]
 80006d8:	432b      	orrs	r3, r5
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80006e0:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40

    return uint64_payload;
 80006e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
}
 80006e8:	4610      	mov	r0, r2
 80006ea:	4619      	mov	r1, r3
 80006ec:	374c      	adds	r7, #76	@ 0x4c
 80006ee:	46bd      	mov	sp, r7
 80006f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000190 	.word	0x20000190

080006fc <send_can_request>:
 *
 * @param can_instance The CAN instance (e.g., CAN1 or CAN2).
 * @param device Pointer to the CANDeviceConfig representing the device.
 * @param pid Pointer to the CANDevicePID representing the PID to request.
 */
void send_can_request(CANInstance can_instance, CANDeviceConfig *device, CANDevicePID *pid) {
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b0cc      	sub	sp, #304	@ 0x130
 8000700:	af00      	add	r7, sp, #0
 8000702:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000706:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800070a:	6019      	str	r1, [r3, #0]
 800070c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000710:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800071a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800071e:	4602      	mov	r2, r0
 8000720:	701a      	strb	r2, [r3, #0]
    uint64_t request_id = get_request_id(device->can_id);
 8000722:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000726:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	889b      	ldrh	r3, [r3, #4]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff36 	bl	80005a0 <get_request_id>
 8000734:	4603      	mov	r3, r0
 8000736:	2200      	movs	r2, #0
 8000738:	461c      	mov	r4, r3
 800073a:	4615      	mov	r5, r2
 800073c:	e9c7 4548 	strd	r4, r5, [r7, #288]	@ 0x120

    // Configure CAN transmission header
    TxHeader[can_instance].StdId = request_id;
 8000740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000744:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800074e:	487e      	ldr	r0, [pc, #504]	@ (8000948 <send_can_request+0x24c>)
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	4403      	add	r3, r0
 800075a:	6019      	str	r1, [r3, #0]
    TxHeader[can_instance].IDE = CAN_ID_STD;
 800075c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000760:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	4978      	ldr	r1, [pc, #480]	@ (8000948 <send_can_request+0x24c>)
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	440b      	add	r3, r1
 8000772:	3308      	adds	r3, #8
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
    TxHeader[can_instance].RTR = CAN_RTR_DATA;
 8000778:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800077c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	4971      	ldr	r1, [pc, #452]	@ (8000948 <send_can_request+0x24c>)
 8000784:	4613      	mov	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4413      	add	r3, r2
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	440b      	add	r3, r1
 800078e:	330c      	adds	r3, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
    TxHeader[can_instance].DLC = MAX_DLC_BYTE_LENGTH;
 8000794:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000798:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	496a      	ldr	r1, [pc, #424]	@ (8000948 <send_can_request+0x24c>)
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	440b      	add	r3, r1
 80007aa:	3310      	adds	r3, #16
 80007ac:	2208      	movs	r2, #8
 80007ae:	601a      	str	r2, [r3, #0]
    TxHeader[can_instance].TransmitGlobalTime = DISABLE;
 80007b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	4963      	ldr	r1, [pc, #396]	@ (8000948 <send_can_request+0x24c>)
 80007bc:	4613      	mov	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	440b      	add	r3, r1
 80007c6:	3314      	adds	r3, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]

    uint64_t request_data = build_can_request(device, pid);
 80007cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007d0:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 80007d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80007dc:	6811      	ldr	r1, [r2, #0]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f7ff feec 	bl	80005bc <build_can_request>
 80007e4:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
    uint64_t reversed_bytes_request_data = __builtin_bswap64(request_data);  // Convert to big-endian
 80007e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80007ec:	ba19      	rev	r1, r3
 80007ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80007f2:	ba18      	rev	r0, r3
 80007f4:	4602      	mov	r2, r0
 80007f6:	460b      	mov	r3, r1
 80007f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

    // Copy request data into TxData buffer
    memcpy(TxData[can_instance], &reversed_bytes_request_data, TxHeader[can_instance].DLC);
 80007fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000800:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4a50      	ldr	r2, [pc, #320]	@ (800094c <send_can_request+0x250>)
 800080a:	1898      	adds	r0, r3, r2
 800080c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000810:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	494c      	ldr	r1, [pc, #304]	@ (8000948 <send_can_request+0x24c>)
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	440b      	add	r3, r1
 8000822:	3310      	adds	r3, #16
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800082a:	4619      	mov	r1, r3
 800082c:	f003 fefa 	bl	8004624 <memcpy>

    // Transmit the CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader[can_instance], TxData[can_instance], &TxMailbox[can_instance]) != HAL_OK) {
 8000830:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000834:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	4a41      	ldr	r2, [pc, #260]	@ (8000948 <send_can_request+0x24c>)
 8000844:	1899      	adds	r1, r3, r2
 8000846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800084a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4a3e      	ldr	r2, [pc, #248]	@ (800094c <send_can_request+0x250>)
 8000854:	441a      	add	r2, r3
 8000856:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800085a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	483b      	ldr	r0, [pc, #236]	@ (8000950 <send_can_request+0x254>)
 8000864:	4403      	add	r3, r0
 8000866:	483b      	ldr	r0, [pc, #236]	@ (8000954 <send_can_request+0x258>)
 8000868:	f001 fc64 	bl	8002134 <HAL_CAN_AddTxMessage>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d012      	beq.n	8000898 <send_can_request+0x19c>
        char error_msg[255];
        snprintf(error_msg, sizeof(error_msg), "Err Tx on CAN%d", can_instance);
 8000872:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000876:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f107 0010 	add.w	r0, r7, #16
 8000880:	4a35      	ldr	r2, [pc, #212]	@ (8000958 <send_can_request+0x25c>)
 8000882:	21ff      	movs	r1, #255	@ 0xff
 8000884:	f003 fe4a 	bl	800451c <sniprintf>
        send_Console_Msg(error_msg);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fda5 	bl	80013dc <send_Console_Msg>
        Error_Handler();
 8000892:	f000 fbf9 	bl	8001088 <Error_Handler>
            offset += snprintf(&sent_msg[offset], sizeof(sent_msg) - offset, "%02X", TxData[can_instance][j]);
        }

        send_Console_Msg(sent_msg);
    }
}
 8000896:	e052      	b.n	800093e <send_can_request+0x242>
        tx_count[can_instance]++;
 8000898:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800089c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4a2e      	ldr	r2, [pc, #184]	@ (800095c <send_can_request+0x260>)
 80008a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a8:	3201      	adds	r2, #1
 80008aa:	492c      	ldr	r1, [pc, #176]	@ (800095c <send_can_request+0x260>)
 80008ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        int offset = snprintf(sent_msg, sizeof(sent_msg), "Tx %X/", (unsigned int)request_id);
 80008b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008b4:	f107 0010 	add.w	r0, r7, #16
 80008b8:	4a29      	ldr	r2, [pc, #164]	@ (8000960 <send_can_request+0x264>)
 80008ba:	21ff      	movs	r1, #255	@ 0xff
 80008bc:	f003 fe2e 	bl	800451c <sniprintf>
 80008c0:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
        for (int j = 0; j < TxHeader[can_instance].DLC; j++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80008ca:	e022      	b.n	8000912 <send_can_request+0x216>
            offset += snprintf(&sent_msg[offset], sizeof(sent_msg) - offset, "%02X", TxData[can_instance][j]);
 80008cc:	f107 0210 	add.w	r2, r7, #16
 80008d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80008d4:	18d0      	adds	r0, r2, r3
 80008d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80008da:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 80008de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80008e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4a18      	ldr	r2, [pc, #96]	@ (800094c <send_can_request+0x250>)
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	441a      	add	r2, r3
 80008ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <send_can_request+0x268>)
 80008f8:	f003 fe10 	bl	800451c <sniprintf>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000902:	4413      	add	r3, r2
 8000904:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        for (int j = 0; j < TxHeader[can_instance].DLC; j++) {
 8000908:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800090c:	3301      	adds	r3, #1
 800090e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000916:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	490a      	ldr	r1, [pc, #40]	@ (8000948 <send_can_request+0x24c>)
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	440b      	add	r3, r1
 8000928:	3310      	adds	r3, #16
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000930:	429a      	cmp	r2, r3
 8000932:	d8cb      	bhi.n	80008cc <send_can_request+0x1d0>
        send_Console_Msg(sent_msg);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fd4f 	bl	80013dc <send_Console_Msg>
}
 800093e:	bf00      	nop
 8000940:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000944:	46bd      	mov	sp, r7
 8000946:	bdb0      	pop	{r4, r5, r7, pc}
 8000948:	20000338 	.word	0x20000338
 800094c:	200003b8 	.word	0x200003b8
 8000950:	200003a0 	.word	0x200003a0
 8000954:	200002bc 	.word	0x200002bc
 8000958:	08004ed4 	.word	0x08004ed4
 800095c:	200003c8 	.word	0x200003c8
 8000960:	08004ee4 	.word	0x08004ee4
 8000964:	08004eec 	.word	0x08004eec

08000968 <send_all_can_requests>:
/**
 * @brief Send CAN requests for all devices and their PIDs.
 *
 * Iterates through all configured devices and PIDs to send CAN requests.
 */
void send_all_can_requests(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
    for (uint8_t device_index = 0; device_index < CAN_DEVICE_COUNT; device_index++) {
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e020      	b.n	80009b6 <send_all_can_requests+0x4e>
        CANDeviceConfig *device = &can_devices[device_index];
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <send_all_can_requests+0x60>)
 800097a:	4413      	add	r3, r2
 800097c:	607b      	str	r3, [r7, #4]

        for (size_t pid_index = 0; pid_index < device->pid_count; pid_index++) {
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	e00f      	b.n	80009a4 <send_all_can_requests+0x3c>
            CANDevicePID *pid = &device->pids[pid_index];
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	215c      	movs	r1, #92	@ 0x5c
 800098c:	fb01 f303 	mul.w	r3, r1, r3
 8000990:	4413      	add	r3, r2
 8000992:	603b      	str	r3, [r7, #0]
            send_can_request(CAN_TRUCK, device, pid);
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff feaf 	bl	80006fc <send_can_request>
        for (size_t pid_index = 0; pid_index < device->pid_count; pid_index++) {
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	3301      	adds	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7b1b      	ldrb	r3, [r3, #12]
 80009a8:	461a      	mov	r2, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d3e9      	bcc.n	8000984 <send_all_can_requests+0x1c>
    for (uint8_t device_index = 0; device_index < CAN_DEVICE_COUNT; device_index++) {
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3301      	adds	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d9db      	bls.n	8000974 <send_all_can_requests+0xc>
        }
    }
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000170 	.word	0x20000170

080009cc <get_CANDeviceConfig_by_canid>:
 * Searches for a device configuration matching the given CAN ID.
 *
 * @param rx_id The received CAN ID.
 * @return CANDeviceConfig* Pointer to the matching device configuration, or NULL if not found.
 */
CANDeviceConfig *get_CANDeviceConfig_by_canid(uint32_t rx_id) {
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    for (uint8_t module_idx = 0; module_idx < CAN_DEVICE_COUNT; module_idx++) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e00f      	b.n	80009fa <get_CANDeviceConfig_by_canid+0x2e>
        CANDeviceConfig *module_config = &can_devices[module_idx];
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <get_CANDeviceConfig_by_canid+0x44>)
 80009e0:	4413      	add	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
        if (module_config->can_id == rx_id) {
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	889b      	ldrh	r3, [r3, #4]
 80009e8:	461a      	mov	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d101      	bne.n	80009f4 <get_CANDeviceConfig_by_canid+0x28>
            return module_config;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	e006      	b.n	8000a02 <get_CANDeviceConfig_by_canid+0x36>
    for (uint8_t module_idx = 0; module_idx < CAN_DEVICE_COUNT; module_idx++) {
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	3301      	adds	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d9ec      	bls.n	80009da <get_CANDeviceConfig_by_canid+0xe>
        }
    }
    return NULL;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000170 	.word	0x20000170

08000a14 <get_CANDevicePID_by_pid>:
 *
 * @param module Pointer to the CANDeviceConfig representing the device.
 * @param pid The PID to search for.
 * @return CANDevicePID* Pointer to the matching PID configuration, or NULL if not found.
 */
CANDevicePID *get_CANDevicePID_by_pid(CANDeviceConfig *module, uint16_t pid) {
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	807b      	strh	r3, [r7, #2]
    for (uint8_t pid_idx = 0; pid_idx < module->pid_count; pid_idx++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
 8000a24:	e014      	b.n	8000a50 <get_CANDevicePID_by_pid+0x3c>
        CANDevicePID *device_pid = &module->pids[pid_idx];
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	7dfb      	ldrb	r3, [r7, #23]
 8000a2c:	215c      	movs	r1, #92	@ 0x5c
 8000a2e:	fb01 f303 	mul.w	r3, r1, r3
 8000a32:	4413      	add	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        uint16_t module_pid = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	81fb      	strh	r3, [r7, #14]
        memcpy(&module_pid, ((uint8_t *)&pid), PID_BYTE_LENGTH);
 8000a3a:	887b      	ldrh	r3, [r7, #2]
 8000a3c:	81fb      	strh	r3, [r7, #14]
        if (module_pid == pid) {
 8000a3e:	89fa      	ldrh	r2, [r7, #14]
 8000a40:	887b      	ldrh	r3, [r7, #2]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d101      	bne.n	8000a4a <get_CANDevicePID_by_pid+0x36>
            return device_pid;
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	e008      	b.n	8000a5c <get_CANDevicePID_by_pid+0x48>
    for (uint8_t pid_idx = 0; pid_idx < module->pid_count; pid_idx++) {
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	75fb      	strb	r3, [r7, #23]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7b1b      	ldrb	r3, [r3, #12]
 8000a54:	7dfa      	ldrb	r2, [r7, #23]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3e5      	bcc.n	8000a26 <get_CANDevicePID_by_pid+0x12>
        }
    }
    return NULL;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <iterate_signals_for_changes>:
 * Iterates over the signals within a PID and checks for state changes based on the payload.
 *
 * @param device_pid Pointer to the CANDevicePID containing the signals.
 * @param payload The received payload data to compare against.
 */
void iterate_signals_for_changes(CANDevicePID *device_pid, uint32_t payload) {
 8000a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
    for (uint8_t signal_idx = 0; signal_idx < sizeof(device_pid->signals) / sizeof(device_pid->signals[0]); signal_idx++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e036      	b.n	8000ae8 <iterate_signals_for_changes+0x80>
        CANSignal *signal = &device_pid->signals[signal_idx];
 8000a7a:	7bfa      	ldrb	r2, [r7, #15]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	3308      	adds	r3, #8
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	60bb      	str	r3, [r7, #8]

        switch (signal->change_type) {
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d020      	beq.n	8000ad8 <iterate_signals_for_changes+0x70>
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	dc20      	bgt.n	8000adc <iterate_signals_for_changes+0x74>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <iterate_signals_for_changes+0x3c>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d01e      	beq.n	8000ae0 <iterate_signals_for_changes+0x78>
                break;
            case STATE_MULTIBYTE:
                // TODO: Implement STATE_MULTIBYTE condition
                break;
            default:
                break;
 8000aa2:	e01b      	b.n	8000adc <iterate_signals_for_changes+0x74>
                signal->data = (payload & bytes_to_uint32((uint8_t *)signal->change_data)) ? 1 : 0;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	4691      	mov	r9, r2
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	3309      	adds	r3, #9
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fdb9 	bl	8001628 <bytes_to_uint32>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	ea08 0402 	and.w	r4, r8, r2
 8000abe:	ea09 0503 	and.w	r5, r9, r3
 8000ac2:	ea44 0305 	orr.w	r3, r4, r5
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	611a      	str	r2, [r3, #16]
                break;
 8000ad6:	e004      	b.n	8000ae2 <iterate_signals_for_changes+0x7a>
                break;
 8000ad8:	bf00      	nop
 8000ada:	e002      	b.n	8000ae2 <iterate_signals_for_changes+0x7a>
                break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <iterate_signals_for_changes+0x7a>
                break;
 8000ae0:	bf00      	nop
    for (uint8_t signal_idx = 0; signal_idx < sizeof(device_pid->signals) / sizeof(device_pid->signals[0]); signal_idx++) {
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d9c5      	bls.n	8000a7a <iterate_signals_for_changes+0x12>
        }
    }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000afc <parse_rx_CAN_message>:
 * and processes the signals based on the payload.
 *
 * @param RAW_rx_id The received CAN ID.
 * @param RAW_rx_data_as_byte_array The received CAN data as a byte array.
 */
void parse_rx_CAN_message(uint32_t RAW_rx_id, uint8_t *RAW_rx_data_as_byte_array) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
    if (RAW_rx_id == CAN_ID_HEARTBEAT) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f240 529e 	movw	r2, #1438	@ 0x59e
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d03b      	beq.n	8000b88 <parse_rx_CAN_message+0x8c>
        return;
    }

    CANDeviceConfig *selected_can_device = get_CANDeviceConfig_by_canid(RAW_rx_id);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff5b 	bl	80009cc <get_CANDeviceConfig_by_canid>
 8000b16:	61f8      	str	r0, [r7, #28]
    if (selected_can_device == NULL) {
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d103      	bne.n	8000b26 <parse_rx_CAN_message+0x2a>
        User_Error_Handler(ERROR_CAN_MODULE_NOT_FOUND);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f000 f838 	bl	8000b94 <User_Error_Handler>
        return;
 8000b24:	e031      	b.n	8000b8a <parse_rx_CAN_message+0x8e>
    }

    uint32_t data = bytes_to_uint32(RAW_rx_data_as_byte_array);
 8000b26:	6838      	ldr	r0, [r7, #0]
 8000b28:	f000 fd7e 	bl	8001628 <bytes_to_uint32>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	460b      	mov	r3, r1
 8000b30:	4613      	mov	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
    uint16_t rx_pid = data & UINT16_PID_MASK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	837b      	strh	r3, [r7, #26]
    CANDevicePID *selected_pid = get_CANDevicePID_by_pid(selected_can_device, rx_pid);
 8000b38:	8b7b      	ldrh	r3, [r7, #26]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	69f8      	ldr	r0, [r7, #28]
 8000b3e:	f7ff ff69 	bl	8000a14 <get_CANDevicePID_by_pid>
 8000b42:	6178      	str	r0, [r7, #20]

    if (selected_pid == NULL) {
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d103      	bne.n	8000b52 <parse_rx_CAN_message+0x56>
        User_Error_Handler(ERROR_MODULE_PID_NOT_FOUND);
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f000 f822 	bl	8000b94 <User_Error_Handler>
        return;
 8000b50:	e01b      	b.n	8000b8a <parse_rx_CAN_message+0x8e>
    }

    uint8_t rx_data_length = data & UINT8_LENGTH_MASK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	74fb      	strb	r3, [r7, #19]
    uint32_t rx_payload = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]

    if (!IN_RANGE(rx_data_length, 0, MAX_PAYLOAD_LENGTH)) {
 8000b5a:	7cfb      	ldrb	r3, [r7, #19]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d904      	bls.n	8000b6a <parse_rx_CAN_message+0x6e>
        send_Console_Msg("Er data len out of range");
 8000b60:	480b      	ldr	r0, [pc, #44]	@ (8000b90 <parse_rx_CAN_message+0x94>)
 8000b62:	f000 fc3b 	bl	80013dc <send_Console_Msg>
        Error_Handler();
 8000b66:	f000 fa8f 	bl	8001088 <Error_Handler>
    }

    memcpy(&rx_payload, ((uint8_t *)&data) + DATA_PAYLOAD_START, rx_data_length);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	3304      	adds	r3, #4
 8000b70:	7cfa      	ldrb	r2, [r7, #19]
 8000b72:	f107 0008 	add.w	r0, r7, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	f003 fd54 	bl	8004624 <memcpy>
    iterate_signals_for_changes(selected_pid, rx_payload);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ff71 	bl	8000a68 <iterate_signals_for_changes>
 8000b86:	e000      	b.n	8000b8a <parse_rx_CAN_message+0x8e>
        return;
 8000b88:	bf00      	nop
}
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08004ef4 	.word	0x08004ef4

08000b94 <User_Error_Handler>:
#include <stdbool.h> // for boolean support in c
#include "error.h"
#include "ui.h"

void User_Error_Handler(uint8_t error_code)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0a4      	sub	sp, #144	@ 0x90
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	const char *error_prefix = "ER#";
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <User_Error_Handler+0xbc>)
 8000ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	char error_msg[MAX_ERROR_STRING_LENGTH];
	char error_msg_final[MAX_ERROR_STRING_LENGTH];
	bool call_main_error_handler = true;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	// clear error_msg buffer
	memset(error_msg, '\0', sizeof(error_msg));
 8000baa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bae:	223c      	movs	r2, #60	@ 0x3c
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fce6 	bl	8004584 <memset>
	memset(error_msg_final, '\0', sizeof(error_msg_final));
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	223c      	movs	r2, #60	@ 0x3c
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fcdf 	bl	8004584 <memset>

	switch (error_code)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d00d      	beq.n	8000be8 <User_Error_Handler+0x54>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dc17      	bgt.n	8000c00 <User_Error_Handler+0x6c>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d011      	beq.n	8000bf8 <User_Error_Handler+0x64>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d113      	bne.n	8000c00 <User_Error_Handler+0x6c>
	{
		case ERROR_CAN_MODULE_NOT_FOUND:
	    	snprintf(error_msg, MAX_ERROR_STRING_LENGTH, "CAN mod not found");
 8000bd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c54 <User_Error_Handler+0xc0>)
 8000bde:	213c      	movs	r1, #60	@ 0x3c
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fc9b 	bl	800451c <sniprintf>
			break;
 8000be6:	e012      	b.n	8000c0e <User_Error_Handler+0x7a>

		case ERROR_MODULE_PID_NOT_FOUND:
	    	snprintf(error_msg, MAX_ERROR_STRING_LENGTH, "PID not found");
 8000be8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bec:	4a1a      	ldr	r2, [pc, #104]	@ (8000c58 <User_Error_Handler+0xc4>)
 8000bee:	213c      	movs	r1, #60	@ 0x3c
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fc93 	bl	800451c <sniprintf>
			break;
 8000bf6:	e00a      	b.n	8000c0e <User_Error_Handler+0x7a>

		case ERROR_NO_ERROR:
			call_main_error_handler = false;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			break;
 8000bfe:	e006      	b.n	8000c0e <User_Error_Handler+0x7a>

		default:
			snprintf(error_msg, MAX_ERROR_STRING_LENGTH, "Unknown Err#");
 8000c00:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c04:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <User_Error_Handler+0xc8>)
 8000c06:	213c      	movs	r1, #60	@ 0x3c
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fc87 	bl	800451c <sniprintf>
	}

	// print the error string if not empty
	if (strlen(error_msg) != 0)
 8000c0e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d011      	beq.n	8000c3c <User_Error_Handler+0xa8>
	{
		snprintf(error_msg_final, MAX_ERROR_STRING_LENGTH, "%s#%u %s", error_prefix, (uint8_t)error_code, error_msg);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f107 0008 	add.w	r0, r7, #8
 8000c1e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <User_Error_Handler+0xcc>)
 8000c2c:	213c      	movs	r1, #60	@ 0x3c
 8000c2e:	f003 fc75 	bl	800451c <sniprintf>
		send_Console_Msg(error_msg_final);
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fbd0 	bl	80013dc <send_Console_Msg>
	}

	// This will halt operation
	if (call_main_error_handler)
 8000c3c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <User_Error_Handler+0xb4>
		Error_Handler();
 8000c44:	f000 fa20 	bl	8001088 <Error_Handler>
}
 8000c48:	bf00      	nop
 8000c4a:	3788      	adds	r7, #136	@ 0x88
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	080053e4 	.word	0x080053e4
 8000c54:	080053e8 	.word	0x080053e8
 8000c58:	080053fc 	.word	0x080053fc
 8000c5c:	0800540c 	.word	0x0800540c
 8000c60:	0800541c 	.word	0x0800541c

08000c64 <HAL_CAN_RxFifo0MsgPendingCallback>:
/*
 * FUNCTIONS
 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0c4      	sub	sp, #272	@ 0x110
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c72:	6018      	str	r0, [r3, #0]
	//send_Console_Msg("Rx INT");
    // Ensure this is the correct CAN instance
    if (hcan->Instance != CAN1)
 8000c74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2c      	ldr	r2, [pc, #176]	@ (8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d151      	bne.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
    {
        return;
    }
    // Retrieve the message from FIFO0
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader[CAN_TRUCK], RxData[CAN_TRUCK]) != HAL_OK)
 8000c86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c8a:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000c90:	4a2a      	ldr	r2, [pc, #168]	@ (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	6800      	ldr	r0, [r0, #0]
 8000c96:	f001 fb1d 	bl	80022d4 <HAL_CAN_GetRxMessage>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
    {
        send_Console_Msg("RX:ERR CAN_GetRxMessage");
 8000ca0:	4827      	ldr	r0, [pc, #156]	@ (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000ca2:	f000 fb9b 	bl	80013dc <send_Console_Msg>
    	// Log or handle error if message retrieval fails
        return;
 8000ca6:	e041      	b.n	8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
    }
    // Increment the receive counter
    rx_count[CAN_TRUCK]++;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a25      	ldr	r2, [pc, #148]	@ (8000d44 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cb0:	6013      	str	r3, [r2, #0]
    // Format the received message for display
    char received_msg[255];
    int offset = snprintf(received_msg, sizeof(received_msg), "Rx %X/", (unsigned int)RxHeader[CAN_TRUCK].StdId);
 8000cb2:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f107 0008 	add.w	r0, r7, #8
 8000cba:	4a23      	ldr	r2, [pc, #140]	@ (8000d48 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000cbc:	21ff      	movs	r1, #255	@ 0xff
 8000cbe:	f003 fc2d 	bl	800451c <sniprintf>
 8000cc2:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    for (int i = 0; i < RxHeader[CAN_TRUCK].DLC; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000ccc:	e01b      	b.n	8000d06 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
    {
        offset += snprintf(&received_msg[offset], sizeof(received_msg) - offset, "%02X", RxData[CAN_TRUCK][i]);
 8000cce:	f107 0208 	add.w	r2, r7, #8
 8000cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cd6:	18d0      	adds	r0, r2, r3
 8000cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cdc:	f1c3 01ff 	rsb	r1, r3, #255	@ 0xff
 8000ce0:	4a15      	ldr	r2, [pc, #84]	@ (8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000ce2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4a18      	ldr	r2, [pc, #96]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000cec:	f003 fc16 	bl	800451c <sniprintf>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cf6:	4413      	add	r3, r2
 8000cf8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for (int i = 0; i < RxHeader[CAN_TRUCK].DLC; i++)
 8000cfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000d00:	3301      	adds	r3, #1
 8000d02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d8dd      	bhi.n	8000cce <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
    }
    // Display the received message
    send_Console_Msg(received_msg);
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fb60 	bl	80013dc <send_Console_Msg>
    // Process the message to update the state

    parse_rx_CAN_message(RxHeader[CAN_TRUCK].StdId, RxData[CAN_TRUCK]);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4905      	ldr	r1, [pc, #20]	@ (8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff feea 	bl	8000afc <parse_rx_CAN_message>
 8000d28:	e000      	b.n	8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
        return;
 8000d2a:	bf00      	nop
}
 8000d2c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40006400 	.word	0x40006400
 8000d38:	200003a8 	.word	0x200003a8
 8000d3c:	20000368 	.word	0x20000368
 8000d40:	08005428 	.word	0x08005428
 8000d44:	200003d0 	.word	0x200003d0
 8000d48:	08005440 	.word	0x08005440
 8000d4c:	08005448 	.word	0x08005448

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 ff37 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f84b 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 f943 	bl	8000fe8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d62:	f000 f8b9 	bl	8000ed8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000d66:	f000 f911 	bl	8000f8c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init(); // init OLED screen
 8000d6a:	f000 fce1 	bl	8001730 <ssd1306_Init>
  init_OLED_Data(); // zero all string data
 8000d6e:	f000 faef 	bl	8001350 <init_OLED_Data>

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000d72:	481b      	ldr	r0, [pc, #108]	@ (8000de0 <main+0x90>)
 8000d74:	f001 f99a 	bl	80020ac <HAL_CAN_Start>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <main+0x46>
  {
	  send_Console_Msg("Err Init TRUCK CAN");
 8000d7e:	4819      	ldr	r0, [pc, #100]	@ (8000de4 <main+0x94>)
 8000d80:	f000 fb2c 	bl	80013dc <send_Console_Msg>
	  ssd1306_SetCursor(0, 8);  // Move down by the font height
 8000d84:	2108      	movs	r1, #8
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 fe86 	bl	8001a98 <ssd1306_SetCursor>
	  send_Console_Msg("Terminating.");
 8000d8c:	4816      	ldr	r0, [pc, #88]	@ (8000de8 <main+0x98>)
 8000d8e:	f000 fb25 	bl	80013dc <send_Console_Msg>
	  Error_Handler();
 8000d92:	f000 f979 	bl	8001088 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000d96:	2102      	movs	r1, #2
 8000d98:	4811      	ldr	r0, [pc, #68]	@ (8000de0 <main+0x90>)
 8000d9a:	f001 fbbd 	bl	8002518 <HAL_CAN_ActivateNotification>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00b      	beq.n	8000dbc <main+0x6c>
  {
	  send_Console_Msg("Err Init TRUCK Rx");
 8000da4:	4811      	ldr	r0, [pc, #68]	@ (8000dec <main+0x9c>)
 8000da6:	f000 fb19 	bl	80013dc <send_Console_Msg>
	  ssd1306_SetCursor(0, 8);  // Move down by the font height
 8000daa:	2108      	movs	r1, #8
 8000dac:	2000      	movs	r0, #0
 8000dae:	f000 fe73 	bl	8001a98 <ssd1306_SetCursor>
	  send_Console_Msg("Terminating.");
 8000db2:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <main+0x98>)
 8000db4:	f000 fb12 	bl	80013dc <send_Console_Msg>
	  Error_Handler();
 8000db8:	f000 f966 	bl	8001088 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      draw_screen_data_states(CAN_TRUCK);  // Update the screen with state information
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 fb81 	bl	80014c4 <draw_screen_data_states>

      // Check if 2 seconds have passed since the last CAN request
      uint32_t current_time = HAL_GetTick();  // Get the current system tick in milliseconds
 8000dc2:	f000 ff67 	bl	8001c94 <HAL_GetTick>
 8000dc6:	6078      	str	r0, [r7, #4]
      if ((current_time - last_can_request_time) >= CAN_REQUEST_INTERVAL)
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <main+0xa0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b31      	cmp	r3, #49	@ 0x31
 8000dd2:	d9f3      	bls.n	8000dbc <main+0x6c>
      {
    	  send_all_can_requests();
 8000dd4:	f7ff fdc8 	bl	8000968 <send_all_can_requests>
          last_can_request_time = current_time;  // Update the last request time
 8000dd8:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <main+0xa0>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
 8000dde:	e7ed      	b.n	8000dbc <main+0x6c>
 8000de0:	200002bc 	.word	0x200002bc
 8000de4:	08005450 	.word	0x08005450
 8000de8:	08005464 	.word	0x08005464
 8000dec:	08005474 	.word	0x08005474
 8000df0:	2000052c 	.word	0x2000052c

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	@ 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2234      	movs	r2, #52	@ 0x34
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fbbe 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <SystemClock_Config+0xdc>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed0 <SystemClock_Config+0xdc>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e28:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <SystemClock_Config+0xdc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <SystemClock_Config+0xe0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a25      	ldr	r2, [pc, #148]	@ (8000ed4 <SystemClock_Config+0xe0>)
 8000e3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <SystemClock_Config+0xe0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e68:	23b4      	movs	r3, #180	@ 0xb4
 8000e6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 f8af 	bl	8003fe0 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e88:	f000 f8fe 	bl	8001088 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e8c:	f002 fd22 	bl	80038d4 <HAL_PWREx_EnableOverDrive>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e96:	f000 f8f7 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	2105      	movs	r1, #5
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fd5b 	bl	8003974 <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ec4:	f000 f8e0 	bl	8001088 <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	@ 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ede:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000ee0:	4a28      	ldr	r2, [pc, #160]	@ (8000f84 <MX_CAN1_Init+0xac>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000ee4:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000ee6:	2212      	movs	r2, #18
 8000ee8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eea:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000ef8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000efc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f00:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f04:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f2a:	4815      	ldr	r0, [pc, #84]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f2c:	f000 fee2 	bl	8001cf4 <HAL_CAN_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f36:	f000 f8a7 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0;                       // Use filter bank 0
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;   // Use mask mode
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // Use 32-bit filter
 8000f42:	2301      	movs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;                // Set ID high to 0 (don't filter on specific IDs)
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;                 // No extended ID bits
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;            // Mask set to 0 (allows all IDs to pass)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;             // No extended mask bits
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // Assign to FIFO 0
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;            // Enable the filter
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <MX_CAN1_Init+0xa8>)
 8000f64:	f000 ffc2 	bl	8001eec <HAL_CAN_ConfigFilter>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <MX_CAN1_Init+0xa0>
      send_Console_Msg("Er: Applying filter");
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <MX_CAN1_Init+0xb0>)
 8000f70:	f000 fa34 	bl	80013dc <send_Console_Msg>
      Error_Handler();
 8000f74:	f000 f888 	bl	8001088 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200002bc 	.word	0x200002bc
 8000f84:	40006400 	.word	0x40006400
 8000f88:	08005488 	.word	0x08005488

08000f8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <MX_I2C1_Init+0x54>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <MX_I2C1_Init+0x58>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000faa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fca:	f001 ffd5 	bl	8002f78 <HAL_I2C_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd4:	f000 f858 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200002e4 	.word	0x200002e4
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	000186a0 	.word	0x000186a0

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_GPIO_Init+0x98>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a1e      	ldr	r2, [pc, #120]	@ (8001080 <MX_GPIO_Init+0x98>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_GPIO_Init+0x98>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_GPIO_Init+0x98>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <MX_GPIO_Init+0x98>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_GPIO_Init+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_GPIO_Init+0x98>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <MX_GPIO_Init+0x98>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_GPIO_Init+0x98>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2120      	movs	r1, #32
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <MX_GPIO_Init+0x9c>)
 8001058:	f001 ff5a 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800105c:	2320      	movs	r3, #32
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_GPIO_Init+0x9c>)
 8001074:	f001 fdb8 	bl	8002be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Adjust pin as needed
 8001090:	2120      	movs	r1, #32
 8001092:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <Error_Handler+0x1c>)
 8001094:	f001 ff55 	bl	8002f42 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);  // Blink with a 500ms delay
 8001098:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800109c:	f000 fe06 	bl	8001cac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Adjust pin as needed
 80010a0:	bf00      	nop
 80010a2:	e7f5      	b.n	8001090 <Error_Handler+0x8>
 80010a4:	40020000 	.word	0x40020000

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a21      	ldr	r2, [pc, #132]	@ (800119c <HAL_CAN_MspInit+0xa4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d13c      	bne.n	8001194 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_CAN_MspInit+0xa8>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <HAL_CAN_MspInit+0xa8>)
 8001124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_CAN_MspInit+0xa8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_CAN_MspInit+0xa8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a18      	ldr	r2, [pc, #96]	@ (80011a0 <HAL_CAN_MspInit+0xa8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <HAL_CAN_MspInit+0xa8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001152:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001164:	2309      	movs	r3, #9
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <HAL_CAN_MspInit+0xac>)
 8001170:	f001 fd3a 	bl	8002be8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2013      	movs	r0, #19
 800117a:	f001 fcfe 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800117e:	2013      	movs	r0, #19
 8001180:	f001 fd17 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2014      	movs	r0, #20
 800118a:	f001 fcf6 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800118e:	2014      	movs	r0, #20
 8001190:	f001 fd0f 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	@ 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40006400 	.word	0x40006400
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	@ (800122c <HAL_I2C_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12c      	bne.n	8001224 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <HAL_I2C_MspInit+0x8c>)
 8001204:	f001 fcf0 	bl	8002be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 8001212:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40005400 	.word	0x40005400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020400 	.word	0x40020400

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <NMI_Handler+0x4>

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <MemManage_Handler+0x4>

08001250 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <UsageFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 fced 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <CAN1_TX_IRQHandler+0x10>)
 800129e:	f001 f961 	bl	8002564 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002bc 	.word	0x200002bc

080012ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <CAN1_RX0_IRQHandler+0x10>)
 80012b2:	f001 f957 	bl	8002564 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002bc 	.word	0x200002bc

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	@ (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f003 f964 	bl	80045bc <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20020000 	.word	0x20020000
 8001320:	00000400 	.word	0x00000400
 8001324:	20000530 	.word	0x20000530
 8001328:	20000a88 	.word	0x20000a88

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <init_OLED_Data>:
#include "ui.h"
#include "ssd1306_fonts.h"
#include "utils.h"

void init_OLED_Data()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	screen_line = 0;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <init_OLED_Data+0x24>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
	memset(screen_data, 0, sizeof(screen_data));
 800135a:	22a8      	movs	r2, #168	@ 0xa8
 800135c:	2100      	movs	r1, #0
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <init_OLED_Data+0x28>)
 8001360:	f003 f910 	bl	8004584 <memset>
	memset(screen_data_states, 0, sizeof(screen_data_states));
 8001364:	22a8      	movs	r2, #168	@ 0xa8
 8001366:	2100      	movs	r1, #0
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <init_OLED_Data+0x2c>)
 800136a:	f003 f90b 	bl	8004584 <memset>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000528 	.word	0x20000528
 8001378:	200003d8 	.word	0x200003d8
 800137c:	20000480 	.word	0x20000480

08001380 <scroll_messages>:

void scroll_messages() {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
    // Shift all message lines up by one
    for (int i = 0; i < MESSAGE_LINES - 1; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	e017      	b.n	80013bc <scroll_messages+0x3c>
        strcpy(screen_data[STATE_LINES + i], screen_data[STATE_LINES + i + 1]);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1d1a      	adds	r2, r3, #4
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	00da      	lsls	r2, r3, #3
 8001398:	1ad2      	subs	r2, r2, r3
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <scroll_messages+0x54>)
 800139c:	18d0      	adds	r0, r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	1d5a      	adds	r2, r3, #5
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	00da      	lsls	r2, r3, #3
 80013aa:	1ad2      	subs	r2, r2, r3
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <scroll_messages+0x54>)
 80013ae:	4413      	add	r3, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f003 f92f 	bl	8004614 <strcpy>
    for (int i = 0; i < MESSAGE_LINES - 1; i++) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3301      	adds	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	dde4      	ble.n	800138c <scroll_messages+0xc>
    }
    // Clear the last line
    memset(screen_data[SCREEN_MAX_CHAR_LINES - 1], 0, sizeof(screen_data[SCREEN_MAX_CHAR_LINES - 1]));
 80013c2:	2215      	movs	r2, #21
 80013c4:	2100      	movs	r1, #0
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <scroll_messages+0x58>)
 80013c8:	f003 f8dc 	bl	8004584 <memset>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200003d8 	.word	0x200003d8
 80013d8:	2000046b 	.word	0x2000046b

080013dc <send_Console_Msg>:


void send_Console_Msg(char *msg) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    // Scroll if all message lines are filled
    if (screen_line >= MESSAGE_LINES) {
 80013e4:	4b19      	ldr	r3, [pc, #100]	@ (800144c <send_Console_Msg+0x70>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d904      	bls.n	80013f6 <send_Console_Msg+0x1a>
        scroll_messages();
 80013ec:	f7ff ffc8 	bl	8001380 <scroll_messages>
        screen_line = MESSAGE_LINES - 1; // Keep screen_line within MESSAGE_LINES
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <send_Console_Msg+0x70>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	701a      	strb	r2, [r3, #0]
    }

    // Copy the message to the appropriate line in screen_data
    strncpy(screen_data[STATE_LINES + screen_line], msg, sizeof(screen_data[0]) - 1);
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <send_Console_Msg+0x70>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	1d1a      	adds	r2, r3, #4
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00da      	lsls	r2, r3, #3
 8001404:	1ad2      	subs	r2, r2, r3
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <send_Console_Msg+0x74>)
 8001408:	4413      	add	r3, r2
 800140a:	2214      	movs	r2, #20
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 f8c0 	bl	8004594 <strncpy>
    screen_data[STATE_LINES + screen_line][sizeof(screen_data[0]) - 1] = '\0'; // Ensure null-termination
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <send_Console_Msg+0x70>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	490d      	ldr	r1, [pc, #52]	@ (8001450 <send_Console_Msg+0x74>)
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	00da      	lsls	r2, r3, #3
 8001424:	1ad2      	subs	r2, r2, r3
 8001426:	188b      	adds	r3, r1, r2
 8001428:	3314      	adds	r3, #20
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]

    // Update the screen with both states and messages
    draw_screen_data_states(CAN_TRUCK);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f848 	bl	80014c4 <draw_screen_data_states>
    display_messages();
 8001434:	f000 f80e 	bl	8001454 <display_messages>

    // Move to the next line for future messages
    screen_line++;
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <send_Console_Msg+0x70>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b02      	ldr	r3, [pc, #8]	@ (800144c <send_Console_Msg+0x70>)
 8001442:	701a      	strb	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000528 	.word	0x20000528
 8001450:	200003d8 	.word	0x200003d8

08001454 <display_messages>:

void display_messages() {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af02      	add	r7, sp, #8
    // Clear the entire bottom section where messages are displayed
    ssd1306_FillRectangle(0, STATE_LINES * SCREEN_FONT_HEIGHT, SSD1306_WIDTH, SSD1306_HEIGHT, Black);
 800145a:	2300      	movs	r3, #0
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2340      	movs	r3, #64	@ 0x40
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	2120      	movs	r1, #32
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fb2f 	bl	8001ac8 <ssd1306_FillRectangle>

    // Start from the line after the state info and print messages
    for (uint8_t i = 0; i < MESSAGE_LINES; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	e01b      	b.n	80014a8 <display_messages+0x54>
        uint8_t y_pos = (STATE_LINES + i) * SCREEN_FONT_HEIGHT;
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3304      	adds	r3, #4
 8001474:	b2db      	uxtb	r3, r3
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	71bb      	strb	r3, [r7, #6]
        ssd1306_SetCursor(0, y_pos);
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	4619      	mov	r1, r3
 800147e:	2000      	movs	r0, #0
 8001480:	f000 fb0a 	bl	8001a98 <ssd1306_SetCursor>
        ssd1306_WriteString(screen_data[STATE_LINES + i], Font_6x8, White);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	1d1a      	adds	r2, r3, #4
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00da      	lsls	r2, r3, #3
 8001490:	1ad2      	subs	r2, r2, r3
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <display_messages+0x68>)
 8001494:	18d0      	adds	r0, r2, r3
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <display_messages+0x6c>)
 8001498:	2201      	movs	r2, #1
 800149a:	9200      	str	r2, [sp, #0]
 800149c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149e:	f000 fad5 	bl	8001a4c <ssd1306_WriteString>
    for (uint8_t i = 0; i < MESSAGE_LINES; i++) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	3301      	adds	r3, #1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d9e0      	bls.n	8001470 <display_messages+0x1c>
    }

    ssd1306_UpdateScreen();  // Update the screen to reflect changes
 80014ae:	f000 f9c1 	bl	8001834 <ssd1306_UpdateScreen>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003d8 	.word	0x200003d8
 80014c0:	08005ad4 	.word	0x08005ad4

080014c4 <draw_screen_data_states>:

void draw_screen_data_states(CANInstance can_instance) {
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	b08d      	sub	sp, #52	@ 0x34
 80014c8:	af06      	add	r7, sp, #24
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
    // Clear the screen area for the state display
    ssd1306_FillRectangle(0, 0, SSD1306_WIDTH, STATE_LINES * SCREEN_FONT_HEIGHT, Black);
 80014ce:	2300      	movs	r3, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2320      	movs	r3, #32
 80014d4:	2280      	movs	r2, #128	@ 0x80
 80014d6:	2100      	movs	r1, #0
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 faf5 	bl	8001ac8 <ssd1306_FillRectangle>

    // Display BCM states (Brake Pedal, Reverse Light, Hazard Button)
    snprintf(screen_data_states[0], sizeof(screen_data_states[0]),
 80014de:	4b46      	ldr	r3, [pc, #280]	@ (80015f8 <draw_screen_data_states+0x134>)
 80014e0:	685e      	ldr	r6, [r3, #4]
 80014e2:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <draw_screen_data_states+0x134>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f8b0 	bl	800164c <tobinary>
 80014ec:	60b8      	str	r0, [r7, #8]
 80014ee:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <draw_screen_data_states+0x134>)
 80014f0:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <draw_screen_data_states+0x134>)
 80014f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f8a8 	bl	800164c <tobinary>
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	4b3e      	ldr	r3, [pc, #248]	@ (80015f8 <draw_screen_data_states+0x134>)
 8001500:	f8d3 50bc 	ldr.w	r5, [r3, #188]	@ 0xbc
 8001504:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <draw_screen_data_states+0x134>)
 8001506:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f89e 	bl	800164c <tobinary>
 8001510:	4603      	mov	r3, r0
 8001512:	9304      	str	r3, [sp, #16]
 8001514:	9503      	str	r5, [sp, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	9401      	str	r4, [sp, #4]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4633      	mov	r3, r6
 8001522:	4a36      	ldr	r2, [pc, #216]	@ (80015fc <draw_screen_data_states+0x138>)
 8001524:	2115      	movs	r1, #21
 8001526:	4836      	ldr	r0, [pc, #216]	@ (8001600 <draw_screen_data_states+0x13c>)
 8001528:	f002 fff8 	bl	800451c <sniprintf>
             bcm_pids[BCM_BRAKE_PEDAL].short_name, tobinary(bcm_pids[BCM_BRAKE_PEDAL].signals[0].data),
             bcm_pids[BCM_REVERSE_LIGHT].short_name, tobinary(bcm_pids[BCM_REVERSE_LIGHT].signals[0].data),
             bcm_pids[BCM_HAZARD_BUTTON].short_name, tobinary(bcm_pids[BCM_HAZARD_BUTTON].signals[0].data));

    // Display SCCM left-side signals (Left Turn Signal, Left Lane Change)
    snprintf(screen_data_states[1], sizeof(screen_data_states[1]),
 800152c:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <draw_screen_data_states+0x140>)
 800152e:	691d      	ldr	r5, [r3, #16]
 8001530:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <draw_screen_data_states+0x140>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f889 	bl	800164c <tobinary>
 800153a:	4606      	mov	r6, r0
 800153c:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <draw_screen_data_states+0x140>)
 800153e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001540:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <draw_screen_data_states+0x140>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f881 	bl	800164c <tobinary>
 800154a:	4603      	mov	r3, r0
 800154c:	9302      	str	r3, [sp, #8]
 800154e:	9401      	str	r4, [sp, #4]
 8001550:	9600      	str	r6, [sp, #0]
 8001552:	462b      	mov	r3, r5
 8001554:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <draw_screen_data_states+0x144>)
 8001556:	2115      	movs	r1, #21
 8001558:	482c      	ldr	r0, [pc, #176]	@ (800160c <draw_screen_data_states+0x148>)
 800155a:	f002 ffdf 	bl	800451c <sniprintf>
             "%s:%d %s:%d",
             sccm_pids[0].signals[SCCM_LEFT_TURN].short_name, tobinary(sccm_pids[0].signals[SCCM_LEFT_TURN].data),
             sccm_pids[0].signals[SCCM_LEFT_CHANGE].short_name, tobinary(sccm_pids[0].signals[SCCM_LEFT_CHANGE].data));

    // Display SCCM right-side signals (Right Turn Signal, Right Lane Change)
    snprintf(screen_data_states[2], sizeof(screen_data_states[2]),
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <draw_screen_data_states+0x140>)
 8001560:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8001562:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <draw_screen_data_states+0x140>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f870 	bl	800164c <tobinary>
 800156c:	4606      	mov	r6, r0
 800156e:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <draw_screen_data_states+0x140>)
 8001570:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <draw_screen_data_states+0x140>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f868 	bl	800164c <tobinary>
 800157c:	4603      	mov	r3, r0
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	9401      	str	r4, [sp, #4]
 8001582:	9600      	str	r6, [sp, #0]
 8001584:	462b      	mov	r3, r5
 8001586:	4a20      	ldr	r2, [pc, #128]	@ (8001608 <draw_screen_data_states+0x144>)
 8001588:	2115      	movs	r1, #21
 800158a:	4821      	ldr	r0, [pc, #132]	@ (8001610 <draw_screen_data_states+0x14c>)
 800158c:	f002 ffc6 	bl	800451c <sniprintf>
             "%s:%d %s:%d",
             sccm_pids[0].signals[SCCM_RIGHT_TURN].short_name, tobinary(sccm_pids[0].signals[SCCM_RIGHT_TURN].data),
             sccm_pids[0].signals[SCCM_RIGHT_CHANGE].short_name, tobinary(sccm_pids[0].signals[SCCM_RIGHT_CHANGE].data));

    // Display transmission and reception counts
    snprintf(screen_data_states[3], sizeof(screen_data_states[3]), "Tx:%lu Rx:%lu",
 8001590:	7bfb      	ldrb	r3, [r7, #15]
             (unsigned long)tx_count[can_instance], (unsigned long)rx_count[can_instance]);
 8001592:	4a20      	ldr	r2, [pc, #128]	@ (8001614 <draw_screen_data_states+0x150>)
 8001594:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    snprintf(screen_data_states[3], sizeof(screen_data_states[3]), "Tx:%lu Rx:%lu",
 8001598:	7bfb      	ldrb	r3, [r7, #15]
             (unsigned long)tx_count[can_instance], (unsigned long)rx_count[can_instance]);
 800159a:	491f      	ldr	r1, [pc, #124]	@ (8001618 <draw_screen_data_states+0x154>)
 800159c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    snprintf(screen_data_states[3], sizeof(screen_data_states[3]), "Tx:%lu Rx:%lu",
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	4613      	mov	r3, r2
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <draw_screen_data_states+0x158>)
 80015a6:	2115      	movs	r1, #21
 80015a8:	481d      	ldr	r0, [pc, #116]	@ (8001620 <draw_screen_data_states+0x15c>)
 80015aa:	f002 ffb7 	bl	800451c <sniprintf>

    // Write each line to the screen
    for (uint8_t i = 0; i < STATE_LINES; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	75fb      	strb	r3, [r7, #23]
 80015b2:	e017      	b.n	80015e4 <draw_screen_data_states+0x120>
        ssd1306_SetCursor(0, i * SCREEN_FONT_HEIGHT);
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 fa6b 	bl	8001a98 <ssd1306_SetCursor>
        ssd1306_WriteString(screen_data_states[i], Font_6x8, White);
 80015c2:	7dfa      	ldrb	r2, [r7, #23]
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	00da      	lsls	r2, r3, #3
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <draw_screen_data_states+0x13c>)
 80015d0:	18d0      	adds	r0, r2, r3
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <draw_screen_data_states+0x160>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	9200      	str	r2, [sp, #0]
 80015d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015da:	f000 fa37 	bl	8001a4c <ssd1306_WriteString>
    for (uint8_t i = 0; i < STATE_LINES; i++) {
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	3301      	adds	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d9e4      	bls.n	80015b4 <draw_screen_data_states+0xf0>
    }

    // Update the screen to display changes
    ssd1306_UpdateScreen();
 80015ea:	f000 f923 	bl	8001834 <ssd1306_UpdateScreen>
}
 80015ee:	bf00      	nop
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000
 80015fc:	0800549c 	.word	0x0800549c
 8001600:	20000480 	.word	0x20000480
 8001604:	20000114 	.word	0x20000114
 8001608:	080054b0 	.word	0x080054b0
 800160c:	20000495 	.word	0x20000495
 8001610:	200004aa 	.word	0x200004aa
 8001614:	200003c8 	.word	0x200003c8
 8001618:	200003d0 	.word	0x200003d0
 800161c:	080054bc 	.word	0x080054bc
 8001620:	200004bf 	.word	0x200004bf
 8001624:	08005ad4 	.word	0x08005ad4

08001628 <bytes_to_uint32>:

#include <stdint.h>
#include <stdio.h>

uint64_t bytes_to_uint32(uint8_t *bytes)
{
 8001628:	b4b0      	push	{r4, r5, r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    return __builtin_bswap32(*(uint32_t *)bytes);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	ba1b      	rev	r3, r3
 8001636:	2200      	movs	r2, #0
 8001638:	461c      	mov	r4, r3
 800163a:	4615      	mov	r5, r2
 800163c:	4622      	mov	r2, r4
 800163e:	462b      	mov	r3, r5
}
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bcb0      	pop	{r4, r5, r7}
 800164a:	4770      	bx	lr

0800164c <tobinary>:
uint16_t bytes_to_uint16(uint8_t high_byte, uint8_t low_byte) {
    return ((uint16_t)high_byte << 8) | (uint16_t)low_byte;
}

int tobinary(uint32_t i)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (i > 0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <tobinary+0x12>
		return 1;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <tobinary+0x14>
	return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001670:	f7ff fe5c 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	@ (80016b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800169a:	f002 ff95 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff fb57 	bl	8000d50 <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 80016b0:	08005b24 	.word	0x08005b24
  ldr r2, =_sbss
 80016b4:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80016b8:	20000a88 	.word	0x20000a88

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>

080016be <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	2301      	movs	r3, #1
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	2200      	movs	r2, #0
 80016e8:	2178      	movs	r1, #120	@ 0x78
 80016ea:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <ssd1306_WriteCommand+0x2c>)
 80016ec:	f001 fd88 	bl	8003200 <HAL_I2C_Mem_Write>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200002e4 	.word	0x200002e4

080016fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af04      	add	r7, sp, #16
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	f04f 32ff 	mov.w	r2, #4294967295
 800170e:	9202      	str	r2, [sp, #8]
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	2240      	movs	r2, #64	@ 0x40
 800171a:	2178      	movs	r1, #120	@ 0x78
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <ssd1306_WriteData+0x30>)
 800171e:	f001 fd6f 	bl	8003200 <HAL_I2C_Mem_Write>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002e4 	.word	0x200002e4

08001730 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001734:	f7ff ffc3 	bl	80016be <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001738:	2064      	movs	r0, #100	@ 0x64
 800173a:	f000 fab7 	bl	8001cac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800173e:	2000      	movs	r0, #0
 8001740:	f000 fa24 	bl	8001b8c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001744:	2020      	movs	r0, #32
 8001746:	f7ff ffc1 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff ffbe 	bl	80016cc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001750:	20b0      	movs	r0, #176	@ 0xb0
 8001752:	f7ff ffbb 	bl	80016cc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001756:	20c8      	movs	r0, #200	@ 0xc8
 8001758:	f7ff ffb8 	bl	80016cc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffb5 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001762:	2010      	movs	r0, #16
 8001764:	f7ff ffb2 	bl	80016cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001768:	2040      	movs	r0, #64	@ 0x40
 800176a:	f7ff ffaf 	bl	80016cc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800176e:	20ff      	movs	r0, #255	@ 0xff
 8001770:	f000 f9f8 	bl	8001b64 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001774:	20a1      	movs	r0, #161	@ 0xa1
 8001776:	f7ff ffa9 	bl	80016cc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800177a:	20a6      	movs	r0, #166	@ 0xa6
 800177c:	f7ff ffa6 	bl	80016cc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001780:	20a8      	movs	r0, #168	@ 0xa8
 8001782:	f7ff ffa3 	bl	80016cc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001786:	203f      	movs	r0, #63	@ 0x3f
 8001788:	f7ff ffa0 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800178c:	20a4      	movs	r0, #164	@ 0xa4
 800178e:	f7ff ff9d 	bl	80016cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001792:	20d3      	movs	r0, #211	@ 0xd3
 8001794:	f7ff ff9a 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ff97 	bl	80016cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800179e:	20d5      	movs	r0, #213	@ 0xd5
 80017a0:	f7ff ff94 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017a4:	20f0      	movs	r0, #240	@ 0xf0
 80017a6:	f7ff ff91 	bl	80016cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017aa:	20d9      	movs	r0, #217	@ 0xd9
 80017ac:	f7ff ff8e 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017b0:	2022      	movs	r0, #34	@ 0x22
 80017b2:	f7ff ff8b 	bl	80016cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017b6:	20da      	movs	r0, #218	@ 0xda
 80017b8:	f7ff ff88 	bl	80016cc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80017bc:	2012      	movs	r0, #18
 80017be:	f7ff ff85 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017c2:	20db      	movs	r0, #219	@ 0xdb
 80017c4:	f7ff ff82 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017c8:	2020      	movs	r0, #32
 80017ca:	f7ff ff7f 	bl	80016cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017ce:	208d      	movs	r0, #141	@ 0x8d
 80017d0:	f7ff ff7c 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017d4:	2014      	movs	r0, #20
 80017d6:	f7ff ff79 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 f9d6 	bl	8001b8c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f000 f80f 	bl	8001804 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80017e6:	f000 f825 	bl	8001834 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <ssd1306_Init+0xd0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <ssd1306_Init+0xd0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80017f6:	4b02      	ldr	r3, [pc, #8]	@ (8001800 <ssd1306_Init+0xd0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	711a      	strb	r2, [r3, #4]
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000934 	.word	0x20000934

08001804 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <ssd1306_Fill+0x14>
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <ssd1306_Fill+0x16>
 8001818:	23ff      	movs	r3, #255	@ 0xff
 800181a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800181e:	4619      	mov	r1, r3
 8001820:	4803      	ldr	r0, [pc, #12]	@ (8001830 <ssd1306_Fill+0x2c>)
 8001822:	f002 feaf 	bl	8004584 <memset>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000534 	.word	0x20000534

08001834 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800183a:	2300      	movs	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e016      	b.n	800186e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3b50      	subs	r3, #80	@ 0x50
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff40 	bl	80016cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff ff3d 	bl	80016cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001852:	2010      	movs	r0, #16
 8001854:	f7ff ff3a 	bl	80016cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <ssd1306_UpdateScreen+0x4c>)
 800185e:	4413      	add	r3, r2
 8001860:	2180      	movs	r1, #128	@ 0x80
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff4a 	bl	80016fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	3301      	adds	r3, #1
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b07      	cmp	r3, #7
 8001872:	d9e5      	bls.n	8001840 <ssd1306_UpdateScreen+0xc>
    }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000534 	.word	0x20000534

08001884 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	460b      	mov	r3, r1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db3d      	blt.n	800191a <ssd1306_DrawPixel+0x96>
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80018a2:	d83a      	bhi.n	800191a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d11a      	bne.n	80018e0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	b2d8      	uxtb	r0, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	01db      	lsls	r3, r3, #7
 80018b6:	4413      	add	r3, r2
 80018b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001928 <ssd1306_DrawPixel+0xa4>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	b25a      	sxtb	r2, r3
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b259      	sxtb	r1, r3
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4603      	mov	r3, r0
 80018d4:	01db      	lsls	r3, r3, #7
 80018d6:	4413      	add	r3, r2
 80018d8:	b2c9      	uxtb	r1, r1
 80018da:	4a13      	ldr	r2, [pc, #76]	@ (8001928 <ssd1306_DrawPixel+0xa4>)
 80018dc:	54d1      	strb	r1, [r2, r3]
 80018de:	e01d      	b.n	800191c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	4413      	add	r3, r2
 80018ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <ssd1306_DrawPixel+0xa4>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	2101      	movs	r1, #1
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	b25b      	sxtb	r3, r3
 8001906:	4013      	ands	r3, r2
 8001908:	b259      	sxtb	r1, r3
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4603      	mov	r3, r0
 800190e:	01db      	lsls	r3, r3, #7
 8001910:	4413      	add	r3, r2
 8001912:	b2c9      	uxtb	r1, r1
 8001914:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <ssd1306_DrawPixel+0xa4>)
 8001916:	54d1      	strb	r1, [r2, r3]
 8001918:	e000      	b.n	800191c <ssd1306_DrawPixel+0x98>
        return;
 800191a:	bf00      	nop
    }
}
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000534 	.word	0x20000534

0800192c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4604      	mov	r4, r0
 8001934:	4638      	mov	r0, r7
 8001936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800193a:	4623      	mov	r3, r4
 800193c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d902      	bls.n	800194a <ssd1306_WriteChar+0x1e>
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b7e      	cmp	r3, #126	@ 0x7e
 8001948:	d901      	bls.n	800194e <ssd1306_WriteChar+0x22>
        return 0;
 800194a:	2300      	movs	r3, #0
 800194c:	e077      	b.n	8001a3e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	783b      	ldrb	r3, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	2b80      	cmp	r3, #128	@ 0x80
 800195a:	dc06      	bgt.n	800196a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800195c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 800195e:	885b      	ldrh	r3, [r3, #2]
 8001960:	461a      	mov	r2, r3
 8001962:	787b      	ldrb	r3, [r7, #1]
 8001964:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001966:	2b40      	cmp	r3, #64	@ 0x40
 8001968:	dd01      	ble.n	800196e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800196a:	2300      	movs	r3, #0
 800196c:	e067      	b.n	8001a3e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e04e      	b.n	8001a12 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	3b20      	subs	r3, #32
 800197a:	7879      	ldrb	r1, [r7, #1]
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4619      	mov	r1, r3
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	440b      	add	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	e036      	b.n	8001a02 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80019a4:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b2d8      	uxtb	r0, r3
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 80019b4:	885b      	ldrh	r3, [r3, #2]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff ff5d 	bl	8001884 <ssd1306_DrawPixel>
 80019ca:	e017      	b.n	80019fc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80019cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	b2d8      	uxtb	r0, r3
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 80019dc:	885b      	ldrh	r3, [r3, #2]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b2d9      	uxtb	r1, r3
 80019e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	f7ff ff44 	bl	8001884 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	783b      	ldrb	r3, [r7, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d3c3      	bcc.n	8001994 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	787b      	ldrb	r3, [r7, #1]
 8001a14:	461a      	mov	r2, r3
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d3ab      	bcc.n	8001974 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d005      	beq.n	8001a32 <ssd1306_WriteChar+0x106>
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	3a20      	subs	r2, #32
 8001a2c:	440a      	add	r2, r1
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	e000      	b.n	8001a34 <ssd1306_WriteChar+0x108>
 8001a32:	783a      	ldrb	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <ssd1306_WriteChar+0x11c>)
 8001a3a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	@ 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000934 	.word	0x20000934

08001a4c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	4638      	mov	r0, r7
 8001a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001a5a:	e013      	b.n	8001a84 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	7818      	ldrb	r0, [r3, #0]
 8001a60:	7e3b      	ldrb	r3, [r7, #24]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	463b      	mov	r3, r7
 8001a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a68:	f7ff ff60 	bl	800192c <ssd1306_WriteChar>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d002      	beq.n	8001a7e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	e008      	b.n	8001a90 <ssd1306_WriteString+0x44>
        }
        str++;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e7      	bne.n	8001a5c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <ssd1306_SetCursor+0x2c>)
 8001aae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <ssd1306_SetCursor+0x2c>)
 8001ab6:	805a      	strh	r2, [r3, #2]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	20000934 	.word	0x20000934

08001ac8 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	4603      	mov	r3, r0
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	717b      	strb	r3, [r7, #5]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	4293      	cmp	r3, r2
 8001aec:	bf28      	it	cs
 8001aee:	4613      	movcs	r3, r2
 8001af0:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001af2:	797a      	ldrb	r2, [r7, #5]
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4293      	cmp	r3, r2
 8001af8:	bf38      	it	cc
 8001afa:	4613      	movcc	r3, r2
 8001afc:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001afe:	79ba      	ldrb	r2, [r7, #6]
 8001b00:	793b      	ldrb	r3, [r7, #4]
 8001b02:	4293      	cmp	r3, r2
 8001b04:	bf28      	it	cs
 8001b06:	4613      	movcs	r3, r2
 8001b08:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001b0a:	793a      	ldrb	r2, [r7, #4]
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	bf38      	it	cc
 8001b12:	4613      	movcc	r3, r2
 8001b14:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e017      	b.n	8001b4c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b1c:	7b7b      	ldrb	r3, [r7, #13]
 8001b1e:	73bb      	strb	r3, [r7, #14]
 8001b20:	e009      	b.n	8001b36 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001b22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b26:	7bf9      	ldrb	r1, [r7, #15]
 8001b28:	7bbb      	ldrb	r3, [r7, #14]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff feaa 	bl	8001884 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73bb      	strb	r3, [r7, #14]
 8001b36:	7bba      	ldrb	r2, [r7, #14]
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d803      	bhi.n	8001b46 <ssd1306_FillRectangle+0x7e>
 8001b3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	daed      	bge.n	8001b22 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	7abb      	ldrb	r3, [r7, #10]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d803      	bhi.n	8001b5c <ssd1306_FillRectangle+0x94>
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b58:	d9e0      	bls.n	8001b1c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
}
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b6e:	2381      	movs	r3, #129	@ 0x81
 8001b70:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fda9 	bl	80016cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fda5 	bl	80016cc <ssd1306_WriteCommand>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b9c:	23af      	movs	r3, #175	@ 0xaf
 8001b9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <ssd1306_SetDisplayOn+0x38>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	715a      	strb	r2, [r3, #5]
 8001ba6:	e004      	b.n	8001bb2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ba8:	23ae      	movs	r3, #174	@ 0xae
 8001baa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <ssd1306_SetDisplayOn+0x38>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fd89 	bl	80016cc <ssd1306_WriteCommand>
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000934 	.word	0x20000934

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <HAL_Init+0x40>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_Init+0x40>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_Init+0x40>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 ffb7 	bl	8002b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fa54 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 ffcf 	bl	8002bce <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 ff97 	bl	8002b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000244 	.word	0x20000244
 8001c64:	2000024c 	.word	0x2000024c
 8001c68:	20000248 	.word	0x20000248

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2000024c 	.word	0x2000024c
 8001c90:	2000093c 	.word	0x2000093c

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2000093c 	.word	0x2000093c

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000024c 	.word	0x2000024c

08001cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ed      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff f9f0 	bl	80010f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff ffb4 	bl	8001c94 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff ffb0 	bl	8001c94 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c5      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0e5      	beq.n	8001d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0202 	bic.w	r2, r2, #2
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff ff8e 	bl	8001c94 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	e012      	b.n	8001da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7c:	f7ff ff8a 	bl	8001c94 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d90b      	bls.n	8001da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09f      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e9b      	ldrb	r3, [r3, #26]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0220 	bic.w	r2, r2, #32
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7edb      	ldrb	r3, [r3, #27]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f1b      	ldrb	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7f5b      	ldrb	r3, [r3, #29]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d003      	beq.n	8001f12 <HAL_CAN_ConfigFilter+0x26>
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	f040 80be 	bne.w	800208e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f12:	4b65      	ldr	r3, [pc, #404]	@ (80020a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f14:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f2c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	431a      	orrs	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d123      	bne.n	8001fbc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3248      	adds	r2, #72	@ 0x48
 8001f9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fb2:	6979      	ldr	r1, [r7, #20]
 8001fb4:	3348      	adds	r3, #72	@ 0x48
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d122      	bne.n	800200a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fe4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3248      	adds	r2, #72	@ 0x48
 8001fea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ffe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002000:	6979      	ldr	r1, [r7, #20]
 8002002:	3348      	adds	r3, #72	@ 0x48
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002024:	e007      	b.n	8002036 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	401a      	ands	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002050:	e007      	b.n	8002062 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002080:	f023 0201 	bic.w	r2, r3, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e006      	b.n	800209c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40006400 	.word	0x40006400

080020ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d12e      	bne.n	800211e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020d8:	f7ff fddc 	bl	8001c94 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020de:	e012      	b.n	8002106 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020e0:	f7ff fdd8 	bl	8001c94 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d90b      	bls.n	8002106 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2205      	movs	r2, #5
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e012      	b.n	800212c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e5      	bne.n	80020e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e006      	b.n	800212c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002148:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d003      	beq.n	8002160 <HAL_CAN_AddTxMessage+0x2c>
 8002158:	7ffb      	ldrb	r3, [r7, #31]
 800215a:	2b02      	cmp	r3, #2
 800215c:	f040 80ad 	bne.w	80022ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8095 	beq.w	80022aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	0e1b      	lsrs	r3, r3, #24
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800218a:	2201      	movs	r2, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	6809      	ldr	r1, [r1, #0]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3318      	adds	r3, #24
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	440b      	add	r3, r1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e00f      	b.n	80021d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3318      	adds	r3, #24
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	440b      	add	r3, r1
 80021d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3318      	adds	r3, #24
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	440b      	add	r3, r1
 80021e8:	3304      	adds	r3, #4
 80021ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	7d1b      	ldrb	r3, [r3, #20]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d111      	bne.n	8002218 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3318      	adds	r3, #24
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6811      	ldr	r1, [r2, #0]
 8002208:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3318      	adds	r3, #24
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	440b      	add	r3, r1
 8002214:	3304      	adds	r3, #4
 8002216:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3307      	adds	r3, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	061a      	lsls	r2, r3, #24
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3306      	adds	r3, #6
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3305      	adds	r3, #5
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	4313      	orrs	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	3204      	adds	r2, #4
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	4610      	mov	r0, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	6811      	ldr	r1, [r2, #0]
 8002240:	ea43 0200 	orr.w	r2, r3, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	440b      	add	r3, r1
 800224a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800224e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3303      	adds	r3, #3
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	061a      	lsls	r2, r3, #24
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3302      	adds	r3, #2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	041b      	lsls	r3, r3, #16
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3301      	adds	r3, #1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	4313      	orrs	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	4610      	mov	r0, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6811      	ldr	r1, [r2, #0]
 8002276:	ea43 0200 	orr.w	r2, r3, r0
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002284:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3318      	adds	r3, #24
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	6811      	ldr	r1, [r2, #0]
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3318      	adds	r3, #24
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	440b      	add	r3, r1
 80022a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e00e      	b.n	80022c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e006      	b.n	80022c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
  }
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3724      	adds	r7, #36	@ 0x24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d003      	beq.n	80022f8 <HAL_CAN_GetRxMessage+0x24>
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f040 8103 	bne.w	80024fe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d116      	bne.n	800233a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0f7      	b.n	800250c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d107      	bne.n	800233a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0e8      	b.n	800250c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	331b      	adds	r3, #27
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0204 	and.w	r2, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10c      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	331b      	adds	r3, #27
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0d5b      	lsrs	r3, r3, #21
 8002368:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e00b      	b.n	800238a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	331b      	adds	r3, #27
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	331b      	adds	r3, #27
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0202 	and.w	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	331b      	adds	r3, #27
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2208      	movs	r2, #8
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	e00b      	b.n	80023d8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	331b      	adds	r3, #27
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	3304      	adds	r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 020f 	and.w	r2, r3, #15
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	331b      	adds	r3, #27
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	331b      	adds	r3, #27
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	4413      	add	r3, r2
 8002428:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0a1a      	lsrs	r2, r3, #8
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4413      	add	r3, r2
 8002442:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0c1a      	lsrs	r2, r3, #16
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	3302      	adds	r3, #2
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0e1a      	lsrs	r2, r3, #24
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	3303      	adds	r3, #3
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	3304      	adds	r3, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0a1a      	lsrs	r2, r3, #8
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	3305      	adds	r3, #5
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0c1a      	lsrs	r2, r3, #16
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3306      	adds	r3, #6
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e1a      	lsrs	r2, r3, #24
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3307      	adds	r3, #7
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d108      	bne.n	80024ea <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	e007      	b.n	80024fa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0220 	orr.w	r2, r2, #32
 80024f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e006      	b.n	800250c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
  }
}
 800250c:	4618      	mov	r0, r3
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002528:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d002      	beq.n	8002536 <HAL_CAN_ActivateNotification+0x1e>
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d109      	bne.n	800254a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6959      	ldr	r1, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e006      	b.n	8002558 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d07c      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2201      	movs	r2, #1
 80025ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f983 	bl	80028d2 <HAL_CAN_TxMailbox0CompleteCallback>
 80025cc:	e016      	b.n	80025fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e0:	e00c      	b.n	80025fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f4:	e002      	b.n	80025fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f989 	bl	800290e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d024      	beq.n	8002650 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800260e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f963 	bl	80028e6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002620:	e016      	b.n	8002650 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
 8002634:	e00c      	b.n	8002650 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
 8002648:	e002      	b.n	8002650 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f969 	bl	8002922 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d024      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002662:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f943 	bl	80028fa <HAL_CAN_TxMailbox2CompleteCallback>
 8002674:	e016      	b.n	80026a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	e00c      	b.n	80026a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
 800269c:	e002      	b.n	80026a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f949 	bl	8002936 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2210      	movs	r2, #16
 80026c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2208      	movs	r2, #8
 80026e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f930 	bl	800294a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe faae 	bl	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2210      	movs	r2, #16
 800272a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f912 	bl	8002972 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8f9 	bl	800295e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2210      	movs	r2, #16
 8002786:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8fc 	bl	8002986 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2208      	movs	r2, #8
 80027a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8f5 	bl	800299a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d07b      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d072      	beq.n	80028aa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	f043 0302 	orr.w	r3, r3, #2
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800281e:	2b00      	cmp	r3, #0
 8002820:	d043      	beq.n	80028aa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d03e      	beq.n	80028aa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002832:	2b60      	cmp	r3, #96	@ 0x60
 8002834:	d02b      	beq.n	800288e <HAL_CAN_IRQHandler+0x32a>
 8002836:	2b60      	cmp	r3, #96	@ 0x60
 8002838:	d82e      	bhi.n	8002898 <HAL_CAN_IRQHandler+0x334>
 800283a:	2b50      	cmp	r3, #80	@ 0x50
 800283c:	d022      	beq.n	8002884 <HAL_CAN_IRQHandler+0x320>
 800283e:	2b50      	cmp	r3, #80	@ 0x50
 8002840:	d82a      	bhi.n	8002898 <HAL_CAN_IRQHandler+0x334>
 8002842:	2b40      	cmp	r3, #64	@ 0x40
 8002844:	d019      	beq.n	800287a <HAL_CAN_IRQHandler+0x316>
 8002846:	2b40      	cmp	r3, #64	@ 0x40
 8002848:	d826      	bhi.n	8002898 <HAL_CAN_IRQHandler+0x334>
 800284a:	2b30      	cmp	r3, #48	@ 0x30
 800284c:	d010      	beq.n	8002870 <HAL_CAN_IRQHandler+0x30c>
 800284e:	2b30      	cmp	r3, #48	@ 0x30
 8002850:	d822      	bhi.n	8002898 <HAL_CAN_IRQHandler+0x334>
 8002852:	2b10      	cmp	r3, #16
 8002854:	d002      	beq.n	800285c <HAL_CAN_IRQHandler+0x2f8>
 8002856:	2b20      	cmp	r3, #32
 8002858:	d005      	beq.n	8002866 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800285a:	e01d      	b.n	8002898 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002864:	e019      	b.n	800289a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800286e:	e014      	b.n	800289a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	f043 0320 	orr.w	r3, r3, #32
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002878:	e00f      	b.n	800289a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002882:	e00a      	b.n	800289a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800288c:	e005      	b.n	800289a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002896:	e000      	b.n	800289a <HAL_CAN_IRQHandler+0x336>
            break;
 8002898:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2204      	movs	r2, #4
 80028b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f872 	bl	80029ae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	@ 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <__NVIC_GetPriorityGrouping+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db0b      	blt.n	8002a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4907      	ldr	r1, [pc, #28]	@ (8002a60 <__NVIC_EnableIRQ+0x38>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e100 	.word	0xe000e100

08002a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	db0a      	blt.n	8002a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <__NVIC_SetPriority+0x4c>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	0112      	lsls	r2, r2, #4
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	440b      	add	r3, r1
 8002a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a8c:	e00a      	b.n	8002aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4908      	ldr	r1, [pc, #32]	@ (8002ab4 <__NVIC_SetPriority+0x50>)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	3b04      	subs	r3, #4
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	761a      	strb	r2, [r3, #24]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000e100 	.word	0xe000e100
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f1c3 0307 	rsb	r3, r3, #7
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	bf28      	it	cs
 8002ad6:	2304      	movcs	r3, #4
 8002ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d902      	bls.n	8002ae8 <NVIC_EncodePriority+0x30>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3b03      	subs	r3, #3
 8002ae6:	e000      	b.n	8002aea <NVIC_EncodePriority+0x32>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	4313      	orrs	r3, r2
         );
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	@ 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b30:	d301      	bcc.n	8002b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00f      	b.n	8002b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <SysTick_Config+0x40>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3e:	210f      	movs	r1, #15
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f7ff ff8e 	bl	8002a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <SysTick_Config+0x40>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4e:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <SysTick_Config+0x40>)
 8002b50:	2207      	movs	r2, #7
 8002b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff29 	bl	80029c4 <__NVIC_SetPriorityGrouping>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8c:	f7ff ff3e 	bl	8002a0c <__NVIC_GetPriorityGrouping>
 8002b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff8e 	bl	8002ab8 <NVIC_EncodePriority>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff5d 	bl	8002a64 <__NVIC_SetPriority>
}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff31 	bl	8002a28 <__NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa2 	bl	8002b20 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	e165      	b.n	8002ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	f040 8154 	bne.w	8002eca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d005      	beq.n	8002c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d130      	bne.n	8002c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 0201 	and.w	r2, r3, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d017      	beq.n	8002cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d123      	bne.n	8002d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3208      	adds	r2, #8
 8002d26:	69b9      	ldr	r1, [r7, #24]
 8002d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0203 	and.w	r2, r3, #3
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80ae 	beq.w	8002eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d7e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d8a:	4a58      	ldr	r2, [pc, #352]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3302      	adds	r3, #2
 8002d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ef0 <HAL_GPIO_Init+0x308>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d025      	beq.n	8002e02 <HAL_GPIO_Init+0x21a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ef4 <HAL_GPIO_Init+0x30c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <HAL_GPIO_Init+0x216>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ef8 <HAL_GPIO_Init+0x310>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d019      	beq.n	8002dfa <HAL_GPIO_Init+0x212>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8002efc <HAL_GPIO_Init+0x314>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_GPIO_Init+0x20e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8002f00 <HAL_GPIO_Init+0x318>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00d      	beq.n	8002df2 <HAL_GPIO_Init+0x20a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002f04 <HAL_GPIO_Init+0x31c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <HAL_GPIO_Init+0x206>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a49      	ldr	r2, [pc, #292]	@ (8002f08 <HAL_GPIO_Init+0x320>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_GPIO_Init+0x202>
 8002de6:	2306      	movs	r3, #6
 8002de8:	e00c      	b.n	8002e04 <HAL_GPIO_Init+0x21c>
 8002dea:	2307      	movs	r3, #7
 8002dec:	e00a      	b.n	8002e04 <HAL_GPIO_Init+0x21c>
 8002dee:	2305      	movs	r3, #5
 8002df0:	e008      	b.n	8002e04 <HAL_GPIO_Init+0x21c>
 8002df2:	2304      	movs	r3, #4
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x21c>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e004      	b.n	8002e04 <HAL_GPIO_Init+0x21c>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_Init+0x21c>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x21c>
 8002e02:	2300      	movs	r3, #0
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f002 0203 	and.w	r2, r2, #3
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4093      	lsls	r3, r2
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e14:	4935      	ldr	r1, [pc, #212]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e22:	4b3a      	ldr	r3, [pc, #232]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e46:	4a31      	ldr	r2, [pc, #196]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e70:	4a26      	ldr	r2, [pc, #152]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e76:	4b25      	ldr	r3, [pc, #148]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec4:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <HAL_GPIO_Init+0x324>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	f67f ae96 	bls.w	8002c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3724      	adds	r7, #36	@ 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40021400 	.word	0x40021400
 8002f08:	40021800 	.word	0x40021800
 8002f0c:	40013c00 	.word	0x40013c00

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	041a      	lsls	r2, r3, #16
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	400b      	ands	r3, r1
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e12b      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f902 	bl	80011a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	@ 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f000 fdbc 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a81      	ldr	r2, [pc, #516]	@ (80031ec <HAL_I2C_Init+0x274>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d807      	bhi.n	8002ffc <HAL_I2C_Init+0x84>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a80      	ldr	r2, [pc, #512]	@ (80031f0 <HAL_I2C_Init+0x278>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e006      	b.n	800300a <HAL_I2C_Init+0x92>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80031f4 <HAL_I2C_Init+0x27c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0e7      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a78      	ldr	r2, [pc, #480]	@ (80031f8 <HAL_I2C_Init+0x280>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0c9b      	lsrs	r3, r3, #18
 800301c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a6a      	ldr	r2, [pc, #424]	@ (80031ec <HAL_I2C_Init+0x274>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <HAL_I2C_Init+0xd4>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	e009      	b.n	8003060 <HAL_I2C_Init+0xe8>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a69      	ldr	r2, [pc, #420]	@ (80031fc <HAL_I2C_Init+0x284>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	3301      	adds	r3, #1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003072:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	495c      	ldr	r1, [pc, #368]	@ (80031ec <HAL_I2C_Init+0x274>)
 800307c:	428b      	cmp	r3, r1
 800307e:	d819      	bhi.n	80030b4 <HAL_I2C_Init+0x13c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e59      	subs	r1, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fbb1 f3f3 	udiv	r3, r1, r3
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003094:	400b      	ands	r3, r1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_I2C_Init+0x138>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e59      	subs	r1, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	e051      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b0:	2304      	movs	r3, #4
 80030b2:	e04f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <HAL_I2C_Init+0x168>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e012      	b.n	8003106 <HAL_I2C_Init+0x18e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	0099      	lsls	r1, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x196>
 800310a:	2301      	movs	r3, #1
 800310c:	e022      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <HAL_I2C_Init+0x1bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e58      	subs	r0, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	440b      	add	r3, r1
 8003124:	fbb0 f3f3 	udiv	r3, r0, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	0099      	lsls	r1, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	6809      	ldr	r1, [r1, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6911      	ldr	r1, [r2, #16]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	000186a0 	.word	0x000186a0
 80031f0:	001e847f 	.word	0x001e847f
 80031f4:	003d08ff 	.word	0x003d08ff
 80031f8:	431bde83 	.word	0x431bde83
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	461a      	mov	r2, r3
 800320e:	4603      	mov	r3, r0
 8003210:	817b      	strh	r3, [r7, #10]
 8003212:	460b      	mov	r3, r1
 8003214:	813b      	strh	r3, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321a:	f7fe fd3b 	bl	8001c94 <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b20      	cmp	r3, #32
 800322a:	f040 80d9 	bne.w	80033e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2319      	movs	r3, #25
 8003234:	2201      	movs	r2, #1
 8003236:	496d      	ldr	r1, [pc, #436]	@ (80033ec <HAL_I2C_Mem_Write+0x1ec>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f971 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
 8003246:	e0cc      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_I2C_Mem_Write+0x56>
 8003252:	2302      	movs	r3, #2
 8003254:	e0c5      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d007      	beq.n	800327c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2221      	movs	r2, #33	@ 0x21
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2240      	movs	r2, #64	@ 0x40
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a4d      	ldr	r2, [pc, #308]	@ (80033f0 <HAL_I2C_Mem_Write+0x1f0>)
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032be:	88f8      	ldrh	r0, [r7, #6]
 80032c0:	893a      	ldrh	r2, [r7, #8]
 80032c2:	8979      	ldrh	r1, [r7, #10]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4603      	mov	r3, r0
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f890 	bl	80033f4 <I2C_RequestMemoryWrite>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d052      	beq.n	8003380 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e081      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fa36 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d107      	bne.n	8003306 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003304:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06b      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b04      	cmp	r3, #4
 8003346:	d11b      	bne.n	8003380 <HAL_I2C_Mem_Write+0x180>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d017      	beq.n	8003380 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1aa      	bne.n	80032de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fa29 	bl	80037e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e016      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	00100002 	.word	0x00100002
 80033f0:	ffff0000 	.word	0xffff0000

080033f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	4608      	mov	r0, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	461a      	mov	r2, r3
 8003402:	4603      	mov	r3, r0
 8003404:	817b      	strh	r3, [r7, #10]
 8003406:	460b      	mov	r3, r1
 8003408:	813b      	strh	r3, [r7, #8]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800341c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2200      	movs	r2, #0
 8003426:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f878 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003444:	d103      	bne.n	800344e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e05f      	b.n	8003512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003460:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	492d      	ldr	r1, [pc, #180]	@ (800351c <I2C_RequestMemoryWrite+0x128>)
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f8d3 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e04c      	b.n	8003512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f95e 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d107      	bne.n	80034b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e02b      	b.n	8003512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c0:	893b      	ldrh	r3, [r7, #8]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]
 80034ca:	e021      	b.n	8003510 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034cc:	893b      	ldrh	r3, [r7, #8]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034dc:	6a39      	ldr	r1, [r7, #32]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f938 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00d      	beq.n	8003506 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d107      	bne.n	8003502 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003500:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e005      	b.n	8003512 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003506:	893b      	ldrh	r3, [r7, #8]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	00010002 	.word	0x00010002

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e048      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d044      	beq.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fbab 	bl	8001c94 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d139      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10d      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x56>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	e00c      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d116      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e023      	b.n	800360c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10d      	bne.n	80035ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	e00c      	b.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	429a      	cmp	r2, r3
 8003608:	d093      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003622:	e071      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003632:	d123      	bne.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003642:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800364c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e067      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d041      	beq.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fe fb06 	bl	8001c94 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d136      	bne.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10c      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e00b      	b.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e021      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10c      	bne.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e00b      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf14      	ite	ne
 800373e:	2301      	movne	r3, #1
 8003740:	2300      	moveq	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f af6d 	bne.w	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	e034      	b.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f886 	bl	8003874 <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e034      	b.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fa8b 	bl	8001c94 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379a:	2b80      	cmp	r3, #128	@ 0x80
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d6:	2b80      	cmp	r3, #128	@ 0x80
 80037d8:	d1c3      	bne.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f0:	e034      	b.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f83e 	bl	8003874 <I2C_IsAcknowledgeFailed>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e034      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d028      	beq.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fa43 	bl	8001c94 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11d      	bne.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d016      	beq.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d1c3      	bne.n	80037f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d11b      	bne.n	80038c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	f043 0204 	orr.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <HAL_PWREx_EnableOverDrive+0x90>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003964 <HAL_PWREx_EnableOverDrive+0x90>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <HAL_PWREx_EnableOverDrive+0x90>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003968 <HAL_PWREx_EnableOverDrive+0x94>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe f9c8 	bl	8001c94 <HAL_GetTick>
 8003904:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003906:	e009      	b.n	800391c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003908:	f7fe f9c4 	bl	8001c94 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003916:	d901      	bls.n	800391c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e01f      	b.n	800395c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800391c:	4b13      	ldr	r3, [pc, #76]	@ (800396c <HAL_PWREx_EnableOverDrive+0x98>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003928:	d1ee      	bne.n	8003908 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800392a:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <HAL_PWREx_EnableOverDrive+0x9c>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003930:	f7fe f9b0 	bl	8001c94 <HAL_GetTick>
 8003934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003936:	e009      	b.n	800394c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003938:	f7fe f9ac 	bl	8001c94 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003946:	d901      	bls.n	800394c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e007      	b.n	800395c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800394c:	4b07      	ldr	r3, [pc, #28]	@ (800396c <HAL_PWREx_EnableOverDrive+0x98>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003958:	d1ee      	bne.n	8003938 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	420e0040 	.word	0x420e0040
 800396c:	40007000 	.word	0x40007000
 8003970:	420e0044 	.word	0x420e0044

08003974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0cc      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b68      	ldr	r3, [pc, #416]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d90c      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b65      	ldr	r3, [pc, #404]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b63      	ldr	r3, [pc, #396]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b8      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c8:	4b59      	ldr	r3, [pc, #356]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a58      	ldr	r2, [pc, #352]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e0:	4b53      	ldr	r3, [pc, #332]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a52      	ldr	r2, [pc, #328]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b50      	ldr	r3, [pc, #320]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	494d      	ldr	r1, [pc, #308]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d044      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b47      	ldr	r3, [pc, #284]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d119      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a32:	4b3f      	ldr	r3, [pc, #252]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e06f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a42:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e067      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a52:	4b37      	ldr	r3, [pc, #220]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 0203 	bic.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4934      	ldr	r1, [pc, #208]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a64:	f7fe f916 	bl	8001c94 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fe f912 	bl	8001c94 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e04f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	4b2b      	ldr	r3, [pc, #172]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 020c 	and.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1eb      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a94:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d20c      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b22      	ldr	r3, [pc, #136]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e032      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4916      	ldr	r1, [pc, #88]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae6:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	490e      	ldr	r1, [pc, #56]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003afa:	f000 f841 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	490a      	ldr	r1, [pc, #40]	@ (8003b34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	5ccb      	ldrb	r3, [r1, r3]
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	4a09      	ldr	r2, [pc, #36]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b16:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe f876 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00
 8003b30:	40023800 	.word	0x40023800
 8003b34:	080054cc 	.word	0x080054cc
 8003b38:	20000244 	.word	0x20000244
 8003b3c:	20000248 	.word	0x20000248

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	@ (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000244 	.word	0x20000244

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	@ (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	080054dc 	.word	0x080054dc

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b84:	b0ae      	sub	sp, #184	@ 0xb8
 8003b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba6:	4bcb      	ldr	r3, [pc, #812]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b0c      	cmp	r3, #12
 8003bb0:	f200 8206 	bhi.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x440>
 8003bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bbc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bf1 	.word	0x08003bf1
 8003bc0:	08003fc1 	.word	0x08003fc1
 8003bc4:	08003fc1 	.word	0x08003fc1
 8003bc8:	08003fc1 	.word	0x08003fc1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003fc1 	.word	0x08003fc1
 8003bd4:	08003fc1 	.word	0x08003fc1
 8003bd8:	08003fc1 	.word	0x08003fc1
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003fc1 	.word	0x08003fc1
 8003be4:	08003fc1 	.word	0x08003fc1
 8003be8:	08003fc1 	.word	0x08003fc1
 8003bec:	08003df1 	.word	0x08003df1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4bb9      	ldr	r3, [pc, #740]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bf6:	e1e7      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bf8:	4bb8      	ldr	r3, [pc, #736]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bfe:	e1e3      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c00:	4bb4      	ldr	r3, [pc, #720]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0c:	4bb1      	ldr	r3, [pc, #708]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d071      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c18:	4bae      	ldr	r3, [pc, #696]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	099b      	lsrs	r3, r3, #6
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c50:	0150      	lsls	r0, r2, #5
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4621      	mov	r1, r4
 8003c58:	1a51      	subs	r1, r2, r1
 8003c5a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c70:	4649      	mov	r1, r9
 8003c72:	018b      	lsls	r3, r1, #6
 8003c74:	4641      	mov	r1, r8
 8003c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	018a      	lsls	r2, r1, #6
 8003c7e:	4641      	mov	r1, r8
 8003c80:	1a51      	subs	r1, r2, r1
 8003c82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c84:	4649      	mov	r1, r9
 8003c86:	eb63 0301 	sbc.w	r3, r3, r1
 8003c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c98:	4649      	mov	r1, r9
 8003c9a:	00cb      	lsls	r3, r1, #3
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	00ca      	lsls	r2, r1, #3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	4622      	mov	r2, r4
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	eb42 0303 	adc.w	r3, r2, r3
 8003cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cc8:	4629      	mov	r1, r5
 8003cca:	024b      	lsls	r3, r1, #9
 8003ccc:	4621      	mov	r1, r4
 8003cce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	024a      	lsls	r2, r1, #9
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ce8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003cec:	f7fc fae0 	bl	80002b0 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cfa:	e067      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfc:	4b75      	ldr	r3, [pc, #468]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d16:	2300      	movs	r3, #0
 8003d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d1e:	4622      	mov	r2, r4
 8003d20:	462b      	mov	r3, r5
 8003d22:	f04f 0000 	mov.w	r0, #0
 8003d26:	f04f 0100 	mov.w	r1, #0
 8003d2a:	0159      	lsls	r1, r3, #5
 8003d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d30:	0150      	lsls	r0, r2, #5
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4621      	mov	r1, r4
 8003d38:	1a51      	subs	r1, r2, r1
 8003d3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d50:	4649      	mov	r1, r9
 8003d52:	018b      	lsls	r3, r1, #6
 8003d54:	4641      	mov	r1, r8
 8003d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	018a      	lsls	r2, r1, #6
 8003d5e:	4641      	mov	r1, r8
 8003d60:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d64:	4649      	mov	r1, r9
 8003d66:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d7e:	4692      	mov	sl, r2
 8003d80:	469b      	mov	fp, r3
 8003d82:	4623      	mov	r3, r4
 8003d84:	eb1a 0303 	adds.w	r3, sl, r3
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	462b      	mov	r3, r5
 8003d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d9e:	4629      	mov	r1, r5
 8003da0:	028b      	lsls	r3, r1, #10
 8003da2:	4621      	mov	r1, r4
 8003da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003da8:	4621      	mov	r1, r4
 8003daa:	028a      	lsls	r2, r1, #10
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003db4:	2200      	movs	r2, #0
 8003db6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003db8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003dbe:	f7fc fa77 	bl	80002b0 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dcc:	4b41      	ldr	r3, [pc, #260]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dee:	e0eb      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df0:	4b38      	ldr	r3, [pc, #224]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dfc:	4b35      	ldr	r3, [pc, #212]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d06b      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e08:	4b32      	ldr	r3, [pc, #200]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	2200      	movs	r2, #0
 8003e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e24:	4622      	mov	r2, r4
 8003e26:	462b      	mov	r3, r5
 8003e28:	f04f 0000 	mov.w	r0, #0
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	0159      	lsls	r1, r3, #5
 8003e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e36:	0150      	lsls	r0, r2, #5
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	1a51      	subs	r1, r2, r1
 8003e40:	61b9      	str	r1, [r7, #24]
 8003e42:	4629      	mov	r1, r5
 8003e44:	eb63 0301 	sbc.w	r3, r3, r1
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e56:	4659      	mov	r1, fp
 8003e58:	018b      	lsls	r3, r1, #6
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e60:	4651      	mov	r1, sl
 8003e62:	018a      	lsls	r2, r1, #6
 8003e64:	4651      	mov	r1, sl
 8003e66:	ebb2 0801 	subs.w	r8, r2, r1
 8003e6a:	4659      	mov	r1, fp
 8003e6c:	eb63 0901 	sbc.w	r9, r3, r1
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e84:	4690      	mov	r8, r2
 8003e86:	4699      	mov	r9, r3
 8003e88:	4623      	mov	r3, r4
 8003e8a:	eb18 0303 	adds.w	r3, r8, r3
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb49 0303 	adc.w	r3, r9, r3
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	024b      	lsls	r3, r1, #9
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eae:	4621      	mov	r1, r4
 8003eb0:	024a      	lsls	r2, r1, #9
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eba:	2200      	movs	r2, #0
 8003ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ebe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ec0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ec4:	f7fc f9f4 	bl	80002b0 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed2:	e065      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x420>
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	00f42400 	.word	0x00f42400
 8003edc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	4611      	mov	r1, r2
 8003eec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ef0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ef6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003efa:	4642      	mov	r2, r8
 8003efc:	464b      	mov	r3, r9
 8003efe:	f04f 0000 	mov.w	r0, #0
 8003f02:	f04f 0100 	mov.w	r1, #0
 8003f06:	0159      	lsls	r1, r3, #5
 8003f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f0c:	0150      	lsls	r0, r2, #5
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4641      	mov	r1, r8
 8003f14:	1a51      	subs	r1, r2, r1
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	4649      	mov	r1, r9
 8003f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	018b      	lsls	r3, r1, #6
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f36:	4651      	mov	r1, sl
 8003f38:	018a      	lsls	r2, r1, #6
 8003f3a:	4651      	mov	r1, sl
 8003f3c:	1a54      	subs	r4, r2, r1
 8003f3e:	4659      	mov	r1, fp
 8003f40:	eb63 0501 	sbc.w	r5, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	00eb      	lsls	r3, r5, #3
 8003f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f52:	00e2      	lsls	r2, r4, #3
 8003f54:	4614      	mov	r4, r2
 8003f56:	461d      	mov	r5, r3
 8003f58:	4643      	mov	r3, r8
 8003f5a:	18e3      	adds	r3, r4, r3
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	464b      	mov	r3, r9
 8003f60:	eb45 0303 	adc.w	r3, r5, r3
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f72:	4629      	mov	r1, r5
 8003f74:	028b      	lsls	r3, r1, #10
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	028a      	lsls	r2, r1, #10
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f88:	2200      	movs	r2, #0
 8003f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f92:	f7fc f98d 	bl	80002b0 <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	0f1b      	lsrs	r3, r3, #28
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fbe:	e003      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	37b8      	adds	r7, #184	@ 0xb8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	00f42400 	.word	0x00f42400

08003fe0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e28d      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8083 	beq.w	8004106 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004000:	4b94      	ldr	r3, [pc, #592]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b04      	cmp	r3, #4
 800400a:	d019      	beq.n	8004040 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800400c:	4b91      	ldr	r3, [pc, #580]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
        || \
 8004014:	2b08      	cmp	r3, #8
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004018:	4b8e      	ldr	r3, [pc, #568]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004024:	d00c      	beq.n	8004040 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b8b      	ldr	r3, [pc, #556]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d112      	bne.n	8004058 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004032:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800403a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800403e:	d10b      	bne.n	8004058 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	4b84      	ldr	r3, [pc, #528]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05b      	beq.n	8004104 <HAL_RCC_OscConfig+0x124>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d157      	bne.n	8004104 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e25a      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d106      	bne.n	8004070 <HAL_RCC_OscConfig+0x90>
 8004062:	4b7c      	ldr	r3, [pc, #496]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7b      	ldr	r2, [pc, #492]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e01d      	b.n	80040ac <HAL_RCC_OscConfig+0xcc>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0xb4>
 800407a:	4b76      	ldr	r3, [pc, #472]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b73      	ldr	r3, [pc, #460]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a72      	ldr	r2, [pc, #456]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0xcc>
 8004094:	4b6f      	ldr	r3, [pc, #444]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6e      	ldr	r2, [pc, #440]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800409a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fd fdee 	bl	8001c94 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fd fdea 	bl	8001c94 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	@ 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e21f      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b61      	ldr	r3, [pc, #388]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0xdc>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fdda 	bl	8001c94 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd fdd6 	bl	8001c94 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e20b      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	4b57      	ldr	r3, [pc, #348]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x104>
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d06f      	beq.n	80041f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004112:	4b50      	ldr	r3, [pc, #320]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800411e:	4b4d      	ldr	r3, [pc, #308]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
        || \
 8004126:	2b08      	cmp	r3, #8
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800412a:	4b4a      	ldr	r3, [pc, #296]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b44      	ldr	r3, [pc, #272]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x186>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1d3      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4937      	ldr	r1, [pc, #220]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <HAL_RCC_OscConfig+0x278>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd fd83 	bl	8001c94 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004192:	f7fd fd7f 	bl	8001c94 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1b4      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4925      	ldr	r1, [pc, #148]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <HAL_RCC_OscConfig+0x278>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fd62 	bl	8001c94 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fd fd5e 	bl	8001c94 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e193      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <HAL_RCC_OscConfig+0x27c>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fd42 	bl	8001c94 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004214:	f7fd fd3e 	bl	8001c94 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e173      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x234>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCC_OscConfig+0x27c>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fd fd2b 	bl	8001c94 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004242:	f7fd fd27 	bl	8001c94 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e15c      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b8a      	ldr	r3, [pc, #552]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ea      	bne.n	8004242 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8097 	beq.w	80043a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b83      	ldr	r3, [pc, #524]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b7f      	ldr	r3, [pc, #508]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	4a7e      	ldr	r2, [pc, #504]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	@ 0x40
 800429a:	4b7c      	ldr	r3, [pc, #496]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b79      	ldr	r3, [pc, #484]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b76      	ldr	r3, [pc, #472]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a75      	ldr	r2, [pc, #468]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fd fce7 	bl	8001c94 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fd fce3 	bl	8001c94 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e118      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x31e>
 80042f0:	4b66      	ldr	r3, [pc, #408]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	4a65      	ldr	r2, [pc, #404]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x358>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x340>
 8004306:	4b61      	ldr	r3, [pc, #388]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	4a60      	ldr	r2, [pc, #384]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	@ 0x70
 8004312:	4b5e      	ldr	r3, [pc, #376]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	4a5d      	ldr	r2, [pc, #372]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	@ 0x70
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x358>
 8004320:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004324:	4a59      	ldr	r2, [pc, #356]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	@ 0x70
 800432c:	4b57      	ldr	r3, [pc, #348]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	4a56      	ldr	r2, [pc, #344]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd fca8 	bl	8001c94 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fca4 	bl	8001c94 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0d7      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b4b      	ldr	r3, [pc, #300]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCC_OscConfig+0x368>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fd fc92 	bl	8001c94 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fd fc8e 	bl	8001c94 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0c1      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	4b40      	ldr	r3, [pc, #256]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ee      	bne.n	8004374 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	4a3a      	ldr	r2, [pc, #232]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80ad 	beq.w	800450c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b2:	4b36      	ldr	r3, [pc, #216]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d060      	beq.n	8004480 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d145      	bne.n	8004452 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b33      	ldr	r3, [pc, #204]	@ (8004494 <HAL_RCC_OscConfig+0x4b4>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fc62 	bl	8001c94 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fc5e 	bl	8001c94 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e093      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b29      	ldr	r3, [pc, #164]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	071b      	lsls	r3, r3, #28
 800441e:	491b      	ldr	r1, [pc, #108]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <HAL_RCC_OscConfig+0x4b4>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd fc33 	bl	8001c94 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fd fc2f 	bl	8001c94 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e064      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x452>
 8004450:	e05c      	b.n	800450c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <HAL_RCC_OscConfig+0x4b4>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd fc1c 	bl	8001c94 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fd fc18 	bl	8001c94 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e04d      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	4b06      	ldr	r3, [pc, #24]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x480>
 800447e:	e045      	b.n	800450c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e040      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
 800448c:	40023800 	.word	0x40023800
 8004490:	40007000 	.word	0x40007000
 8004494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004498:	4b1f      	ldr	r3, [pc, #124]	@ (8004518 <HAL_RCC_OscConfig+0x538>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d030      	beq.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d129      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d122      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d119      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	3b01      	subs	r3, #1
 80044e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d10f      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800

0800451c <sniprintf>:
 800451c:	b40c      	push	{r2, r3}
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	4b17      	ldr	r3, [pc, #92]	@ (8004580 <sniprintf+0x64>)
 8004522:	1e0c      	subs	r4, r1, #0
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	b09d      	sub	sp, #116	@ 0x74
 8004528:	da08      	bge.n	800453c <sniprintf+0x20>
 800452a:	238b      	movs	r3, #139	@ 0x8b
 800452c:	602b      	str	r3, [r5, #0]
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	b01d      	add	sp, #116	@ 0x74
 8004534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004538:	b002      	add	sp, #8
 800453a:	4770      	bx	lr
 800453c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004544:	bf14      	ite	ne
 8004546:	f104 33ff 	addne.w	r3, r4, #4294967295
 800454a:	4623      	moveq	r3, r4
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	9307      	str	r3, [sp, #28]
 8004550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004554:	9002      	str	r0, [sp, #8]
 8004556:	9006      	str	r0, [sp, #24]
 8004558:	f8ad 3016 	strh.w	r3, [sp, #22]
 800455c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800455e:	ab21      	add	r3, sp, #132	@ 0x84
 8004560:	a902      	add	r1, sp, #8
 8004562:	4628      	mov	r0, r5
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	f000 f9bf 	bl	80048e8 <_svfiprintf_r>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	bfbc      	itt	lt
 800456e:	238b      	movlt	r3, #139	@ 0x8b
 8004570:	602b      	strlt	r3, [r5, #0]
 8004572:	2c00      	cmp	r4, #0
 8004574:	d0dd      	beq.n	8004532 <sniprintf+0x16>
 8004576:	9b02      	ldr	r3, [sp, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	e7d9      	b.n	8004532 <sniprintf+0x16>
 800457e:	bf00      	nop
 8004580:	20000250 	.word	0x20000250

08004584 <memset>:
 8004584:	4402      	add	r2, r0
 8004586:	4603      	mov	r3, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <strncpy>:
 8004594:	b510      	push	{r4, lr}
 8004596:	3901      	subs	r1, #1
 8004598:	4603      	mov	r3, r0
 800459a:	b132      	cbz	r2, 80045aa <strncpy+0x16>
 800459c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80045a0:	f803 4b01 	strb.w	r4, [r3], #1
 80045a4:	3a01      	subs	r2, #1
 80045a6:	2c00      	cmp	r4, #0
 80045a8:	d1f7      	bne.n	800459a <strncpy+0x6>
 80045aa:	441a      	add	r2, r3
 80045ac:	2100      	movs	r1, #0
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d100      	bne.n	80045b4 <strncpy+0x20>
 80045b2:	bd10      	pop	{r4, pc}
 80045b4:	f803 1b01 	strb.w	r1, [r3], #1
 80045b8:	e7f9      	b.n	80045ae <strncpy+0x1a>
	...

080045bc <__errno>:
 80045bc:	4b01      	ldr	r3, [pc, #4]	@ (80045c4 <__errno+0x8>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000250 	.word	0x20000250

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004600 <__libc_init_array+0x38>)
 80045cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004604 <__libc_init_array+0x3c>)
 80045ce:	1b64      	subs	r4, r4, r5
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	2600      	movs	r6, #0
 80045d4:	42a6      	cmp	r6, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004608 <__libc_init_array+0x40>)
 80045da:	4c0c      	ldr	r4, [pc, #48]	@ (800460c <__libc_init_array+0x44>)
 80045dc:	f000 fc6e 	bl	8004ebc <_init>
 80045e0:	1b64      	subs	r4, r4, r5
 80045e2:	10a4      	asrs	r4, r4, #2
 80045e4:	2600      	movs	r6, #0
 80045e6:	42a6      	cmp	r6, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f0:	4798      	blx	r3
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fa:	4798      	blx	r3
 80045fc:	3601      	adds	r6, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	08005b1c 	.word	0x08005b1c
 8004604:	08005b1c 	.word	0x08005b1c
 8004608:	08005b1c 	.word	0x08005b1c
 800460c:	08005b20 	.word	0x08005b20

08004610 <__retarget_lock_acquire_recursive>:
 8004610:	4770      	bx	lr

08004612 <__retarget_lock_release_recursive>:
 8004612:	4770      	bx	lr

08004614 <strcpy>:
 8004614:	4603      	mov	r3, r0
 8004616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800461a:	f803 2b01 	strb.w	r2, [r3], #1
 800461e:	2a00      	cmp	r2, #0
 8004620:	d1f9      	bne.n	8004616 <strcpy+0x2>
 8004622:	4770      	bx	lr

08004624 <memcpy>:
 8004624:	440a      	add	r2, r1
 8004626:	4291      	cmp	r1, r2
 8004628:	f100 33ff 	add.w	r3, r0, #4294967295
 800462c:	d100      	bne.n	8004630 <memcpy+0xc>
 800462e:	4770      	bx	lr
 8004630:	b510      	push	{r4, lr}
 8004632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800463a:	4291      	cmp	r1, r2
 800463c:	d1f9      	bne.n	8004632 <memcpy+0xe>
 800463e:	bd10      	pop	{r4, pc}

08004640 <_free_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4605      	mov	r5, r0
 8004644:	2900      	cmp	r1, #0
 8004646:	d041      	beq.n	80046cc <_free_r+0x8c>
 8004648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464c:	1f0c      	subs	r4, r1, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfb8      	it	lt
 8004652:	18e4      	addlt	r4, r4, r3
 8004654:	f000 f8e0 	bl	8004818 <__malloc_lock>
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <_free_r+0x90>)
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	b933      	cbnz	r3, 800466c <_free_r+0x2c>
 800465e:	6063      	str	r3, [r4, #4]
 8004660:	6014      	str	r4, [r2, #0]
 8004662:	4628      	mov	r0, r5
 8004664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004668:	f000 b8dc 	b.w	8004824 <__malloc_unlock>
 800466c:	42a3      	cmp	r3, r4
 800466e:	d908      	bls.n	8004682 <_free_r+0x42>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	1821      	adds	r1, r4, r0
 8004674:	428b      	cmp	r3, r1
 8004676:	bf01      	itttt	eq
 8004678:	6819      	ldreq	r1, [r3, #0]
 800467a:	685b      	ldreq	r3, [r3, #4]
 800467c:	1809      	addeq	r1, r1, r0
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	e7ed      	b.n	800465e <_free_r+0x1e>
 8004682:	461a      	mov	r2, r3
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b10b      	cbz	r3, 800468c <_free_r+0x4c>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d9fa      	bls.n	8004682 <_free_r+0x42>
 800468c:	6811      	ldr	r1, [r2, #0]
 800468e:	1850      	adds	r0, r2, r1
 8004690:	42a0      	cmp	r0, r4
 8004692:	d10b      	bne.n	80046ac <_free_r+0x6c>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	4401      	add	r1, r0
 8004698:	1850      	adds	r0, r2, r1
 800469a:	4283      	cmp	r3, r0
 800469c:	6011      	str	r1, [r2, #0]
 800469e:	d1e0      	bne.n	8004662 <_free_r+0x22>
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	6053      	str	r3, [r2, #4]
 80046a6:	4408      	add	r0, r1
 80046a8:	6010      	str	r0, [r2, #0]
 80046aa:	e7da      	b.n	8004662 <_free_r+0x22>
 80046ac:	d902      	bls.n	80046b4 <_free_r+0x74>
 80046ae:	230c      	movs	r3, #12
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	e7d6      	b.n	8004662 <_free_r+0x22>
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	1821      	adds	r1, r4, r0
 80046b8:	428b      	cmp	r3, r1
 80046ba:	bf04      	itt	eq
 80046bc:	6819      	ldreq	r1, [r3, #0]
 80046be:	685b      	ldreq	r3, [r3, #4]
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	bf04      	itt	eq
 80046c4:	1809      	addeq	r1, r1, r0
 80046c6:	6021      	streq	r1, [r4, #0]
 80046c8:	6054      	str	r4, [r2, #4]
 80046ca:	e7ca      	b.n	8004662 <_free_r+0x22>
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	bf00      	nop
 80046d0:	20000a84 	.word	0x20000a84

080046d4 <sbrk_aligned>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004714 <sbrk_aligned+0x40>)
 80046d8:	460c      	mov	r4, r1
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	4605      	mov	r5, r0
 80046de:	b911      	cbnz	r1, 80046e6 <sbrk_aligned+0x12>
 80046e0:	f000 fba6 	bl	8004e30 <_sbrk_r>
 80046e4:	6030      	str	r0, [r6, #0]
 80046e6:	4621      	mov	r1, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 fba1 	bl	8004e30 <_sbrk_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d103      	bne.n	80046fa <sbrk_aligned+0x26>
 80046f2:	f04f 34ff 	mov.w	r4, #4294967295
 80046f6:	4620      	mov	r0, r4
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	1cc4      	adds	r4, r0, #3
 80046fc:	f024 0403 	bic.w	r4, r4, #3
 8004700:	42a0      	cmp	r0, r4
 8004702:	d0f8      	beq.n	80046f6 <sbrk_aligned+0x22>
 8004704:	1a21      	subs	r1, r4, r0
 8004706:	4628      	mov	r0, r5
 8004708:	f000 fb92 	bl	8004e30 <_sbrk_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d1f2      	bne.n	80046f6 <sbrk_aligned+0x22>
 8004710:	e7ef      	b.n	80046f2 <sbrk_aligned+0x1e>
 8004712:	bf00      	nop
 8004714:	20000a80 	.word	0x20000a80

08004718 <_malloc_r>:
 8004718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800471c:	1ccd      	adds	r5, r1, #3
 800471e:	f025 0503 	bic.w	r5, r5, #3
 8004722:	3508      	adds	r5, #8
 8004724:	2d0c      	cmp	r5, #12
 8004726:	bf38      	it	cc
 8004728:	250c      	movcc	r5, #12
 800472a:	2d00      	cmp	r5, #0
 800472c:	4606      	mov	r6, r0
 800472e:	db01      	blt.n	8004734 <_malloc_r+0x1c>
 8004730:	42a9      	cmp	r1, r5
 8004732:	d904      	bls.n	800473e <_malloc_r+0x26>
 8004734:	230c      	movs	r3, #12
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	2000      	movs	r0, #0
 800473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004814 <_malloc_r+0xfc>
 8004742:	f000 f869 	bl	8004818 <__malloc_lock>
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	461c      	mov	r4, r3
 800474c:	bb44      	cbnz	r4, 80047a0 <_malloc_r+0x88>
 800474e:	4629      	mov	r1, r5
 8004750:	4630      	mov	r0, r6
 8004752:	f7ff ffbf 	bl	80046d4 <sbrk_aligned>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	4604      	mov	r4, r0
 800475a:	d158      	bne.n	800480e <_malloc_r+0xf6>
 800475c:	f8d8 4000 	ldr.w	r4, [r8]
 8004760:	4627      	mov	r7, r4
 8004762:	2f00      	cmp	r7, #0
 8004764:	d143      	bne.n	80047ee <_malloc_r+0xd6>
 8004766:	2c00      	cmp	r4, #0
 8004768:	d04b      	beq.n	8004802 <_malloc_r+0xea>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	4639      	mov	r1, r7
 800476e:	4630      	mov	r0, r6
 8004770:	eb04 0903 	add.w	r9, r4, r3
 8004774:	f000 fb5c 	bl	8004e30 <_sbrk_r>
 8004778:	4581      	cmp	r9, r0
 800477a:	d142      	bne.n	8004802 <_malloc_r+0xea>
 800477c:	6821      	ldr	r1, [r4, #0]
 800477e:	1a6d      	subs	r5, r5, r1
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ffa6 	bl	80046d4 <sbrk_aligned>
 8004788:	3001      	adds	r0, #1
 800478a:	d03a      	beq.n	8004802 <_malloc_r+0xea>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	442b      	add	r3, r5
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	f8d8 3000 	ldr.w	r3, [r8]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	bb62      	cbnz	r2, 80047f4 <_malloc_r+0xdc>
 800479a:	f8c8 7000 	str.w	r7, [r8]
 800479e:	e00f      	b.n	80047c0 <_malloc_r+0xa8>
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	1b52      	subs	r2, r2, r5
 80047a4:	d420      	bmi.n	80047e8 <_malloc_r+0xd0>
 80047a6:	2a0b      	cmp	r2, #11
 80047a8:	d917      	bls.n	80047da <_malloc_r+0xc2>
 80047aa:	1961      	adds	r1, r4, r5
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	6025      	str	r5, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	6059      	strne	r1, [r3, #4]
 80047b4:	6863      	ldr	r3, [r4, #4]
 80047b6:	bf08      	it	eq
 80047b8:	f8c8 1000 	streq.w	r1, [r8]
 80047bc:	5162      	str	r2, [r4, r5]
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 f82f 	bl	8004824 <__malloc_unlock>
 80047c6:	f104 000b 	add.w	r0, r4, #11
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	f020 0007 	bic.w	r0, r0, #7
 80047d0:	1ac2      	subs	r2, r0, r3
 80047d2:	bf1c      	itt	ne
 80047d4:	1a1b      	subne	r3, r3, r0
 80047d6:	50a3      	strne	r3, [r4, r2]
 80047d8:	e7af      	b.n	800473a <_malloc_r+0x22>
 80047da:	6862      	ldr	r2, [r4, #4]
 80047dc:	42a3      	cmp	r3, r4
 80047de:	bf0c      	ite	eq
 80047e0:	f8c8 2000 	streq.w	r2, [r8]
 80047e4:	605a      	strne	r2, [r3, #4]
 80047e6:	e7eb      	b.n	80047c0 <_malloc_r+0xa8>
 80047e8:	4623      	mov	r3, r4
 80047ea:	6864      	ldr	r4, [r4, #4]
 80047ec:	e7ae      	b.n	800474c <_malloc_r+0x34>
 80047ee:	463c      	mov	r4, r7
 80047f0:	687f      	ldr	r7, [r7, #4]
 80047f2:	e7b6      	b.n	8004762 <_malloc_r+0x4a>
 80047f4:	461a      	mov	r2, r3
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	d1fb      	bne.n	80047f4 <_malloc_r+0xdc>
 80047fc:	2300      	movs	r3, #0
 80047fe:	6053      	str	r3, [r2, #4]
 8004800:	e7de      	b.n	80047c0 <_malloc_r+0xa8>
 8004802:	230c      	movs	r3, #12
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f80c 	bl	8004824 <__malloc_unlock>
 800480c:	e794      	b.n	8004738 <_malloc_r+0x20>
 800480e:	6005      	str	r5, [r0, #0]
 8004810:	e7d6      	b.n	80047c0 <_malloc_r+0xa8>
 8004812:	bf00      	nop
 8004814:	20000a84 	.word	0x20000a84

08004818 <__malloc_lock>:
 8004818:	4801      	ldr	r0, [pc, #4]	@ (8004820 <__malloc_lock+0x8>)
 800481a:	f7ff bef9 	b.w	8004610 <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	20000a7c 	.word	0x20000a7c

08004824 <__malloc_unlock>:
 8004824:	4801      	ldr	r0, [pc, #4]	@ (800482c <__malloc_unlock+0x8>)
 8004826:	f7ff bef4 	b.w	8004612 <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	20000a7c 	.word	0x20000a7c

08004830 <__ssputs_r>:
 8004830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	688e      	ldr	r6, [r1, #8]
 8004836:	461f      	mov	r7, r3
 8004838:	42be      	cmp	r6, r7
 800483a:	680b      	ldr	r3, [r1, #0]
 800483c:	4682      	mov	sl, r0
 800483e:	460c      	mov	r4, r1
 8004840:	4690      	mov	r8, r2
 8004842:	d82d      	bhi.n	80048a0 <__ssputs_r+0x70>
 8004844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004848:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800484c:	d026      	beq.n	800489c <__ssputs_r+0x6c>
 800484e:	6965      	ldr	r5, [r4, #20]
 8004850:	6909      	ldr	r1, [r1, #16]
 8004852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004856:	eba3 0901 	sub.w	r9, r3, r1
 800485a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800485e:	1c7b      	adds	r3, r7, #1
 8004860:	444b      	add	r3, r9
 8004862:	106d      	asrs	r5, r5, #1
 8004864:	429d      	cmp	r5, r3
 8004866:	bf38      	it	cc
 8004868:	461d      	movcc	r5, r3
 800486a:	0553      	lsls	r3, r2, #21
 800486c:	d527      	bpl.n	80048be <__ssputs_r+0x8e>
 800486e:	4629      	mov	r1, r5
 8004870:	f7ff ff52 	bl	8004718 <_malloc_r>
 8004874:	4606      	mov	r6, r0
 8004876:	b360      	cbz	r0, 80048d2 <__ssputs_r+0xa2>
 8004878:	6921      	ldr	r1, [r4, #16]
 800487a:	464a      	mov	r2, r9
 800487c:	f7ff fed2 	bl	8004624 <memcpy>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	6126      	str	r6, [r4, #16]
 800488e:	6165      	str	r5, [r4, #20]
 8004890:	444e      	add	r6, r9
 8004892:	eba5 0509 	sub.w	r5, r5, r9
 8004896:	6026      	str	r6, [r4, #0]
 8004898:	60a5      	str	r5, [r4, #8]
 800489a:	463e      	mov	r6, r7
 800489c:	42be      	cmp	r6, r7
 800489e:	d900      	bls.n	80048a2 <__ssputs_r+0x72>
 80048a0:	463e      	mov	r6, r7
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	4632      	mov	r2, r6
 80048a6:	4641      	mov	r1, r8
 80048a8:	f000 faa8 	bl	8004dfc <memmove>
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	1b9b      	subs	r3, r3, r6
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	4433      	add	r3, r6
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	2000      	movs	r0, #0
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	462a      	mov	r2, r5
 80048c0:	f000 fac6 	bl	8004e50 <_realloc_r>
 80048c4:	4606      	mov	r6, r0
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d1e0      	bne.n	800488c <__ssputs_r+0x5c>
 80048ca:	6921      	ldr	r1, [r4, #16]
 80048cc:	4650      	mov	r0, sl
 80048ce:	f7ff feb7 	bl	8004640 <_free_r>
 80048d2:	230c      	movs	r3, #12
 80048d4:	f8ca 3000 	str.w	r3, [sl]
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	e7e9      	b.n	80048ba <__ssputs_r+0x8a>
	...

080048e8 <_svfiprintf_r>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	4698      	mov	r8, r3
 80048ee:	898b      	ldrh	r3, [r1, #12]
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	b09d      	sub	sp, #116	@ 0x74
 80048f4:	4607      	mov	r7, r0
 80048f6:	460d      	mov	r5, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	d510      	bpl.n	800491e <_svfiprintf_r+0x36>
 80048fc:	690b      	ldr	r3, [r1, #16]
 80048fe:	b973      	cbnz	r3, 800491e <_svfiprintf_r+0x36>
 8004900:	2140      	movs	r1, #64	@ 0x40
 8004902:	f7ff ff09 	bl	8004718 <_malloc_r>
 8004906:	6028      	str	r0, [r5, #0]
 8004908:	6128      	str	r0, [r5, #16]
 800490a:	b930      	cbnz	r0, 800491a <_svfiprintf_r+0x32>
 800490c:	230c      	movs	r3, #12
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	b01d      	add	sp, #116	@ 0x74
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	2340      	movs	r3, #64	@ 0x40
 800491c:	616b      	str	r3, [r5, #20]
 800491e:	2300      	movs	r3, #0
 8004920:	9309      	str	r3, [sp, #36]	@ 0x24
 8004922:	2320      	movs	r3, #32
 8004924:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004928:	f8cd 800c 	str.w	r8, [sp, #12]
 800492c:	2330      	movs	r3, #48	@ 0x30
 800492e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004acc <_svfiprintf_r+0x1e4>
 8004932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004936:	f04f 0901 	mov.w	r9, #1
 800493a:	4623      	mov	r3, r4
 800493c:	469a      	mov	sl, r3
 800493e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004942:	b10a      	cbz	r2, 8004948 <_svfiprintf_r+0x60>
 8004944:	2a25      	cmp	r2, #37	@ 0x25
 8004946:	d1f9      	bne.n	800493c <_svfiprintf_r+0x54>
 8004948:	ebba 0b04 	subs.w	fp, sl, r4
 800494c:	d00b      	beq.n	8004966 <_svfiprintf_r+0x7e>
 800494e:	465b      	mov	r3, fp
 8004950:	4622      	mov	r2, r4
 8004952:	4629      	mov	r1, r5
 8004954:	4638      	mov	r0, r7
 8004956:	f7ff ff6b 	bl	8004830 <__ssputs_r>
 800495a:	3001      	adds	r0, #1
 800495c:	f000 80a7 	beq.w	8004aae <_svfiprintf_r+0x1c6>
 8004960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004962:	445a      	add	r2, fp
 8004964:	9209      	str	r2, [sp, #36]	@ 0x24
 8004966:	f89a 3000 	ldrb.w	r3, [sl]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 809f 	beq.w	8004aae <_svfiprintf_r+0x1c6>
 8004970:	2300      	movs	r3, #0
 8004972:	f04f 32ff 	mov.w	r2, #4294967295
 8004976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800497a:	f10a 0a01 	add.w	sl, sl, #1
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	9307      	str	r3, [sp, #28]
 8004982:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004986:	931a      	str	r3, [sp, #104]	@ 0x68
 8004988:	4654      	mov	r4, sl
 800498a:	2205      	movs	r2, #5
 800498c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004990:	484e      	ldr	r0, [pc, #312]	@ (8004acc <_svfiprintf_r+0x1e4>)
 8004992:	f7fb fc3d 	bl	8000210 <memchr>
 8004996:	9a04      	ldr	r2, [sp, #16]
 8004998:	b9d8      	cbnz	r0, 80049d2 <_svfiprintf_r+0xea>
 800499a:	06d0      	lsls	r0, r2, #27
 800499c:	bf44      	itt	mi
 800499e:	2320      	movmi	r3, #32
 80049a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049a4:	0711      	lsls	r1, r2, #28
 80049a6:	bf44      	itt	mi
 80049a8:	232b      	movmi	r3, #43	@ 0x2b
 80049aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ae:	f89a 3000 	ldrb.w	r3, [sl]
 80049b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b4:	d015      	beq.n	80049e2 <_svfiprintf_r+0xfa>
 80049b6:	9a07      	ldr	r2, [sp, #28]
 80049b8:	4654      	mov	r4, sl
 80049ba:	2000      	movs	r0, #0
 80049bc:	f04f 0c0a 	mov.w	ip, #10
 80049c0:	4621      	mov	r1, r4
 80049c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c6:	3b30      	subs	r3, #48	@ 0x30
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	d94b      	bls.n	8004a64 <_svfiprintf_r+0x17c>
 80049cc:	b1b0      	cbz	r0, 80049fc <_svfiprintf_r+0x114>
 80049ce:	9207      	str	r2, [sp, #28]
 80049d0:	e014      	b.n	80049fc <_svfiprintf_r+0x114>
 80049d2:	eba0 0308 	sub.w	r3, r0, r8
 80049d6:	fa09 f303 	lsl.w	r3, r9, r3
 80049da:	4313      	orrs	r3, r2
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	46a2      	mov	sl, r4
 80049e0:	e7d2      	b.n	8004988 <_svfiprintf_r+0xa0>
 80049e2:	9b03      	ldr	r3, [sp, #12]
 80049e4:	1d19      	adds	r1, r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	9103      	str	r1, [sp, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfbb      	ittet	lt
 80049ee:	425b      	neglt	r3, r3
 80049f0:	f042 0202 	orrlt.w	r2, r2, #2
 80049f4:	9307      	strge	r3, [sp, #28]
 80049f6:	9307      	strlt	r3, [sp, #28]
 80049f8:	bfb8      	it	lt
 80049fa:	9204      	strlt	r2, [sp, #16]
 80049fc:	7823      	ldrb	r3, [r4, #0]
 80049fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a00:	d10a      	bne.n	8004a18 <_svfiprintf_r+0x130>
 8004a02:	7863      	ldrb	r3, [r4, #1]
 8004a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a06:	d132      	bne.n	8004a6e <_svfiprintf_r+0x186>
 8004a08:	9b03      	ldr	r3, [sp, #12]
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	9203      	str	r2, [sp, #12]
 8004a10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a14:	3402      	adds	r4, #2
 8004a16:	9305      	str	r3, [sp, #20]
 8004a18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004adc <_svfiprintf_r+0x1f4>
 8004a1c:	7821      	ldrb	r1, [r4, #0]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	4650      	mov	r0, sl
 8004a22:	f7fb fbf5 	bl	8000210 <memchr>
 8004a26:	b138      	cbz	r0, 8004a38 <_svfiprintf_r+0x150>
 8004a28:	9b04      	ldr	r3, [sp, #16]
 8004a2a:	eba0 000a 	sub.w	r0, r0, sl
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	4082      	lsls	r2, r0
 8004a32:	4313      	orrs	r3, r2
 8004a34:	3401      	adds	r4, #1
 8004a36:	9304      	str	r3, [sp, #16]
 8004a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3c:	4824      	ldr	r0, [pc, #144]	@ (8004ad0 <_svfiprintf_r+0x1e8>)
 8004a3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a42:	2206      	movs	r2, #6
 8004a44:	f7fb fbe4 	bl	8000210 <memchr>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d036      	beq.n	8004aba <_svfiprintf_r+0x1d2>
 8004a4c:	4b21      	ldr	r3, [pc, #132]	@ (8004ad4 <_svfiprintf_r+0x1ec>)
 8004a4e:	bb1b      	cbnz	r3, 8004a98 <_svfiprintf_r+0x1b0>
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	3307      	adds	r3, #7
 8004a54:	f023 0307 	bic.w	r3, r3, #7
 8004a58:	3308      	adds	r3, #8
 8004a5a:	9303      	str	r3, [sp, #12]
 8004a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5e:	4433      	add	r3, r6
 8004a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a62:	e76a      	b.n	800493a <_svfiprintf_r+0x52>
 8004a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a68:	460c      	mov	r4, r1
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	e7a8      	b.n	80049c0 <_svfiprintf_r+0xd8>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	3401      	adds	r4, #1
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f04f 0c0a 	mov.w	ip, #10
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a80:	3a30      	subs	r2, #48	@ 0x30
 8004a82:	2a09      	cmp	r2, #9
 8004a84:	d903      	bls.n	8004a8e <_svfiprintf_r+0x1a6>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0c6      	beq.n	8004a18 <_svfiprintf_r+0x130>
 8004a8a:	9105      	str	r1, [sp, #20]
 8004a8c:	e7c4      	b.n	8004a18 <_svfiprintf_r+0x130>
 8004a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a92:	4604      	mov	r4, r0
 8004a94:	2301      	movs	r3, #1
 8004a96:	e7f0      	b.n	8004a7a <_svfiprintf_r+0x192>
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <_svfiprintf_r+0x1f0>)
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	1c42      	adds	r2, r0, #1
 8004aaa:	4606      	mov	r6, r0
 8004aac:	d1d6      	bne.n	8004a5c <_svfiprintf_r+0x174>
 8004aae:	89ab      	ldrh	r3, [r5, #12]
 8004ab0:	065b      	lsls	r3, r3, #25
 8004ab2:	f53f af2d 	bmi.w	8004910 <_svfiprintf_r+0x28>
 8004ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ab8:	e72c      	b.n	8004914 <_svfiprintf_r+0x2c>
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	462a      	mov	r2, r5
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <_svfiprintf_r+0x1f0>)
 8004ac2:	a904      	add	r1, sp, #16
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f000 f879 	bl	8004bbc <_printf_i>
 8004aca:	e7ed      	b.n	8004aa8 <_svfiprintf_r+0x1c0>
 8004acc:	08005ae0 	.word	0x08005ae0
 8004ad0:	08005aea 	.word	0x08005aea
 8004ad4:	00000000 	.word	0x00000000
 8004ad8:	08004831 	.word	0x08004831
 8004adc:	08005ae6 	.word	0x08005ae6

08004ae0 <_printf_common>:
 8004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	4616      	mov	r6, r2
 8004ae6:	4698      	mov	r8, r3
 8004ae8:	688a      	ldr	r2, [r1, #8]
 8004aea:	690b      	ldr	r3, [r1, #16]
 8004aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004af0:	4293      	cmp	r3, r2
 8004af2:	bfb8      	it	lt
 8004af4:	4613      	movlt	r3, r2
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004afc:	4607      	mov	r7, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	b10a      	cbz	r2, 8004b06 <_printf_common+0x26>
 8004b02:	3301      	adds	r3, #1
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	0699      	lsls	r1, r3, #26
 8004b0a:	bf42      	ittt	mi
 8004b0c:	6833      	ldrmi	r3, [r6, #0]
 8004b0e:	3302      	addmi	r3, #2
 8004b10:	6033      	strmi	r3, [r6, #0]
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	f015 0506 	ands.w	r5, r5, #6
 8004b18:	d106      	bne.n	8004b28 <_printf_common+0x48>
 8004b1a:	f104 0a19 	add.w	sl, r4, #25
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	6832      	ldr	r2, [r6, #0]
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	dc26      	bgt.n	8004b76 <_printf_common+0x96>
 8004b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	3b00      	subs	r3, #0
 8004b30:	bf18      	it	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	0692      	lsls	r2, r2, #26
 8004b36:	d42b      	bmi.n	8004b90 <_printf_common+0xb0>
 8004b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	4638      	mov	r0, r7
 8004b40:	47c8      	blx	r9
 8004b42:	3001      	adds	r0, #1
 8004b44:	d01e      	beq.n	8004b84 <_printf_common+0xa4>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	6922      	ldr	r2, [r4, #16]
 8004b4a:	f003 0306 	and.w	r3, r3, #6
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	bf02      	ittt	eq
 8004b52:	68e5      	ldreq	r5, [r4, #12]
 8004b54:	6833      	ldreq	r3, [r6, #0]
 8004b56:	1aed      	subeq	r5, r5, r3
 8004b58:	68a3      	ldr	r3, [r4, #8]
 8004b5a:	bf0c      	ite	eq
 8004b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b60:	2500      	movne	r5, #0
 8004b62:	4293      	cmp	r3, r2
 8004b64:	bfc4      	itt	gt
 8004b66:	1a9b      	subgt	r3, r3, r2
 8004b68:	18ed      	addgt	r5, r5, r3
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	341a      	adds	r4, #26
 8004b6e:	42b5      	cmp	r5, r6
 8004b70:	d11a      	bne.n	8004ba8 <_printf_common+0xc8>
 8004b72:	2000      	movs	r0, #0
 8004b74:	e008      	b.n	8004b88 <_printf_common+0xa8>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4652      	mov	r2, sl
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	47c8      	blx	r9
 8004b80:	3001      	adds	r0, #1
 8004b82:	d103      	bne.n	8004b8c <_printf_common+0xac>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	e7c6      	b.n	8004b1e <_printf_common+0x3e>
 8004b90:	18e1      	adds	r1, r4, r3
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	2030      	movs	r0, #48	@ 0x30
 8004b96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b9a:	4422      	add	r2, r4
 8004b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	e7c7      	b.n	8004b38 <_printf_common+0x58>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4622      	mov	r2, r4
 8004bac:	4641      	mov	r1, r8
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c8      	blx	r9
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0e6      	beq.n	8004b84 <_printf_common+0xa4>
 8004bb6:	3601      	adds	r6, #1
 8004bb8:	e7d9      	b.n	8004b6e <_printf_common+0x8e>
	...

08004bbc <_printf_i>:
 8004bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	7e0f      	ldrb	r7, [r1, #24]
 8004bc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bc4:	2f78      	cmp	r7, #120	@ 0x78
 8004bc6:	4691      	mov	r9, r2
 8004bc8:	4680      	mov	r8, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	469a      	mov	sl, r3
 8004bce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bd2:	d807      	bhi.n	8004be4 <_printf_i+0x28>
 8004bd4:	2f62      	cmp	r7, #98	@ 0x62
 8004bd6:	d80a      	bhi.n	8004bee <_printf_i+0x32>
 8004bd8:	2f00      	cmp	r7, #0
 8004bda:	f000 80d2 	beq.w	8004d82 <_printf_i+0x1c6>
 8004bde:	2f58      	cmp	r7, #88	@ 0x58
 8004be0:	f000 80b9 	beq.w	8004d56 <_printf_i+0x19a>
 8004be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004be8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bec:	e03a      	b.n	8004c64 <_printf_i+0xa8>
 8004bee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bf2:	2b15      	cmp	r3, #21
 8004bf4:	d8f6      	bhi.n	8004be4 <_printf_i+0x28>
 8004bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bfc <_printf_i+0x40>)
 8004bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bfc:	08004c55 	.word	0x08004c55
 8004c00:	08004c69 	.word	0x08004c69
 8004c04:	08004be5 	.word	0x08004be5
 8004c08:	08004be5 	.word	0x08004be5
 8004c0c:	08004be5 	.word	0x08004be5
 8004c10:	08004be5 	.word	0x08004be5
 8004c14:	08004c69 	.word	0x08004c69
 8004c18:	08004be5 	.word	0x08004be5
 8004c1c:	08004be5 	.word	0x08004be5
 8004c20:	08004be5 	.word	0x08004be5
 8004c24:	08004be5 	.word	0x08004be5
 8004c28:	08004d69 	.word	0x08004d69
 8004c2c:	08004c93 	.word	0x08004c93
 8004c30:	08004d23 	.word	0x08004d23
 8004c34:	08004be5 	.word	0x08004be5
 8004c38:	08004be5 	.word	0x08004be5
 8004c3c:	08004d8b 	.word	0x08004d8b
 8004c40:	08004be5 	.word	0x08004be5
 8004c44:	08004c93 	.word	0x08004c93
 8004c48:	08004be5 	.word	0x08004be5
 8004c4c:	08004be5 	.word	0x08004be5
 8004c50:	08004d2b 	.word	0x08004d2b
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	1d1a      	adds	r2, r3, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6032      	str	r2, [r6, #0]
 8004c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c64:	2301      	movs	r3, #1
 8004c66:	e09d      	b.n	8004da4 <_printf_i+0x1e8>
 8004c68:	6833      	ldr	r3, [r6, #0]
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	6031      	str	r1, [r6, #0]
 8004c70:	0606      	lsls	r6, r0, #24
 8004c72:	d501      	bpl.n	8004c78 <_printf_i+0xbc>
 8004c74:	681d      	ldr	r5, [r3, #0]
 8004c76:	e003      	b.n	8004c80 <_printf_i+0xc4>
 8004c78:	0645      	lsls	r5, r0, #25
 8004c7a:	d5fb      	bpl.n	8004c74 <_printf_i+0xb8>
 8004c7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	da03      	bge.n	8004c8c <_printf_i+0xd0>
 8004c84:	232d      	movs	r3, #45	@ 0x2d
 8004c86:	426d      	negs	r5, r5
 8004c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c8c:	4859      	ldr	r0, [pc, #356]	@ (8004df4 <_printf_i+0x238>)
 8004c8e:	230a      	movs	r3, #10
 8004c90:	e011      	b.n	8004cb6 <_printf_i+0xfa>
 8004c92:	6821      	ldr	r1, [r4, #0]
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	0608      	lsls	r0, r1, #24
 8004c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c9c:	d402      	bmi.n	8004ca4 <_printf_i+0xe8>
 8004c9e:	0649      	lsls	r1, r1, #25
 8004ca0:	bf48      	it	mi
 8004ca2:	b2ad      	uxthmi	r5, r5
 8004ca4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ca6:	4853      	ldr	r0, [pc, #332]	@ (8004df4 <_printf_i+0x238>)
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	bf14      	ite	ne
 8004cac:	230a      	movne	r3, #10
 8004cae:	2308      	moveq	r3, #8
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cb6:	6866      	ldr	r6, [r4, #4]
 8004cb8:	60a6      	str	r6, [r4, #8]
 8004cba:	2e00      	cmp	r6, #0
 8004cbc:	bfa2      	ittt	ge
 8004cbe:	6821      	ldrge	r1, [r4, #0]
 8004cc0:	f021 0104 	bicge.w	r1, r1, #4
 8004cc4:	6021      	strge	r1, [r4, #0]
 8004cc6:	b90d      	cbnz	r5, 8004ccc <_printf_i+0x110>
 8004cc8:	2e00      	cmp	r6, #0
 8004cca:	d04b      	beq.n	8004d64 <_printf_i+0x1a8>
 8004ccc:	4616      	mov	r6, r2
 8004cce:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cd2:	fb03 5711 	mls	r7, r3, r1, r5
 8004cd6:	5dc7      	ldrb	r7, [r0, r7]
 8004cd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cdc:	462f      	mov	r7, r5
 8004cde:	42bb      	cmp	r3, r7
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	d9f4      	bls.n	8004cce <_printf_i+0x112>
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d10b      	bne.n	8004d00 <_printf_i+0x144>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	07df      	lsls	r7, r3, #31
 8004cec:	d508      	bpl.n	8004d00 <_printf_i+0x144>
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	6861      	ldr	r1, [r4, #4]
 8004cf2:	4299      	cmp	r1, r3
 8004cf4:	bfde      	ittt	le
 8004cf6:	2330      	movle	r3, #48	@ 0x30
 8004cf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d00:	1b92      	subs	r2, r2, r6
 8004d02:	6122      	str	r2, [r4, #16]
 8004d04:	f8cd a000 	str.w	sl, [sp]
 8004d08:	464b      	mov	r3, r9
 8004d0a:	aa03      	add	r2, sp, #12
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f7ff fee6 	bl	8004ae0 <_printf_common>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d14a      	bne.n	8004dae <_printf_i+0x1f2>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	b004      	add	sp, #16
 8004d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	4833      	ldr	r0, [pc, #204]	@ (8004df8 <_printf_i+0x23c>)
 8004d2c:	2778      	movs	r7, #120	@ 0x78
 8004d2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	6831      	ldr	r1, [r6, #0]
 8004d36:	061f      	lsls	r7, r3, #24
 8004d38:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d3c:	d402      	bmi.n	8004d44 <_printf_i+0x188>
 8004d3e:	065f      	lsls	r7, r3, #25
 8004d40:	bf48      	it	mi
 8004d42:	b2ad      	uxthmi	r5, r5
 8004d44:	6031      	str	r1, [r6, #0]
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	bf44      	itt	mi
 8004d4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d4e:	6023      	strmi	r3, [r4, #0]
 8004d50:	b11d      	cbz	r5, 8004d5a <_printf_i+0x19e>
 8004d52:	2310      	movs	r3, #16
 8004d54:	e7ac      	b.n	8004cb0 <_printf_i+0xf4>
 8004d56:	4827      	ldr	r0, [pc, #156]	@ (8004df4 <_printf_i+0x238>)
 8004d58:	e7e9      	b.n	8004d2e <_printf_i+0x172>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	f023 0320 	bic.w	r3, r3, #32
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	e7f6      	b.n	8004d52 <_printf_i+0x196>
 8004d64:	4616      	mov	r6, r2
 8004d66:	e7bd      	b.n	8004ce4 <_printf_i+0x128>
 8004d68:	6833      	ldr	r3, [r6, #0]
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	6961      	ldr	r1, [r4, #20]
 8004d6e:	1d18      	adds	r0, r3, #4
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	062e      	lsls	r6, r5, #24
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	d501      	bpl.n	8004d7c <_printf_i+0x1c0>
 8004d78:	6019      	str	r1, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <_printf_i+0x1c6>
 8004d7c:	0668      	lsls	r0, r5, #25
 8004d7e:	d5fb      	bpl.n	8004d78 <_printf_i+0x1bc>
 8004d80:	8019      	strh	r1, [r3, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	4616      	mov	r6, r2
 8004d88:	e7bc      	b.n	8004d04 <_printf_i+0x148>
 8004d8a:	6833      	ldr	r3, [r6, #0]
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	6032      	str	r2, [r6, #0]
 8004d90:	681e      	ldr	r6, [r3, #0]
 8004d92:	6862      	ldr	r2, [r4, #4]
 8004d94:	2100      	movs	r1, #0
 8004d96:	4630      	mov	r0, r6
 8004d98:	f7fb fa3a 	bl	8000210 <memchr>
 8004d9c:	b108      	cbz	r0, 8004da2 <_printf_i+0x1e6>
 8004d9e:	1b80      	subs	r0, r0, r6
 8004da0:	6060      	str	r0, [r4, #4]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	6123      	str	r3, [r4, #16]
 8004da6:	2300      	movs	r3, #0
 8004da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dac:	e7aa      	b.n	8004d04 <_printf_i+0x148>
 8004dae:	6923      	ldr	r3, [r4, #16]
 8004db0:	4632      	mov	r2, r6
 8004db2:	4649      	mov	r1, r9
 8004db4:	4640      	mov	r0, r8
 8004db6:	47d0      	blx	sl
 8004db8:	3001      	adds	r0, #1
 8004dba:	d0ad      	beq.n	8004d18 <_printf_i+0x15c>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	079b      	lsls	r3, r3, #30
 8004dc0:	d413      	bmi.n	8004dea <_printf_i+0x22e>
 8004dc2:	68e0      	ldr	r0, [r4, #12]
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	4298      	cmp	r0, r3
 8004dc8:	bfb8      	it	lt
 8004dca:	4618      	movlt	r0, r3
 8004dcc:	e7a6      	b.n	8004d1c <_printf_i+0x160>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	47d0      	blx	sl
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d09d      	beq.n	8004d18 <_printf_i+0x15c>
 8004ddc:	3501      	adds	r5, #1
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	9903      	ldr	r1, [sp, #12]
 8004de2:	1a5b      	subs	r3, r3, r1
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dcf2      	bgt.n	8004dce <_printf_i+0x212>
 8004de8:	e7eb      	b.n	8004dc2 <_printf_i+0x206>
 8004dea:	2500      	movs	r5, #0
 8004dec:	f104 0619 	add.w	r6, r4, #25
 8004df0:	e7f5      	b.n	8004dde <_printf_i+0x222>
 8004df2:	bf00      	nop
 8004df4:	08005af1 	.word	0x08005af1
 8004df8:	08005b02 	.word	0x08005b02

08004dfc <memmove>:
 8004dfc:	4288      	cmp	r0, r1
 8004dfe:	b510      	push	{r4, lr}
 8004e00:	eb01 0402 	add.w	r4, r1, r2
 8004e04:	d902      	bls.n	8004e0c <memmove+0x10>
 8004e06:	4284      	cmp	r4, r0
 8004e08:	4623      	mov	r3, r4
 8004e0a:	d807      	bhi.n	8004e1c <memmove+0x20>
 8004e0c:	1e43      	subs	r3, r0, #1
 8004e0e:	42a1      	cmp	r1, r4
 8004e10:	d008      	beq.n	8004e24 <memmove+0x28>
 8004e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e1a:	e7f8      	b.n	8004e0e <memmove+0x12>
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4601      	mov	r1, r0
 8004e20:	428a      	cmp	r2, r1
 8004e22:	d100      	bne.n	8004e26 <memmove+0x2a>
 8004e24:	bd10      	pop	{r4, pc}
 8004e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e2e:	e7f7      	b.n	8004e20 <memmove+0x24>

08004e30 <_sbrk_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d06      	ldr	r5, [pc, #24]	@ (8004e4c <_sbrk_r+0x1c>)
 8004e34:	2300      	movs	r3, #0
 8004e36:	4604      	mov	r4, r0
 8004e38:	4608      	mov	r0, r1
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	f7fc fa40 	bl	80012c0 <_sbrk>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_sbrk_r+0x1a>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_sbrk_r+0x1a>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000a78 	.word	0x20000a78

08004e50 <_realloc_r>:
 8004e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e54:	4680      	mov	r8, r0
 8004e56:	4615      	mov	r5, r2
 8004e58:	460c      	mov	r4, r1
 8004e5a:	b921      	cbnz	r1, 8004e66 <_realloc_r+0x16>
 8004e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e60:	4611      	mov	r1, r2
 8004e62:	f7ff bc59 	b.w	8004718 <_malloc_r>
 8004e66:	b92a      	cbnz	r2, 8004e74 <_realloc_r+0x24>
 8004e68:	f7ff fbea 	bl	8004640 <_free_r>
 8004e6c:	2400      	movs	r4, #0
 8004e6e:	4620      	mov	r0, r4
 8004e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e74:	f000 f81a 	bl	8004eac <_malloc_usable_size_r>
 8004e78:	4285      	cmp	r5, r0
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	d802      	bhi.n	8004e84 <_realloc_r+0x34>
 8004e7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e82:	d8f4      	bhi.n	8004e6e <_realloc_r+0x1e>
 8004e84:	4629      	mov	r1, r5
 8004e86:	4640      	mov	r0, r8
 8004e88:	f7ff fc46 	bl	8004718 <_malloc_r>
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d0ec      	beq.n	8004e6c <_realloc_r+0x1c>
 8004e92:	42b5      	cmp	r5, r6
 8004e94:	462a      	mov	r2, r5
 8004e96:	4621      	mov	r1, r4
 8004e98:	bf28      	it	cs
 8004e9a:	4632      	movcs	r2, r6
 8004e9c:	f7ff fbc2 	bl	8004624 <memcpy>
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	f7ff fbcc 	bl	8004640 <_free_r>
 8004ea8:	463c      	mov	r4, r7
 8004eaa:	e7e0      	b.n	8004e6e <_realloc_r+0x1e>

08004eac <_malloc_usable_size_r>:
 8004eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb0:	1f18      	subs	r0, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfbc      	itt	lt
 8004eb6:	580b      	ldrlt	r3, [r1, r0]
 8004eb8:	18c0      	addlt	r0, r0, r3
 8004eba:	4770      	bx	lr

08004ebc <_init>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	bf00      	nop
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr

08004ec8 <_fini>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	bf00      	nop
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr
