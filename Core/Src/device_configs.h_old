/*
 * device_configs.h
 *
 * Created on: Nov 12, 2024
 * Author: Ryan
 */

#ifndef SRC_DEVICE_CONFIGS_H_
#define SRC_DEVICE_CONFIGS_H_

#include <stdint.h>  // For uint8_t, uint32_t types
#include <stdbool.h>
#include "main.h"    // Include for HAL_CAN definitions if needed

// Offset between request and reply CAN IDs
#define CAN_ID_REQUEST_REPLY_OFFSET 8

#define PID_BYTE_LENGTH 2
#define MAX_PAYLOAD_BYTE_LENGTH 4
#define MAX_DLC_BYTE_LENGTH 8
#define MAX_SIGNALS_PER_PID 4


// Enum for CAN IDs for readability and maintainability

// keep this out of CAN_IDs because CAN_IDs is used an array can_devices to reference the devices
#define CAN_ID_HEARTBEAT 0x59E // Heartbeat message

typedef enum {
    CAN_ID_BCM = 0x72E,       // Body Control Module CAN ID
    CAN_ID_SCCM = 0x72C,      // Steering Column Control Module CAN ID
} CAN_IDs;

// Function to calculate the request ID based on the reply CAN ID
static inline uint32_t get_request_id(CAN_IDs module_id) {
    return module_id - CAN_ID_REQUEST_REPLY_OFFSET;
}

typedef enum {
	UINT8_LENGTH_MASK  = 0xFF00000000000000,
	UINT8_COMMAND_MASK = 0x00FF000000000000,
	UINT16_PID_MASK    = 0x0000FFFF00000000,
} CANMasks;

#define MAX_PAYLOAD_LENGTH 4

typedef enum {
	DATA_LENGTH_START = 0,
	DATA_COMMAND_START = 1,
	DATA_PID_START = 2,
	DATA_PAYLOAD_START = 4
} CANMessageBitIndexes;

typedef enum {
	STATE_BIT,		  // Provide a MASK in CANStateChange.change_data to AND with Rx'd data, if non-zero, then bit has changed
	STATE_BYTE,
	STATE_MULTIBYTE
} CANStateChangeType;

// CAN State change structure
typedef struct {
    const char *name;           // Full name of the signal
    const char *short_name;     // Short name for display
    CANStateChangeType change_type;
    uint8_t change_data[MAX_PAYLOAD_BYTE_LENGTH];     // Mask to define the "on" state for comparison
    uint32_t data; // signal state or some sort of data describing the signal
} CANSignal;

// CAN Device PID Configuration Structure
typedef struct {
    const char *name;           // Name of the PID
    const char *short_name;     // Short name for display
    int8_t pid_id[PID_BYTE_LENGTH];        // Reference data for the off state
    CANSignal signals[MAX_SIGNALS_PER_PID];   // List of signals under this PID
} CANDevicePID;

// CAN Device Structure (with pointers to arrays and counts)
typedef struct {
    const char *device_name;          // Name of the device, e.g., "BCM" or "SCCM"
    CAN_IDs can_id;                   // CAN ID for the device
    CANDevicePID *pids;               // Pointer to the array of PIDs
    size_t pid_count;                 // Number of PIDs
} CANDeviceConfig;

// BCM Configurations Enum
typedef enum {
    BCM_PID_BRAKE_PEDAL = 0,
    BCM_PID_REVERSE_LIGHT,
    BCM_PID_HAZARD_BUTTON,
    BCM_PID_COUNT  // Automatically reflects number of entries
} BCMPIDIndex;

typedef enum {
    BCM_BRAKE_PEDAL = 0,
    BCM_REVERSE_LIGHT,
    BCM_HAZARD_BUTTON,
    BCM_CONFIG_COUNT  // Automatically reflects number of entries
} BCMConfigIndex;

typedef struct {
	const char *name;
	const char *short_name;
	uint8_t byte;
} CANCommands;



CANCommands can_request_commands[] = {
    { .byte = 0x10, .name = "Diagnostic Session Control", .short_name = "Diag" },
    { .byte = 0x11, .name = "ECU Reset", .short_name = "Reset" },
    { .byte = 0x14, .name = "Clear Diagnostic Information", .short_name = "Clear" },
    { .byte = 0x19, .name = "Read DTC Information", .short_name = "DTC" },
    { .byte = 0x22, .name = "Read Data by Identifier", .short_name = "Read" },
    { .byte = 0x27, .name = "Security Access", .short_name = "SecAcc" },
    { .byte = 0x28, .name = "Communication Control", .short_name = "CommCtrl" },
    { .byte = 0x2E, .name = "Write Data by Identifier", .short_name = "Write" },
    { .byte = 0x31, .name = "Routine Control", .short_name = "Routine" },
    { .byte = 0x34, .name = "Request Download", .short_name = "Download" },
    { .byte = 0x35, .name = "Request Upload", .short_name = "Upload" },
    { .byte = 0x36, .name = "Transfer Data", .short_name = "Transfer" },
    { .byte = 0x37, .name = "Request Transfer Exit", .short_name = "ExitTrans" },
    { .byte = 0x3E, .name = "Tester Present", .short_name = "Tester" },
    { .byte = 0x7F, .name = "Negative Response", .short_name = "NegResp" }
};

typedef enum {
    RESP_DIAG_SESS,       // 0x50
    RESP_ECU_RESET,       // 0x51
    RESP_CLR_DIAG,        // 0x54
    RESP_DTC,             // 0x59
    RESP_READ,            // 0x62
    RESP_SEC_ACC,         // 0x67
    RESP_COMM_CTRL,       // 0x68
    RESP_WRITE,           // 0x6E
    RESP_ROUTINE,         // 0x71
    RESP_DOWNLOAD,        // 0x74
    RESP_XFER_DATA,       // 0x76
    RESP_XFER_EXIT,       // 0x77
    RESP_TESTER,          // 0x7E
    RESP_NEG              // 0x7F
} CANReplyCommandIndex;

CANCommands can_reply_commands[] = {
    { .byte = 0x50, .name = "Response: Diagnostic Session Control", .short_name = "Diag Sess" },
    { .byte = 0x51, .name = "Response: ECU Reset", .short_name = "Resp ECU Reset" },
    { .byte = 0x54, .name = "Response: Clear Diagnostic Information", .short_name = "Resp Clr Diag" },
    { .byte = 0x59, .name = "Response: Read DTC Information", .short_name = "Resp DTC" },
    { .byte = 0x62, .name = "Response: Read Data By Identifier", .short_name = "Read Resp" },
    { .byte = 0x67, .name = "Response: Security Access", .short_name = "Resp Sec Acc" },
    { .byte = 0x68, .name = "Response: Communication Control", .short_name = "Resp Comm Ctl" },
    { .byte = 0x6E, .name = "Response: Write Data By Identifier", .short_name = "Write Resp" },
    { .byte = 0x71, .name = "Response: Routine Control", .short_name = "Resp Routine" },
    { .byte = 0x74, .name = "Response: Request Download", .short_name = "Resp Download" },
    { .byte = 0x76, .name = "Response: Transfer Data", .short_name = "Resp Xfer Data" },
    { .byte = 0x77, .name = "Response: Request Transfer Exit", .short_name = "Resp Xfer Exit" },
    { .byte = 0x7E, .name = "Response: Tester Present", .short_name = "Resp Tester" },
    { .byte = 0x7F, .name = "Negative Response", .short_name = "Resp Neg" }
};



// BCM Configurations Array
CANDevicePID bcm_pids[] = {
    {
         .name = "Hazard Button", .short_name = "Hzd",
        .pid_id = {0x71, 0x50},
        .signals = {
            {   .name = "Hazard Button", .short_name = "Hzd",
                .change_type = STATE_BIT, .data = 0,
                .change_data = {0x04, 0x00, 0x00, 0x00} } }
    },
    /* ----------------------------------------------------------------------------- */
    {
            .name = "Brake Pedal", .short_name = "Brk",
        .pid_id = {0x2B, 0x00},
        .signals = {
            {   .name = "Brake Pedal", .short_name = "Brk",
                .change_type = STATE_BIT, .data = 0,
                .change_data = {0x40, 0x00, 0x00, 0x00} } }
    },
    /* ----------------------------------------------------------------------------- */
    {
        .name = "Reverse Light", .short_name = "Rev",
        .pid_id = {0x40, 0xC8},
        .signals = {
            {   .name = "Reverse Light", .short_name = "Rev",
                .change_type = STATE_BIT, .data = 0,
                .change_data = { 0x01, 0x00, 0x00, 0x00} } }
    }
};

typedef enum {
	SCCM_PID_TURN_SIGNALS = 0,
	SCCM_PID_COUNT
} SCCMPIDIndex;

// SCCM Configurations Enum

typedef enum {
    SCCM_LEFT_TURN = 0,
    SCCM_RIGHT_TURN,
    SCCM_LEFT_CHANGE,
    SCCM_RIGHT_CHANGE,
    SCCM_CONFIG_COUNT
} SCCMConfigIndex;

// SCCM Configurations Array
CANDevicePID sccm_pids[] = {
    {
        .name = "Turn Signals", .short_name = "TS",
        .pid_id = {0x71, 0x50},
        .signals = {
            { .name = "Left Turn Signal", .short_name = "LT",
              .change_type = STATE_BIT, .data = 0,
              .change_data = { 0x01, 0x00, 0x00, 0x00 } },
            { .name = "Right Turn Signal", .short_name = "RT",
              .change_type = STATE_BIT, .data = 0,
              .change_data = { 0x02, 0x00, 0x00, 0x00 } },
            { .name = "Left Lane Change", .short_name = "LC",
              .change_type = STATE_BIT, .data = 0,
              .change_data = { 0x00, 0x02, 0x00, 0x00 } },
            { .name = "Right Lane Change", .short_name = "RC",
              .change_type = STATE_BIT, .data = 0,
              .change_data = { 0x00, 0x04, 0x00, 0x00 } }
        }
    }
};


// Device Configurations Array
CANDeviceConfig can_devices[] = {
    { .device_name = "BCM", .can_id = CAN_ID_BCM, .pids = bcm_pids, .pid_count = BCM_PID_COUNT },
    { .device_name = "SCCM", .can_id = CAN_ID_SCCM, .pids = sccm_pids, .pid_count = SCCM_PID_COUNT }
};

#endif /* SRC_DEVICE_CONFIGS_H_ */
